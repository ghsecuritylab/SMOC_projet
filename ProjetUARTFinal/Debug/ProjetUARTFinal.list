
ProjetUARTFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003b54  08003b54  00013b54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000000  08003b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
  8 .bss          000007f8  20000090  20000090  00020090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000888  20000888  00020090  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001d21c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004099  00000000  00000000  0003d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000c0d6  00000000  00000000  00041375  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  0004d450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  0004e360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008aff  00000000  00000000  0004f808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00005d1d  00000000  00000000  00058307  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005e024  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002c6c  00000000  00000000  0005e0a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b3c 	.word	0x08003b3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08003b3c 	.word	0x08003b3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8aa 	bl	8000648 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000028 	.word	0x20000028
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f002 ff1a 	bl	8003380 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	200000c4 	.word	0x200000c4
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	200000c4 	.word	0x200000c4

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfad      	iteet	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	bfb5      	itete	lt
 8000616:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800062c:	2800      	cmp	r0, #0
 800062e:	db08      	blt.n	8000642 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000630:	0942      	lsrs	r2, r0, #5
 8000632:	2301      	movs	r3, #1
 8000634:	f000 001f 	and.w	r0, r0, #31
 8000638:	fa03 f000 	lsl.w	r0, r3, r0
 800063c:	4b01      	ldr	r3, [pc, #4]	; (8000644 <HAL_NVIC_EnableIRQ+0x18>)
 800063e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100

08000648 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	3801      	subs	r0, #1
 800064a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064e:	d20a      	bcs.n	8000666 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	21f0      	movs	r1, #240	; 0xf0
 8000658:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000666:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000e010 	.word	0xe000e010
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000674:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000678:	2b02      	cmp	r3, #2
 800067a:	d003      	beq.n	8000684 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000680:	2001      	movs	r0, #1
 8000682:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000684:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000686:	2305      	movs	r3, #5
 8000688:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800068c:	6813      	ldr	r3, [r2, #0]
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000694:	2000      	movs	r0, #0
}
 8000696:	4770      	bx	lr

08000698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800069c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000850 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a4:	4a68      	ldr	r2, [pc, #416]	; (8000848 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000854 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006aa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ae:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b0:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006b2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006b6:	42ac      	cmp	r4, r5
 80006b8:	f040 80b0 	bne.w	800081c <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006bc:	684c      	ldr	r4, [r1, #4]
 80006be:	f024 0c10 	bic.w	ip, r4, #16
 80006c2:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 80006c6:	2e01      	cmp	r6, #1
 80006c8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006cc:	d812      	bhi.n	80006f4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006ce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d0:	2603      	movs	r6, #3
 80006d2:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d6:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006da:	68ce      	ldr	r6, [r1, #12]
 80006dc:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e0:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006e2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e4:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006e6:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ea:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ee:	409e      	lsls	r6, r3
 80006f0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006f2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006f6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f8:	fa06 f60e 	lsl.w	r6, r6, lr
 80006fc:	43f6      	mvns	r6, r6
 80006fe:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000702:	688f      	ldr	r7, [r1, #8]
 8000704:	fa07 f70e 	lsl.w	r7, r7, lr
 8000708:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800070c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000710:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000712:	d116      	bne.n	8000742 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000714:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000718:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800071c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000720:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000724:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000728:	f04f 0c0f 	mov.w	ip, #15
 800072c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000730:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000734:	690f      	ldr	r7, [r1, #16]
 8000736:	fa07 f70b 	lsl.w	r7, r7, fp
 800073a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800073e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000742:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000744:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000746:	f004 0703 	and.w	r7, r4, #3
 800074a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800074e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000752:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000754:	00e6      	lsls	r6, r4, #3
 8000756:	d561      	bpl.n	800081c <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	f04f 0b00 	mov.w	fp, #0
 800075c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000760:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000764:	4e39      	ldr	r6, [pc, #228]	; (800084c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800076a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800076e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000772:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000776:	9703      	str	r7, [sp, #12]
 8000778:	9f03      	ldr	r7, [sp, #12]
 800077a:	f023 0703 	bic.w	r7, r3, #3
 800077e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000782:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000786:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800078a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000792:	f04f 0e0f 	mov.w	lr, #15
 8000796:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	d043      	beq.n	800082a <HAL_GPIO_Init+0x192>
 80007a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a6:	42b0      	cmp	r0, r6
 80007a8:	d041      	beq.n	800082e <HAL_GPIO_Init+0x196>
 80007aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ae:	42b0      	cmp	r0, r6
 80007b0:	d03f      	beq.n	8000832 <HAL_GPIO_Init+0x19a>
 80007b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	d03d      	beq.n	8000836 <HAL_GPIO_Init+0x19e>
 80007ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d03b      	beq.n	800083a <HAL_GPIO_Init+0x1a2>
 80007c2:	4548      	cmp	r0, r9
 80007c4:	d03b      	beq.n	800083e <HAL_GPIO_Init+0x1a6>
 80007c6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007ca:	42b0      	cmp	r0, r6
 80007cc:	d039      	beq.n	8000842 <HAL_GPIO_Init+0x1aa>
 80007ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007d2:	42b0      	cmp	r0, r6
 80007d4:	bf14      	ite	ne
 80007d6:	2608      	movne	r6, #8
 80007d8:	2607      	moveq	r6, #7
 80007da:	fa06 f60c 	lsl.w	r6, r6, ip
 80007de:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007e2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007e4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007ec:	bf0c      	ite	eq
 80007ee:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007f0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007f2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007f4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007fa:	bf0c      	ite	eq
 80007fc:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007fe:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000800:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000802:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000804:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000808:	bf0c      	ite	eq
 800080a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800080c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800080e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000810:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000812:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000814:	bf54      	ite	pl
 8000816:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000818:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800081a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081c:	3301      	adds	r3, #1
 800081e:	2b10      	cmp	r3, #16
 8000820:	f47f af45 	bne.w	80006ae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000824:	b005      	add	sp, #20
 8000826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082a:	465e      	mov	r6, fp
 800082c:	e7d5      	b.n	80007da <HAL_GPIO_Init+0x142>
 800082e:	2601      	movs	r6, #1
 8000830:	e7d3      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000832:	2602      	movs	r6, #2
 8000834:	e7d1      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000836:	2603      	movs	r6, #3
 8000838:	e7cf      	b.n	80007da <HAL_GPIO_Init+0x142>
 800083a:	2604      	movs	r6, #4
 800083c:	e7cd      	b.n	80007da <HAL_GPIO_Init+0x142>
 800083e:	2605      	movs	r6, #5
 8000840:	e7cb      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000842:	2606      	movs	r6, #6
 8000844:	e7c9      	b.n	80007da <HAL_GPIO_Init+0x142>
 8000846:	bf00      	nop
 8000848:	40013c00 	.word	0x40013c00
 800084c:	40020000 	.word	0x40020000
 8000850:	40023800 	.word	0x40023800
 8000854:	40021400 	.word	0x40021400

08000858 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000858:	b10a      	cbz	r2, 800085e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800085a:	6181      	str	r1, [r0, #24]
 800085c:	4770      	bx	lr
 800085e:	0409      	lsls	r1, r1, #16
 8000860:	e7fb      	b.n	800085a <HAL_GPIO_WritePin+0x2>

08000862 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000862:	6943      	ldr	r3, [r0, #20]
 8000864:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000868:	bf08      	it	eq
 800086a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800086c:	6181      	str	r1, [r0, #24]
 800086e:	4770      	bx	lr

08000870 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000874:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000876:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 800087a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800087e:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8000882:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8000886:	2801      	cmp	r0, #1
 8000888:	d028      	beq.n	80008dc <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 800088a:	2028      	movs	r0, #40	; 0x28
 800088c:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8000890:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8000892:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000894:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8000898:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800089c:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 80008a0:	bf08      	it	eq
 80008a2:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 80008a4:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 80008a8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 80008ac:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80008b0:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80008b4:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 80008b8:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 80008bc:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 80008c0:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 80008c4:	f8cd c008 	str.w	ip, [sp, #8]
 80008c8:	e88d 4080 	stmia.w	sp, {r7, lr}
 80008cc:	6820      	ldr	r0, [r4, #0]
 80008ce:	f001 fb79 	bl	8001fc4 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80008d2:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 80008d6:	b004      	add	sp, #16
 80008d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 80008dc:	2002      	movs	r0, #2
 80008de:	e7fa      	b.n	80008d6 <HAL_HCD_HC_Init+0x66>

080008e0 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80008e0:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80008e4:	2b01      	cmp	r3, #1
{
 80008e6:	b510      	push	{r4, lr}
 80008e8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80008ea:	d009      	beq.n	8000900 <HAL_HCD_HC_Halt+0x20>
 80008ec:	2301      	movs	r3, #1
 80008ee:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80008f2:	6800      	ldr	r0, [r0, #0]
 80008f4:	f001 fbf0 	bl	80020d8 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 80008fe:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000900:	2002      	movs	r0, #2
}
 8000902:	bd10      	pop	{r4, pc}

08000904 <HAL_HCD_Init>:
{
 8000904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8000908:	4607      	mov	r7, r0
{
 800090a:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 800090c:	2800      	cmp	r0, #0
 800090e:	d041      	beq.n	8000994 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000910:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8000914:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000916:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800091a:	b91b      	cbnz	r3, 8000924 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 800091c:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8000920:	f002 feb6 	bl	8003690 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000924:	2303      	movs	r3, #3
 8000926:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800092a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 800092c:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800092e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8000932:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8000936:	bf08      	it	eq
 8000938:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 800093a:	f001 f9ff 	bl	8001d3c <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800093e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000940:	466d      	mov	r5, sp
 8000942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000948:	e894 0003 	ldmia.w	r4, {r0, r1}
 800094c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000950:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000954:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000956:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800095a:	6838      	ldr	r0, [r7, #0]
 800095c:	f001 f9a8 	bl	8001cb0 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000960:	f856 0b10 	ldr.w	r0, [r6], #16
 8000964:	2101      	movs	r1, #1
 8000966:	f001 f9ef 	bl	8001d48 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800096a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800096c:	466d      	mov	r5, sp
 800096e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000970:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000974:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000978:	e885 0003 	stmia.w	r5, {r0, r1}
 800097c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000980:	6838      	ldr	r0, [r7, #0]
 8000982:	f001 fa9f 	bl	8001ec4 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000986:	2301      	movs	r3, #1
 8000988:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 800098c:	2000      	movs	r0, #0
}
 800098e:	b00a      	add	sp, #40	; 0x28
 8000990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000994:	2001      	movs	r0, #1
 8000996:	e7fa      	b.n	800098e <HAL_HCD_Init+0x8a>

08000998 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000998:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800099a:	2428      	movs	r4, #40	; 0x28
 800099c:	fb04 0401 	mla	r4, r4, r1, r0
{
 80009a0:	f89d 7014 	ldrb.w	r7, [sp, #20]
 80009a4:	9e06      	ldr	r6, [sp, #24]
 80009a6:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 80009aa:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 80009ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 80009b2:	b96f      	cbnz	r7, 80009d0 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80009b4:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80009b6:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80009b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 80009bc:	d02b      	beq.n	8000a16 <HAL_HCD_HC_SubmitRequest+0x7e>
 80009be:	42bb      	cmp	r3, r7
 80009c0:	d029      	beq.n	8000a16 <HAL_HCD_HC_SubmitRequest+0x7e>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d131      	bne.n	8000a2a <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80009c6:	2328      	movs	r3, #40	; 0x28
 80009c8:	fb03 0301 	mla	r3, r3, r1, r0
 80009cc:	2200      	movs	r2, #0
 80009ce:	e02a      	b.n	8000a26 <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80009d0:	f04f 0e02 	mov.w	lr, #2
 80009d4:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d826      	bhi.n	8000a2a <HAL_HCD_HC_SubmitRequest+0x92>
 80009dc:	a401      	add	r4, pc, #4	; (adr r4, 80009e4 <HAL_HCD_HC_SubmitRequest+0x4c>)
 80009de:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	080009f5 	.word	0x080009f5
 80009e8:	080009c7 	.word	0x080009c7
 80009ec:	08000a17 	.word	0x08000a17
 80009f0:	08000a17 	.word	0x08000a17
      if ((token == 1U) && (direction == 0U)) /*send data */
 80009f4:	2f01      	cmp	r7, #1
 80009f6:	d118      	bne.n	8000a2a <HAL_HCD_HC_SubmitRequest+0x92>
 80009f8:	b9ba      	cbnz	r2, 8000a2a <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 80009fa:	b925      	cbnz	r5, 8000a06 <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 80009fc:	2328      	movs	r3, #40	; 0x28
 80009fe:	fb03 0301 	mla	r3, r3, r1, r0
 8000a02:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000a06:	2328      	movs	r3, #40	; 0x28
 8000a08:	fb03 0301 	mla	r3, r3, r1, r0
 8000a0c:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000a10:	b14a      	cbz	r2, 8000a26 <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000a12:	2202      	movs	r2, #2
 8000a14:	e007      	b.n	8000a26 <HAL_HCD_HC_SubmitRequest+0x8e>
 8000a16:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000a18:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8000a1c:	b9d2      	cbnz	r2, 8000a54 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000a1e:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d1f5      	bne.n	8000a12 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a2a:	2428      	movs	r4, #40	; 0x28
 8000a2c:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000a30:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8000a32:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a36:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000a38:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000a3a:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8000a40:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000a42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a46:	3138      	adds	r1, #56	; 0x38
 8000a48:	7c02      	ldrb	r2, [r0, #16]
 8000a4a:	6800      	ldr	r0, [r0, #0]
}
 8000a4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000a50:	f001 bba6 	b.w	80021a0 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000a54:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000a58:	e7da      	b.n	8000a10 <HAL_HCD_HC_SubmitRequest+0x78>
 8000a5a:	bf00      	nop

08000a5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a60:	6806      	ldr	r6, [r0, #0]
{
 8000a62:	b087      	sub	sp, #28
 8000a64:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a66:	4630      	mov	r0, r6
 8000a68:	f001 f9ce 	bl	8001e08 <USB_GetMode>
 8000a6c:	2801      	cmp	r0, #1
 8000a6e:	f040 80b4 	bne.w	8000bda <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000a72:	6820      	ldr	r0, [r4, #0]
 8000a74:	f001 f9c4 	bl	8001e00 <USB_ReadInterrupts>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	f000 80ae 	beq.w	8000bda <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a7e:	6820      	ldr	r0, [r4, #0]
 8000a80:	f001 f9be 	bl	8001e00 <USB_ReadInterrupts>
 8000a84:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a86:	bf48      	it	mi
 8000a88:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a8a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a8c:	bf44      	itt	mi
 8000a8e:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8000a92:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a94:	f001 f9b4 	bl	8001e00 <USB_ReadInterrupts>
 8000a98:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000a9a:	bf48      	it	mi
 8000a9c:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000a9e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000aa0:	bf44      	itt	mi
 8000aa2:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8000aa6:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000aa8:	f001 f9aa 	bl	8001e00 <USB_ReadInterrupts>
 8000aac:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000aae:	bf48      	it	mi
 8000ab0:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000ab2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ab4:	bf44      	itt	mi
 8000ab6:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8000aba:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000abc:	f001 f9a0 	bl	8001e00 <USB_ReadInterrupts>
 8000ac0:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ac2:	bf48      	it	mi
 8000ac4:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ac6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ac8:	bf44      	itt	mi
 8000aca:	2202      	movmi	r2, #2
 8000acc:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ace:	f001 f997 	bl	8001e00 <USB_ReadInterrupts>
 8000ad2:	0082      	lsls	r2, r0, #2
 8000ad4:	d510      	bpl.n	8000af8 <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000ad6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000ada:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000ade:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f002 fe24 	bl	8003730 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	6820      	ldr	r0, [r4, #0]
 8000aec:	f001 f990 	bl	8001e10 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000af8:	6820      	ldr	r0, [r4, #0]
 8000afa:	f001 f981 	bl	8001e00 <USB_ReadInterrupts>
 8000afe:	01c3      	lsls	r3, r0, #7
 8000b00:	d542      	bpl.n	8000b88 <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000b02:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000b04:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b08:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000b0a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000b0e:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000b10:	9b05      	ldr	r3, [sp, #20]
 8000b12:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000b16:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000b18:	9b04      	ldr	r3, [sp, #16]
 8000b1a:	079f      	lsls	r7, r3, #30
 8000b1c:	d50d      	bpl.n	8000b3a <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000b1e:	9b04      	ldr	r3, [sp, #16]
 8000b20:	07d8      	lsls	r0, r3, #31
 8000b22:	d506      	bpl.n	8000b32 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000b24:	69ab      	ldr	r3, [r5, #24]
 8000b26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000b2a:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	f002 fdfb 	bl	8003728 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000b32:	9b05      	ldr	r3, [sp, #20]
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000b3a:	9b04      	ldr	r3, [sp, #16]
 8000b3c:	0719      	lsls	r1, r3, #28
 8000b3e:	d519      	bpl.n	8000b74 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000b40:	9b05      	ldr	r3, [sp, #20]
 8000b42:	f043 0308 	orr.w	r3, r3, #8
 8000b46:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000b48:	9b04      	ldr	r3, [sp, #16]
 8000b4a:	075a      	lsls	r2, r3, #29
 8000b4c:	d550      	bpl.n	8000bf0 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000b4e:	69a1      	ldr	r1, [r4, #24]
 8000b50:	2902      	cmp	r1, #2
 8000b52:	d145      	bne.n	8000be0 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000b54:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b56:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000b58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b60:	bf18      	it	ne
 8000b62:	2101      	movne	r1, #1
 8000b64:	f001 f954 	bl	8001e10 <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f002 fde6 	bl	800373a <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f002 fdda 	bl	8003728 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000b74:	9b04      	ldr	r3, [sp, #16]
 8000b76:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000b78:	bf42      	ittt	mi
 8000b7a:	9b05      	ldrmi	r3, [sp, #20]
 8000b7c:	f043 0320 	orrmi.w	r3, r3, #32
 8000b80:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000b82:	9b05      	ldr	r3, [sp, #20]
 8000b84:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000b88:	6820      	ldr	r0, [r4, #0]
 8000b8a:	f001 f939 	bl	8001e00 <USB_ReadInterrupts>
 8000b8e:	0707      	lsls	r7, r0, #28
 8000b90:	d505      	bpl.n	8000b9e <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8000b92:	4620      	mov	r0, r4
 8000b94:	f002 fdc4 	bl	8003720 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000b9e:	6820      	ldr	r0, [r4, #0]
 8000ba0:	f001 f92e 	bl	8001e00 <USB_ReadInterrupts>
 8000ba4:	0185      	lsls	r5, r0, #6
 8000ba6:	d512      	bpl.n	8000bce <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000ba8:	6820      	ldr	r0, [r4, #0]
 8000baa:	f001 fa90 	bl	80020ce <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000bae:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000bb2:	9001      	str	r0, [sp, #4]
 8000bb4:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000bb8:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000bba:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000bbe:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000bc0:	68a3      	ldr	r3, [r4, #8]
 8000bc2:	459a      	cmp	sl, r3
 8000bc4:	d323      	bcc.n	8000c0e <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bcc:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000bce:	6820      	ldr	r0, [r4, #0]
 8000bd0:	f001 f916 	bl	8001e00 <USB_ReadInterrupts>
 8000bd4:	06c3      	lsls	r3, r0, #27
 8000bd6:	f100 8220 	bmi.w	800101a <HAL_HCD_IRQHandler+0x5be>
}
 8000bda:	b007      	add	sp, #28
 8000bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000be0:	68e3      	ldr	r3, [r4, #12]
 8000be2:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8000be4:	bf04      	itt	eq
 8000be6:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8000bea:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8000bee:	e7bb      	b.n	8000b68 <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f002 fda6 	bl	8003742 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000bf6:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000bfa:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000bfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000c00:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8000c04:	6993      	ldr	r3, [r2, #24]
 8000c06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	e7b2      	b.n	8000b74 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c0e:	9a01      	ldr	r2, [sp, #4]
 8000c10:	f00a 030f 	and.w	r3, sl, #15
 8000c14:	fa22 f303 	lsr.w	r3, r2, r3
 8000c18:	07d8      	lsls	r0, r3, #31
 8000c1a:	f140 808a 	bpl.w	8000d32 <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c22:	6820      	ldr	r0, [r4, #0]
 8000c24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000c28:	fa5f f58a 	uxtb.w	r5, sl
 8000c2c:	f000 8104 	beq.w	8000e38 <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000c30:	016a      	lsls	r2, r5, #5
 8000c32:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8000c36:	18d6      	adds	r6, r2, r3
 8000c38:	68b1      	ldr	r1, [r6, #8]
 8000c3a:	0749      	lsls	r1, r1, #29
 8000c3c:	d513      	bpl.n	8000c66 <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000c3e:	2104      	movs	r1, #4
 8000c40:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c42:	68f1      	ldr	r1, [r6, #12]
 8000c44:	f041 0102 	orr.w	r1, r1, #2
 8000c48:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000c4a:	68b1      	ldr	r1, [r6, #8]
 8000c4c:	0589      	lsls	r1, r1, #22
 8000c4e:	d542      	bpl.n	8000cd6 <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c50:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c52:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c5a:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c5c:	f001 fa3c 	bl	80020d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c64:	e0c7      	b.n	8000df6 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000c66:	68b1      	ldr	r1, [r6, #8]
 8000c68:	0689      	lsls	r1, r1, #26
 8000c6a:	d502      	bpl.n	8000c72 <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	60b1      	str	r1, [r6, #8]
 8000c70:	e7eb      	b.n	8000c4a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000c72:	68b1      	ldr	r1, [r6, #8]
 8000c74:	0709      	lsls	r1, r1, #28
 8000c76:	d515      	bpl.n	8000ca4 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000c78:	68f1      	ldr	r1, [r6, #12]
 8000c7a:	9303      	str	r3, [sp, #12]
 8000c7c:	f041 0102 	orr.w	r1, r1, #2
 8000c80:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000c82:	fb07 4105 	mla	r1, r7, r5, r4
 8000c86:	f04f 0e05 	mov.w	lr, #5
 8000c8a:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000c8e:	2110      	movs	r1, #16
 8000c90:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000c92:	2108      	movs	r1, #8
 8000c94:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000c96:	4629      	mov	r1, r5
 8000c98:	9202      	str	r2, [sp, #8]
 8000c9a:	f001 fa1d 	bl	80020d8 <USB_HC_Halt>
 8000c9e:	9a02      	ldr	r2, [sp, #8]
 8000ca0:	9b03      	ldr	r3, [sp, #12]
 8000ca2:	e7d2      	b.n	8000c4a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000ca4:	68b1      	ldr	r1, [r6, #8]
 8000ca6:	0549      	lsls	r1, r1, #21
 8000ca8:	d5cf      	bpl.n	8000c4a <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000caa:	68f1      	ldr	r1, [r6, #12]
 8000cac:	9303      	str	r3, [sp, #12]
 8000cae:	f041 0102 	orr.w	r1, r1, #2
 8000cb2:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000cb4:	4629      	mov	r1, r5
 8000cb6:	9202      	str	r2, [sp, #8]
 8000cb8:	f001 fa0e 	bl	80020d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000cc0:	fb07 4105 	mla	r1, r7, r5, r4
 8000cc4:	2008      	movs	r0, #8
 8000cc6:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cce:	60b1      	str	r1, [r6, #8]
 8000cd0:	9b03      	ldr	r3, [sp, #12]
 8000cd2:	9a02      	ldr	r2, [sp, #8]
 8000cd4:	e7b9      	b.n	8000c4a <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000cd6:	68b1      	ldr	r1, [r6, #8]
 8000cd8:	07c8      	lsls	r0, r1, #31
 8000cda:	d53d      	bpl.n	8000d58 <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8000cdc:	6921      	ldr	r1, [r4, #16]
 8000cde:	b149      	cbz	r1, 8000cf4 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000ce0:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000ce4:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000ce6:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000cea:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8000cee:	1a09      	subs	r1, r1, r0
 8000cf0:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 8000cf4:	fb07 4e05 	mla	lr, r7, r5, r4
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000cfe:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000d02:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000d04:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 8000d08:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000d0c:	d116      	bne.n	8000d3c <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d0e:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d10:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d18:	4629      	mov	r1, r5
 8000d1a:	f001 f9dd 	bl	80020d8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000d1e:	2310      	movs	r3, #16
 8000d20:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8000d22:	fb07 4505 	mla	r5, r7, r5, r4
 8000d26:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8000d2a:	f083 0301 	eor.w	r3, r3, #1
 8000d2e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000d32:	f10a 0a01 	add.w	sl, sl, #1
 8000d36:	f108 0820 	add.w	r8, r8, #32
 8000d3a:	e741      	b.n	8000bc0 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000d3c:	2903      	cmp	r1, #3
 8000d3e:	d1f0      	bne.n	8000d22 <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000d40:	58d1      	ldr	r1, [r2, r3]
 8000d42:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8000d46:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8000d48:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4629      	mov	r1, r5
 8000d50:	4620      	mov	r0, r4
 8000d52:	f002 fcf1 	bl	8003738 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000d56:	e7e4      	b.n	8000d22 <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000d58:	68b1      	ldr	r1, [r6, #8]
 8000d5a:	0789      	lsls	r1, r1, #30
 8000d5c:	d536      	bpl.n	8000dcc <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000d5e:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000d60:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000d64:	f021 0102 	bic.w	r1, r1, #2
 8000d68:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000d6a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8000d6e:	2901      	cmp	r1, #1
 8000d70:	d10c      	bne.n	8000d8c <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8000d72:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d76:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000d7a:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8000d7e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000d82:	4629      	mov	r1, r5
 8000d84:	4620      	mov	r0, r4
 8000d86:	f002 fcd7 	bl	8003738 <HAL_HCD_HC_NotifyURBChange_Callback>
 8000d8a:	e7d2      	b.n	8000d32 <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000d8c:	2905      	cmp	r1, #5
 8000d8e:	d0f0      	beq.n	8000d72 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000d90:	2906      	cmp	r1, #6
 8000d92:	d001      	beq.n	8000d98 <HAL_HCD_IRQHandler+0x33c>
 8000d94:	2908      	cmp	r1, #8
 8000d96:	d114      	bne.n	8000dc2 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 8000d98:	fb07 4105 	mla	r1, r7, r5, r4
 8000d9c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8000d9e:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8000da0:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8000da2:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000da4:	bf83      	ittte	hi
 8000da6:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8000da8:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000dac:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8000db0:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8000db4:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8000db6:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8000dba:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8000dbe:	50d1      	str	r1, [r2, r3]
 8000dc0:	e7d9      	b.n	8000d76 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000dc2:	2903      	cmp	r1, #3
 8000dc4:	d1d7      	bne.n	8000d76 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000dc6:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8000dca:	e7f3      	b.n	8000db4 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000dcc:	68b1      	ldr	r1, [r6, #8]
 8000dce:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8000dd2:	d012      	beq.n	8000dfa <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000dd4:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000dd6:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000dd8:	f043 0302 	orr.w	r3, r3, #2
 8000ddc:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8000dde:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000de2:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8000de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000de6:	3201      	adds	r2, #1
 8000de8:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000dea:	2206      	movs	r2, #6
 8000dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000df0:	f001 f972 	bl	80020d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	60b3      	str	r3, [r6, #8]
 8000df8:	e79b      	b.n	8000d32 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000dfa:	68b3      	ldr	r3, [r6, #8]
 8000dfc:	06da      	lsls	r2, r3, #27
 8000dfe:	d598      	bpl.n	8000d32 <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8000e00:	fb07 4205 	mla	r2, r7, r5, r4
 8000e04:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d10a      	bne.n	8000e22 <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e0c:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e0e:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e10:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e18:	4629      	mov	r1, r5
 8000e1a:	f001 f95d 	bl	80020d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000e1e:	2310      	movs	r3, #16
 8000e20:	e7e9      	b.n	8000df6 <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000e22:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8000e26:	d1fa      	bne.n	8000e1e <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8000e2a:	6923      	ldr	r3, [r4, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f6      	bne.n	8000e1e <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8000e36:	e7ea      	b.n	8000e0e <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000e38:	0169      	lsls	r1, r5, #5
 8000e3a:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8000e3e:	188e      	adds	r6, r1, r2
 8000e40:	68b3      	ldr	r3, [r6, #8]
 8000e42:	f013 0e04 	ands.w	lr, r3, #4
 8000e46:	d006      	beq.n	8000e56 <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e48:	2304      	movs	r3, #4
 8000e4a:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e4c:	68f3      	ldr	r3, [r6, #12]
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	60f3      	str	r3, [r6, #12]
 8000e54:	e76d      	b.n	8000d32 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000e56:	68b3      	ldr	r3, [r6, #8]
 8000e58:	f013 0320 	ands.w	r3, r3, #32
 8000e5c:	d014      	beq.n	8000e88 <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000e5e:	2320      	movs	r3, #32
 8000e60:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8000e62:	fb07 4305 	mla	r3, r7, r5, r4
 8000e66:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000e6a:	2a01      	cmp	r2, #1
 8000e6c:	f47f af61 	bne.w	8000d32 <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8000e70:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000e74:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e78:	68f3      	ldr	r3, [r6, #12]
 8000e7a:	f043 0302 	orr.w	r3, r3, #2
 8000e7e:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e80:	4629      	mov	r1, r5
 8000e82:	f001 f929 	bl	80020d8 <USB_HC_Halt>
 8000e86:	e754      	b.n	8000d32 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8000e88:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8000e8c:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8000e90:	d011      	beq.n	8000eb6 <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 8000e92:	fb07 4205 	mla	r2, r7, r5, r4
 8000e96:	2104      	movs	r1, #4
 8000e98:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ea2:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ea4:	68f3      	ldr	r3, [r6, #12]
 8000ea6:	f043 0302 	orr.w	r3, r3, #2
 8000eaa:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000eac:	4629      	mov	r1, r5
 8000eae:	f001 f913 	bl	80020d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8000eb2:	2340      	movs	r3, #64	; 0x40
 8000eb4:	e79f      	b.n	8000df6 <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000eb6:	68b3      	ldr	r3, [r6, #8]
 8000eb8:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8000ebc:	d005      	beq.n	8000eca <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ebe:	68f3      	ldr	r3, [r6, #12]
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ec6:	4629      	mov	r1, r5
 8000ec8:	e6c8      	b.n	8000c5c <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000eca:	68b3      	ldr	r3, [r6, #8]
 8000ecc:	07db      	lsls	r3, r3, #31
 8000ece:	d511      	bpl.n	8000ef4 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ed0:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ed2:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ed6:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000eda:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ede:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ee0:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000ee2:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ee4:	f001 f8f8 	bl	80020d8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 8000ee8:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000eea:	2201      	movs	r2, #1
 8000eec:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000eee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8000ef2:	e71e      	b.n	8000d32 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000ef4:	68b3      	ldr	r3, [r6, #8]
 8000ef6:	071b      	lsls	r3, r3, #28
 8000ef8:	d50e      	bpl.n	8000f18 <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000efa:	2308      	movs	r3, #8
 8000efc:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000efe:	68f3      	ldr	r3, [r6, #12]
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f06:	4629      	mov	r1, r5
 8000f08:	f001 f8e6 	bl	80020d8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8000f0c:	fb07 4505 	mla	r5, r7, r5, r4
 8000f10:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f12:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000f16:	e70c      	b.n	8000d32 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8000f18:	68b3      	ldr	r3, [r6, #8]
 8000f1a:	06db      	lsls	r3, r3, #27
 8000f1c:	d515      	bpl.n	8000f4a <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f1e:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 8000f22:	2203      	movs	r2, #3
 8000f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8000f28:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f2c:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8000f30:	b92a      	cbnz	r2, 8000f3e <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8000f32:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8000f36:	b912      	cbnz	r2, 8000f3e <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f3e:	68f3      	ldr	r3, [r6, #12]
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f46:	4629      	mov	r1, r5
 8000f48:	e767      	b.n	8000e1a <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000f4a:	68b3      	ldr	r3, [r6, #8]
 8000f4c:	061b      	lsls	r3, r3, #24
 8000f4e:	d50c      	bpl.n	8000f6a <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f50:	68f3      	ldr	r3, [r6, #12]
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f58:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f5a:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f5e:	f001 f8bb 	bl	80020d8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f62:	2306      	movs	r3, #6
 8000f64:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8000f68:	e744      	b.n	8000df4 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000f6a:	68b3      	ldr	r3, [r6, #8]
 8000f6c:	055b      	lsls	r3, r3, #21
 8000f6e:	d50f      	bpl.n	8000f90 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f70:	68f3      	ldr	r3, [r6, #12]
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f001 f8ad 	bl	80020d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f7e:	2310      	movs	r3, #16
 8000f80:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f86:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000f88:	fb07 4505 	mla	r5, r7, r5, r4
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	e7c0      	b.n	8000f12 <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8000f90:	68b3      	ldr	r3, [r6, #8]
 8000f92:	0798      	lsls	r0, r3, #30
 8000f94:	f57f aecd 	bpl.w	8000d32 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000f98:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000f9a:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8000f9e:	f023 0302 	bic.w	r3, r3, #2
 8000fa2:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000fa4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10e      	bne.n	8000fca <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8000fac:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8000fb0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8000fb4:	3b02      	subs	r3, #2
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	f63f aedd 	bhi.w	8000d76 <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8000fbc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000fc0:	f083 0301 	eor.w	r3, r3, #1
 8000fc4:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 8000fc8:	e6d5      	b.n	8000d76 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d102      	bne.n	8000fd4 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8000fce:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8000fd2:	e6d0      	b.n	8000d76 <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d0fa      	beq.n	8000fce <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d102      	bne.n	8000fe2 <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8000fdc:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8000fe0:	e6c9      	b.n	8000d76 <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d002      	beq.n	8000fec <HAL_HCD_IRQHandler+0x590>
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	f47f aec5 	bne.w	8000d76 <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8000fec:	fb07 4005 	mla	r0, r7, r5, r4
 8000ff0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000ff2:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8000ff4:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8000ff6:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8000ff8:	bf84      	itt	hi
 8000ffa:	2304      	movhi	r3, #4
 8000ffc:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001000:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001002:	bf88      	it	hi
 8001004:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001008:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001010:	bf98      	it	ls
 8001012:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001016:	508b      	str	r3, [r1, r2]
 8001018:	e6ad      	b.n	8000d76 <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800101a:	6826      	ldr	r6, [r4, #0]
 800101c:	69b3      	ldr	r3, [r6, #24]
 800101e:	f023 0310 	bic.w	r3, r3, #16
 8001022:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8001024:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001026:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 800102a:	2a02      	cmp	r2, #2
 800102c:	d129      	bne.n	8001082 <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800102e:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001032:	f1b8 0f00 	cmp.w	r8, #0
 8001036:	d024      	beq.n	8001082 <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001038:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800103c:	2728      	movs	r7, #40	; 0x28
 800103e:	fb07 4705 	mla	r7, r7, r5, r4
 8001042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001044:	b1e9      	cbz	r1, 8001082 <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001046:	4642      	mov	r2, r8
 8001048:	4630      	mov	r0, r6
 800104a:	f000 fecb 	bl	8001de4 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800104e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001050:	4443      	add	r3, r8
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001056:	4443      	add	r3, r8
 8001058:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800105a:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 800105e:	016b      	lsls	r3, r5, #5
 8001060:	199a      	adds	r2, r3, r6
 8001062:	6911      	ldr	r1, [r2, #16]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_HCD_IRQHandler+0x634>)
 8001066:	400a      	ands	r2, r1
 8001068:	b15a      	cbz	r2, 8001082 <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800106a:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800106c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001070:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001074:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001076:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001082:	6822      	ldr	r2, [r4, #0]
 8001084:	6993      	ldr	r3, [r2, #24]
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	e5a5      	b.n	8000bda <HAL_HCD_IRQHandler+0x17e>
 800108e:	bf00      	nop
 8001090:	1ff80000 	.word	0x1ff80000

08001094 <HAL_HCD_Start>:
{
 8001094:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8001096:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800109a:	2b01      	cmp	r3, #1
{
 800109c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800109e:	d00d      	beq.n	80010bc <HAL_HCD_Start+0x28>
 80010a0:	2501      	movs	r5, #1
 80010a2:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80010a6:	6800      	ldr	r0, [r0, #0]
 80010a8:	f000 fe42 	bl	8001d30 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80010ac:	4629      	mov	r1, r5
 80010ae:	6820      	ldr	r0, [r4, #0]
 80010b0:	f000 fee8 	bl	8001e84 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80010bc:	2002      	movs	r0, #2
}
 80010be:	bd38      	pop	{r3, r4, r5, pc}

080010c0 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80010c0:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80010c4:	2b01      	cmp	r3, #1
{
 80010c6:	b510      	push	{r4, lr}
 80010c8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80010ca:	d009      	beq.n	80010e0 <HAL_HCD_Stop+0x20>
 80010cc:	2301      	movs	r3, #1
 80010ce:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80010d2:	6800      	ldr	r0, [r0, #0]
 80010d4:	f001 f916 	bl	8002304 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80010d8:	2000      	movs	r0, #0
 80010da:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80010de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80010e0:	2002      	movs	r0, #2
}
 80010e2:	bd10      	pop	{r4, pc}

080010e4 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80010e4:	6800      	ldr	r0, [r0, #0]
 80010e6:	f000 beaf 	b.w	8001e48 <USB_ResetPort>

080010ea <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80010ea:	2328      	movs	r3, #40	; 0x28
 80010ec:	fb03 0101 	mla	r1, r3, r1, r0
}
 80010f0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80010f4:	4770      	bx	lr

080010f6 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80010f6:	2328      	movs	r3, #40	; 0x28
 80010f8:	fb03 0101 	mla	r1, r3, r1, r0
}
 80010fc:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80010fe:	4770      	bx	lr

08001100 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001100:	6800      	ldr	r0, [r0, #0]
 8001102:	f000 bf5a 	b.w	8001fba <USB_GetCurrentFrame>

08001106 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001106:	6800      	ldr	r0, [r0, #0]
 8001108:	f000 bf4c 	b.w	8001fa4 <USB_GetHostSpeed>

0800110c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800110c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800110e:	4604      	mov	r4, r0
 8001110:	b908      	cbnz	r0, 8001116 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001112:	2001      	movs	r0, #1
 8001114:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001116:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800111a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800111e:	b91b      	cbnz	r3, 8001128 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001120:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001124:	f002 f948 	bl	80033b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001128:	2324      	movs	r3, #36	; 0x24
 800112a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800113e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001146:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001148:	f000 fafc 	bl	8001744 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800114c:	6865      	ldr	r5, [r4, #4]
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <HAL_I2C_Init+0x148>)
 8001150:	429d      	cmp	r5, r3
 8001152:	d84d      	bhi.n	80011f0 <HAL_I2C_Init+0xe4>
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <HAL_I2C_Init+0x14c>)
 8001156:	4298      	cmp	r0, r3
 8001158:	d9db      	bls.n	8001112 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800115a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800115c:	493f      	ldr	r1, [pc, #252]	; (800125c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800115e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001160:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001168:	430b      	orrs	r3, r1
 800116a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800116c:	6a13      	ldr	r3, [r2, #32]
 800116e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001172:	3101      	adds	r1, #1
 8001174:	4319      	orrs	r1, r3
 8001176:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001178:	69d1      	ldr	r1, [r2, #28]
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <HAL_I2C_Init+0x148>)
 800117c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001180:	429d      	cmp	r5, r3
 8001182:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001186:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800118a:	d848      	bhi.n	800121e <HAL_I2C_Init+0x112>
 800118c:	006d      	lsls	r5, r5, #1
 800118e:	fbb0 f0f5 	udiv	r0, r0, r5
 8001192:	3001      	adds	r0, #1
 8001194:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001198:	2b04      	cmp	r3, #4
 800119a:	bf38      	it	cc
 800119c:	2304      	movcc	r3, #4
 800119e:	430b      	orrs	r3, r1
 80011a0:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011a2:	6811      	ldr	r1, [r2, #0]
 80011a4:	6a20      	ldr	r0, [r4, #32]
 80011a6:	69e3      	ldr	r3, [r4, #28]
 80011a8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80011ac:	4303      	orrs	r3, r0
 80011ae:	430b      	orrs	r3, r1
 80011b0:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011b2:	6891      	ldr	r1, [r2, #8]
 80011b4:	68e0      	ldr	r0, [r4, #12]
 80011b6:	6923      	ldr	r3, [r4, #16]
 80011b8:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80011bc:	4303      	orrs	r3, r0
 80011be:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80011c2:	430b      	orrs	r3, r1
 80011c4:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011c6:	68d1      	ldr	r1, [r2, #12]
 80011c8:	69a0      	ldr	r0, [r4, #24]
 80011ca:	6963      	ldr	r3, [r4, #20]
 80011cc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80011d0:	4303      	orrs	r3, r0
 80011d2:	430b      	orrs	r3, r1
 80011d4:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011d6:	6813      	ldr	r3, [r2, #0]
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011de:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80011e0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011e2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011e8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ea:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_I2C_Init+0x154>)
 80011f2:	4298      	cmp	r0, r3
 80011f4:	d98d      	bls.n	8001112 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011f6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80011f8:	4e18      	ldr	r6, [pc, #96]	; (800125c <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011fa:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80011fc:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001204:	4333      	orrs	r3, r6
 8001206:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001208:	6a13      	ldr	r3, [r2, #32]
 800120a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800120e:	4371      	muls	r1, r6
 8001210:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001214:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001218:	fbb1 f1f6 	udiv	r1, r1, r6
 800121c:	e7a9      	b.n	8001172 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800121e:	68a3      	ldr	r3, [r4, #8]
 8001220:	b953      	cbnz	r3, 8001238 <HAL_I2C_Init+0x12c>
 8001222:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001226:	fbb0 f0f3 	udiv	r0, r0, r3
 800122a:	1c43      	adds	r3, r0, #1
 800122c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001230:	b16b      	cbz	r3, 800124e <HAL_I2C_Init+0x142>
 8001232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001236:	e7b2      	b.n	800119e <HAL_I2C_Init+0x92>
 8001238:	2319      	movs	r3, #25
 800123a:	436b      	muls	r3, r5
 800123c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001240:	1c43      	adds	r3, r0, #1
 8001242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001246:	b113      	cbz	r3, 800124e <HAL_I2C_Init+0x142>
 8001248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800124c:	e7a7      	b.n	800119e <HAL_I2C_Init+0x92>
 800124e:	2301      	movs	r3, #1
 8001250:	e7a5      	b.n	800119e <HAL_I2C_Init+0x92>
 8001252:	bf00      	nop
 8001254:	000186a0 	.word	0x000186a0
 8001258:	001e847f 	.word	0x001e847f
 800125c:	000f4240 	.word	0x000f4240
 8001260:	003d08ff 	.word	0x003d08ff

08001264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	4604      	mov	r4, r0
 800126a:	b908      	cbnz	r0, 8001270 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800126c:	2001      	movs	r0, #1
 800126e:	e03f      	b.n	80012f0 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	07dd      	lsls	r5, r3, #31
 8001274:	d410      	bmi.n	8001298 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	0798      	lsls	r0, r3, #30
 800127a:	d45a      	bmi.n	8001332 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	071a      	lsls	r2, r3, #28
 8001280:	f100 809c 	bmi.w	80013bc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	075b      	lsls	r3, r3, #29
 8001288:	f100 80ba 	bmi.w	8001400 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128c:	69a0      	ldr	r0, [r4, #24]
 800128e:	2800      	cmp	r0, #0
 8001290:	f040 811b 	bne.w	80014ca <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001294:	2000      	movs	r0, #0
 8001296:	e02b      	b.n	80012f0 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001298:	4ba4      	ldr	r3, [pc, #656]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	f002 020c 	and.w	r2, r2, #12
 80012a0:	2a04      	cmp	r2, #4
 80012a2:	d007      	beq.n	80012b4 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	2a08      	cmp	r2, #8
 80012ac:	d10a      	bne.n	80012c4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	0259      	lsls	r1, r3, #9
 80012b2:	d507      	bpl.n	80012c4 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b4:	4b9d      	ldr	r3, [pc, #628]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	039a      	lsls	r2, r3, #14
 80012ba:	d5dc      	bpl.n	8001276 <HAL_RCC_OscConfig+0x12>
 80012bc:	6863      	ldr	r3, [r4, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1d9      	bne.n	8001276 <HAL_RCC_OscConfig+0x12>
 80012c2:	e7d3      	b.n	800126c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c4:	6863      	ldr	r3, [r4, #4]
 80012c6:	4d99      	ldr	r5, [pc, #612]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012cc:	d113      	bne.n	80012f6 <HAL_RCC_OscConfig+0x92>
 80012ce:	682b      	ldr	r3, [r5, #0]
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012d6:	f7ff f949 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	4d94      	ldr	r5, [pc, #592]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80012dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	039b      	lsls	r3, r3, #14
 80012e2:	d4c8      	bmi.n	8001276 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff f942 	bl	800056c <HAL_GetTick>
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	2864      	cmp	r0, #100	; 0x64
 80012ec:	d9f7      	bls.n	80012de <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80012ee:	2003      	movs	r0, #3
}
 80012f0:	b002      	add	sp, #8
 80012f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012fa:	d104      	bne.n	8001306 <HAL_RCC_OscConfig+0xa2>
 80012fc:	682b      	ldr	r3, [r5, #0]
 80012fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001302:	602b      	str	r3, [r5, #0]
 8001304:	e7e3      	b.n	80012ce <HAL_RCC_OscConfig+0x6a>
 8001306:	682a      	ldr	r2, [r5, #0]
 8001308:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800130c:	602a      	str	r2, [r5, #0]
 800130e:	682a      	ldr	r2, [r5, #0]
 8001310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001314:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1dd      	bne.n	80012d6 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 800131a:	f7ff f927 	bl	800056c <HAL_GetTick>
 800131e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	039f      	lsls	r7, r3, #14
 8001324:	d5a7      	bpl.n	8001276 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff f921 	bl	800056c <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	2864      	cmp	r0, #100	; 0x64
 800132e:	d9f7      	bls.n	8001320 <HAL_RCC_OscConfig+0xbc>
 8001330:	e7dd      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001332:	4b7e      	ldr	r3, [pc, #504]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	f012 0f0c 	tst.w	r2, #12
 800133a:	d007      	beq.n	800134c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	2a08      	cmp	r2, #8
 8001344:	d111      	bne.n	800136a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	025e      	lsls	r6, r3, #9
 800134a:	d40e      	bmi.n	800136a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134c:	4b77      	ldr	r3, [pc, #476]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	0795      	lsls	r5, r2, #30
 8001352:	d502      	bpl.n	800135a <HAL_RCC_OscConfig+0xf6>
 8001354:	68e2      	ldr	r2, [r4, #12]
 8001356:	2a01      	cmp	r2, #1
 8001358:	d188      	bne.n	800126c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	6921      	ldr	r1, [r4, #16]
 800135e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001362:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001366:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001368:	e788      	b.n	800127c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800136a:	68e2      	ldr	r2, [r4, #12]
 800136c:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x2cc>)
 800136e:	b1b2      	cbz	r2, 800139e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001374:	f7ff f8fa 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	4d6c      	ldr	r5, [pc, #432]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800137a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	0798      	lsls	r0, r3, #30
 8001380:	d507      	bpl.n	8001392 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	6922      	ldr	r2, [r4, #16]
 8001386:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800138a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800138e:	602b      	str	r3, [r5, #0]
 8001390:	e774      	b.n	800127c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff f8eb 	bl	800056c <HAL_GetTick>
 8001396:	1b80      	subs	r0, r0, r6
 8001398:	2802      	cmp	r0, #2
 800139a:	d9ef      	bls.n	800137c <HAL_RCC_OscConfig+0x118>
 800139c:	e7a7      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800139e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013a0:	f7ff f8e4 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a4:	4d61      	ldr	r5, [pc, #388]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80013a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	0799      	lsls	r1, r3, #30
 80013ac:	f57f af66 	bpl.w	800127c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff f8dc 	bl	800056c <HAL_GetTick>
 80013b4:	1b80      	subs	r0, r0, r6
 80013b6:	2802      	cmp	r0, #2
 80013b8:	d9f6      	bls.n	80013a8 <HAL_RCC_OscConfig+0x144>
 80013ba:	e798      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013bc:	6962      	ldr	r2, [r4, #20]
 80013be:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <HAL_RCC_OscConfig+0x2d0>)
 80013c0:	b17a      	cbz	r2, 80013e2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013c6:	f7ff f8d1 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4d58      	ldr	r5, [pc, #352]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80013cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013d0:	079f      	lsls	r7, r3, #30
 80013d2:	f53f af57 	bmi.w	8001284 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d6:	f7ff f8c9 	bl	800056c <HAL_GetTick>
 80013da:	1b80      	subs	r0, r0, r6
 80013dc:	2802      	cmp	r0, #2
 80013de:	d9f6      	bls.n	80013ce <HAL_RCC_OscConfig+0x16a>
 80013e0:	e785      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80013e2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013e4:	f7ff f8c2 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	4d50      	ldr	r5, [pc, #320]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80013ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80013ee:	0798      	lsls	r0, r3, #30
 80013f0:	f57f af48 	bpl.w	8001284 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff f8ba 	bl	800056c <HAL_GetTick>
 80013f8:	1b80      	subs	r0, r0, r6
 80013fa:	2802      	cmp	r0, #2
 80013fc:	d9f6      	bls.n	80013ec <HAL_RCC_OscConfig+0x188>
 80013fe:	e776      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001404:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001408:	d128      	bne.n	800145c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	9201      	str	r2, [sp, #4]
 800140c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800140e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800141e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	4d45      	ldr	r5, [pc, #276]	; (8001538 <HAL_RCC_OscConfig+0x2d4>)
 8001422:	682b      	ldr	r3, [r5, #0]
 8001424:	05d9      	lsls	r1, r3, #23
 8001426:	d51b      	bpl.n	8001460 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	68a3      	ldr	r3, [r4, #8]
 800142a:	4d40      	ldr	r5, [pc, #256]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 800142c:	2b01      	cmp	r3, #1
 800142e:	d127      	bne.n	8001480 <HAL_RCC_OscConfig+0x21c>
 8001430:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001438:	f7ff f898 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4d3b      	ldr	r5, [pc, #236]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800143e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001440:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001446:	079b      	lsls	r3, r3, #30
 8001448:	d539      	bpl.n	80014be <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800144a:	2e00      	cmp	r6, #0
 800144c:	f43f af1e 	beq.w	800128c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001450:	4a36      	ldr	r2, [pc, #216]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 8001452:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	e717      	b.n	800128c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800145c:	2600      	movs	r6, #0
 800145e:	e7df      	b.n	8001420 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001466:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001468:	f7ff f880 	bl	800056c <HAL_GetTick>
 800146c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	05da      	lsls	r2, r3, #23
 8001472:	d4d9      	bmi.n	8001428 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001474:	f7ff f87a 	bl	800056c <HAL_GetTick>
 8001478:	1bc0      	subs	r0, r0, r7
 800147a:	2802      	cmp	r0, #2
 800147c:	d9f7      	bls.n	800146e <HAL_RCC_OscConfig+0x20a>
 800147e:	e736      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	2b05      	cmp	r3, #5
 8001482:	d104      	bne.n	800148e <HAL_RCC_OscConfig+0x22a>
 8001484:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	672b      	str	r3, [r5, #112]	; 0x70
 800148c:	e7d0      	b.n	8001430 <HAL_RCC_OscConfig+0x1cc>
 800148e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	672a      	str	r2, [r5, #112]	; 0x70
 8001496:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001498:	f022 0204 	bic.w	r2, r2, #4
 800149c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ca      	bne.n	8001438 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80014a2:	f7ff f863 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014aa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014ae:	0798      	lsls	r0, r3, #30
 80014b0:	d5cb      	bpl.n	800144a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff f85b 	bl	800056c <HAL_GetTick>
 80014b6:	1bc0      	subs	r0, r0, r7
 80014b8:	4540      	cmp	r0, r8
 80014ba:	d9f7      	bls.n	80014ac <HAL_RCC_OscConfig+0x248>
 80014bc:	e717      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff f855 	bl	800056c <HAL_GetTick>
 80014c2:	1bc0      	subs	r0, r0, r7
 80014c4:	4540      	cmp	r0, r8
 80014c6:	d9bd      	bls.n	8001444 <HAL_RCC_OscConfig+0x1e0>
 80014c8:	e711      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ca:	4d18      	ldr	r5, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
 80014cc:	68ab      	ldr	r3, [r5, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d047      	beq.n	8001566 <HAL_RCC_OscConfig+0x302>
 80014d6:	4e19      	ldr	r6, [pc, #100]	; (800153c <HAL_RCC_OscConfig+0x2d8>)
 80014d8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014da:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80014dc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014de:	d135      	bne.n	800154c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80014e0:	f7ff f844 	bl	800056c <HAL_GetTick>
 80014e4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	682b      	ldr	r3, [r5, #0]
 80014e8:	0199      	lsls	r1, r3, #6
 80014ea:	d429      	bmi.n	8001540 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ec:	6a22      	ldr	r2, [r4, #32]
 80014ee:	69e3      	ldr	r3, [r4, #28]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014f4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001502:	0852      	lsrs	r2, r2, #1
 8001504:	3a01      	subs	r2, #1
 8001506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800150a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800150c:	2301      	movs	r3, #1
 800150e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001510:	f7ff f82c 	bl	800056c <HAL_GetTick>
 8001514:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	019a      	lsls	r2, r3, #6
 800151a:	f53f aebb 	bmi.w	8001294 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff f825 	bl	800056c <HAL_GetTick>
 8001522:	1b40      	subs	r0, r0, r5
 8001524:	2802      	cmp	r0, #2
 8001526:	d9f6      	bls.n	8001516 <HAL_RCC_OscConfig+0x2b2>
 8001528:	e6e1      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	42470000 	.word	0x42470000
 8001534:	42470e80 	.word	0x42470e80
 8001538:	40007000 	.word	0x40007000
 800153c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff f814 	bl	800056c <HAL_GetTick>
 8001544:	1bc0      	subs	r0, r0, r7
 8001546:	2802      	cmp	r0, #2
 8001548:	d9cd      	bls.n	80014e6 <HAL_RCC_OscConfig+0x282>
 800154a:	e6d0      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 800154c:	f7ff f80e 	bl	800056c <HAL_GetTick>
 8001550:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	019b      	lsls	r3, r3, #6
 8001556:	f57f ae9d 	bpl.w	8001294 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff f807 	bl	800056c <HAL_GetTick>
 800155e:	1b00      	subs	r0, r0, r4
 8001560:	2802      	cmp	r0, #2
 8001562:	d9f6      	bls.n	8001552 <HAL_RCC_OscConfig+0x2ee>
 8001564:	e6c3      	b.n	80012ee <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001566:	2801      	cmp	r0, #1
 8001568:	f43f aec2 	beq.w	80012f0 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 800156c:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	69e3      	ldr	r3, [r4, #28]
 8001570:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001574:	429a      	cmp	r2, r3
 8001576:	f47f ae79 	bne.w	800126c <HAL_RCC_OscConfig+0x8>
 800157a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800157c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001580:	4293      	cmp	r3, r2
 8001582:	f47f ae73 	bne.w	800126c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001586:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800158c:	4003      	ands	r3, r0
 800158e:	4293      	cmp	r3, r2
 8001590:	f47f ae6c 	bne.w	800126c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001594:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001596:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800159a:	4293      	cmp	r3, r2
 800159c:	f47f ae66 	bne.w	800126c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015a2:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80015a6:	1ac0      	subs	r0, r0, r3
 80015a8:	bf18      	it	ne
 80015aa:	2001      	movne	r0, #1
 80015ac:	e6a0      	b.n	80012f0 <HAL_RCC_OscConfig+0x8c>
 80015ae:	bf00      	nop

080015b0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b0:	4913      	ldr	r1, [pc, #76]	; (8001600 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80015b2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b4:	688b      	ldr	r3, [r1, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d003      	beq.n	80015c6 <HAL_RCC_GetSysClockFreq+0x16>
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d003      	beq.n	80015ca <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c2:	4810      	ldr	r0, [pc, #64]	; (8001604 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015c4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80015c6:	4810      	ldr	r0, [pc, #64]	; (8001608 <HAL_RCC_GetSysClockFreq+0x58>)
 80015c8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015cc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d4:	bf14      	ite	ne
 80015d6:	480c      	ldrne	r0, [pc, #48]	; (8001608 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d8:	480a      	ldreq	r0, [pc, #40]	; (8001604 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015da:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015de:	bf18      	it	ne
 80015e0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e6:	fba1 0100 	umull	r0, r1, r1, r0
 80015ea:	f7fe fded 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <HAL_RCC_GetSysClockFreq+0x50>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015f6:	3301      	adds	r3, #1
 80015f8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80015fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80015fe:	bd08      	pop	{r3, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	00f42400 	.word	0x00f42400
 8001608:	007a1200 	.word	0x007a1200

0800160c <HAL_RCC_ClockConfig>:
{
 800160c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001610:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001612:	4604      	mov	r4, r0
 8001614:	b910      	cbnz	r0, 800161c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001616:	2001      	movs	r0, #1
 8001618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b44      	ldr	r3, [pc, #272]	; (8001730 <HAL_RCC_ClockConfig+0x124>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f002 020f 	and.w	r2, r2, #15
 8001624:	428a      	cmp	r2, r1
 8001626:	d329      	bcc.n	800167c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	6821      	ldr	r1, [r4, #0]
 800162a:	078f      	lsls	r7, r1, #30
 800162c:	d42e      	bmi.n	800168c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	07c8      	lsls	r0, r1, #31
 8001630:	d441      	bmi.n	80016b6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_RCC_ClockConfig+0x124>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f002 020f 	and.w	r2, r2, #15
 800163a:	4295      	cmp	r5, r2
 800163c:	d367      	bcc.n	800170e <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	0751      	lsls	r1, r2, #29
 8001642:	d46d      	bmi.n	8001720 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	0713      	lsls	r3, r2, #28
 8001646:	d507      	bpl.n	8001658 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001648:	4a3a      	ldr	r2, [pc, #232]	; (8001734 <HAL_RCC_ClockConfig+0x128>)
 800164a:	6921      	ldr	r1, [r4, #16]
 800164c:	6893      	ldr	r3, [r2, #8]
 800164e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001652:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001656:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001658:	f7ff ffaa 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <HAL_RCC_ClockConfig+0x128>)
 800165e:	4a36      	ldr	r2, [pc, #216]	; (8001738 <HAL_RCC_ClockConfig+0x12c>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001666:	5cd3      	ldrb	r3, [r2, r3]
 8001668:	40d8      	lsrs	r0, r3
 800166a:	4b34      	ldr	r3, [pc, #208]	; (800173c <HAL_RCC_ClockConfig+0x130>)
 800166c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_RCC_ClockConfig+0x134>)
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	f7fe ff31 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001676:	2000      	movs	r0, #0
 8001678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167c:	b2ca      	uxtb	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	4299      	cmp	r1, r3
 8001688:	d1c5      	bne.n	8001616 <HAL_RCC_ClockConfig+0xa>
 800168a:	e7cd      	b.n	8001628 <HAL_RCC_ClockConfig+0x1c>
 800168c:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001692:	bf1e      	ittt	ne
 8001694:	689a      	ldrne	r2, [r3, #8]
 8001696:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800169a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169e:	bf42      	ittt	mi
 80016a0:	689a      	ldrmi	r2, [r3, #8]
 80016a2:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80016a6:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	68a0      	ldr	r0, [r4, #8]
 80016ac:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016b0:	4302      	orrs	r2, r0
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	e7bb      	b.n	800162e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b6:	6862      	ldr	r2, [r4, #4]
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_RCC_ClockConfig+0x128>)
 80016ba:	2a01      	cmp	r2, #1
 80016bc:	d11d      	bne.n	80016fa <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	d0a7      	beq.n	8001616 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c6:	4e1b      	ldr	r6, [pc, #108]	; (8001734 <HAL_RCC_ClockConfig+0x128>)
 80016c8:	68b3      	ldr	r3, [r6, #8]
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80016d2:	f7fe ff4b 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80016da:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016dc:	68b3      	ldr	r3, [r6, #8]
 80016de:	6862      	ldr	r2, [r4, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016e8:	d0a3      	beq.n	8001632 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ea:	f7fe ff3f 	bl	800056c <HAL_GetTick>
 80016ee:	1bc0      	subs	r0, r0, r7
 80016f0:	4540      	cmp	r0, r8
 80016f2:	d9f3      	bls.n	80016dc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80016f4:	2003      	movs	r0, #3
}
 80016f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	1e91      	subs	r1, r2, #2
 80016fc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001700:	d802      	bhi.n	8001708 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001706:	e7dd      	b.n	80016c4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	f013 0f02 	tst.w	r3, #2
 800170c:	e7da      	b.n	80016c4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	b2ea      	uxtb	r2, r5
 8001710:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	429d      	cmp	r5, r3
 800171a:	f47f af7c 	bne.w	8001616 <HAL_RCC_ClockConfig+0xa>
 800171e:	e78e      	b.n	800163e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001720:	4904      	ldr	r1, [pc, #16]	; (8001734 <HAL_RCC_ClockConfig+0x128>)
 8001722:	68e0      	ldr	r0, [r4, #12]
 8001724:	688b      	ldr	r3, [r1, #8]
 8001726:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800172a:	4303      	orrs	r3, r0
 800172c:	608b      	str	r3, [r1, #8]
 800172e:	e789      	b.n	8001644 <HAL_RCC_ClockConfig+0x38>
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	08003b58 	.word	0x08003b58
 800173c:	20000028 	.word	0x20000028
 8001740:	20000004 	.word	0x20000004

08001744 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	4a03      	ldr	r2, [pc, #12]	; (8001760 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001752:	6810      	ldr	r0, [r2, #0]
}
 8001754:	40d8      	lsrs	r0, r3
 8001756:	4770      	bx	lr
 8001758:	40023800 	.word	0x40023800
 800175c:	08003b68 	.word	0x08003b68
 8001760:	20000028 	.word	0x20000028

08001764 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800176e:	5cd3      	ldrb	r3, [r2, r3]
 8001770:	4a03      	ldr	r2, [pc, #12]	; (8001780 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001772:	6810      	ldr	r0, [r2, #0]
}
 8001774:	40d8      	lsrs	r0, r3
 8001776:	4770      	bx	lr
 8001778:	40023800 	.word	0x40023800
 800177c:	08003b68 	.word	0x08003b68
 8001780:	20000028 	.word	0x20000028

08001784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001784:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001786:	4604      	mov	r4, r0
 8001788:	2800      	cmp	r0, #0
 800178a:	d036      	beq.n	80017fa <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001790:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001794:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001798:	b91b      	cbnz	r3, 80017a2 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800179a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800179e:	f001 fe43 	bl	8003428 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017a2:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80017a4:	68a0      	ldr	r0, [r4, #8]
 80017a6:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80017ae:	680b      	ldr	r3, [r1, #0]
 80017b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017b4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80017b6:	6863      	ldr	r3, [r4, #4]
 80017b8:	4303      	orrs	r3, r0
 80017ba:	68e0      	ldr	r0, [r4, #12]
 80017bc:	4303      	orrs	r3, r0
 80017be:	6920      	ldr	r0, [r4, #16]
 80017c0:	4303      	orrs	r3, r0
 80017c2:	6960      	ldr	r0, [r4, #20]
 80017c4:	4303      	orrs	r3, r0
 80017c6:	69e0      	ldr	r0, [r4, #28]
 80017c8:	4303      	orrs	r3, r0
 80017ca:	6a20      	ldr	r0, [r4, #32]
 80017cc:	4303      	orrs	r3, r0
 80017ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80017d0:	4303      	orrs	r3, r0
 80017d2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80017d6:	4303      	orrs	r3, r0
 80017d8:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80017da:	0c12      	lsrs	r2, r2, #16
 80017dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017de:	f002 0204 	and.w	r2, r2, #4
 80017e2:	431a      	orrs	r2, r3
 80017e4:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017e6:	69cb      	ldr	r3, [r1, #28]
 80017e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017ec:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017ee:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80017f0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017f2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80017f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017fa:	2001      	movs	r0, #1
}
 80017fc:	bd10      	pop	{r4, pc}

080017fe <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017fe:	6803      	ldr	r3, [r0, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001806:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001810:	2320      	movs	r3, #32
 8001812:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001816:	4770      	bx	lr

08001818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001818:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800181a:	6803      	ldr	r3, [r0, #0]
 800181c:	68c1      	ldr	r1, [r0, #12]
 800181e:	691a      	ldr	r2, [r3, #16]
{
 8001820:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001822:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001826:	430a      	orrs	r2, r1
 8001828:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800182a:	6925      	ldr	r5, [r4, #16]
 800182c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800182e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001830:	69c0      	ldr	r0, [r0, #28]
 8001832:	432a      	orrs	r2, r5
 8001834:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001836:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800183a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800183c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001840:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001842:	430a      	orrs	r2, r1
 8001844:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	69a1      	ldr	r1, [r4, #24]
 800184a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800184e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001850:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	4a25      	ldr	r2, [pc, #148]	; (80018ec <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001858:	d129      	bne.n	80018ae <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800185a:	4293      	cmp	r3, r2
 800185c:	d003      	beq.n	8001866 <UART_SetConfig+0x4e>
 800185e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001862:	4293      	cmp	r3, r2
 8001864:	d120      	bne.n	80018a8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001866:	f7ff ff7d 	bl	8001764 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800186a:	6862      	ldr	r2, [r4, #4]
 800186c:	6825      	ldr	r5, [r4, #0]
 800186e:	1892      	adds	r2, r2, r2
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	f04f 0119 	mov.w	r1, #25
 8001878:	415b      	adcs	r3, r3
 800187a:	fba0 0101 	umull	r0, r1, r0, r1
 800187e:	f7fe fca3 	bl	80001c8 <__aeabi_uldivmod>
 8001882:	2164      	movs	r1, #100	; 0x64
 8001884:	fbb0 f4f1 	udiv	r4, r0, r1
 8001888:	fb01 0314 	mls	r3, r1, r4, r0
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	3332      	adds	r3, #50	; 0x32
 8001890:	fbb3 f3f1 	udiv	r3, r3, r1
 8001894:	f003 0207 	and.w	r2, r3, #7
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800189e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80018a2:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018a4:	60ab      	str	r3, [r5, #8]
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80018a8:	f7ff ff4c 	bl	8001744 <HAL_RCC_GetPCLK1Freq>
 80018ac:	e7dd      	b.n	800186a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d002      	beq.n	80018b8 <UART_SetConfig+0xa0>
 80018b2:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <UART_SetConfig+0xd8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d116      	bne.n	80018e6 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80018b8:	f7ff ff54 	bl	8001764 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	6825      	ldr	r5, [r4, #0]
 80018c0:	2119      	movs	r1, #25
 80018c2:	009a      	lsls	r2, r3, #2
 80018c4:	fba0 0101 	umull	r0, r1, r0, r1
 80018c8:	0f9b      	lsrs	r3, r3, #30
 80018ca:	f7fe fc7d 	bl	80001c8 <__aeabi_uldivmod>
 80018ce:	2264      	movs	r2, #100	; 0x64
 80018d0:	fbb0 f1f2 	udiv	r1, r0, r2
 80018d4:	fb02 0311 	mls	r3, r2, r1, r0
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	3332      	adds	r3, #50	; 0x32
 80018dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80018e0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80018e4:	e7de      	b.n	80018a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80018e6:	f7ff ff2d 	bl	8001744 <HAL_RCC_GetPCLK1Freq>
 80018ea:	e7e7      	b.n	80018bc <UART_SetConfig+0xa4>
 80018ec:	40011000 	.word	0x40011000
 80018f0:	40011400 	.word	0x40011400

080018f4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f6:	4604      	mov	r4, r0
 80018f8:	460e      	mov	r6, r1
 80018fa:	4617      	mov	r7, r2
 80018fc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018fe:	6821      	ldr	r1, [r4, #0]
 8001900:	680b      	ldr	r3, [r1, #0]
 8001902:	ea36 0303 	bics.w	r3, r6, r3
 8001906:	d101      	bne.n	800190c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001908:	2000      	movs	r0, #0
}
 800190a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800190c:	1c6b      	adds	r3, r5, #1
 800190e:	d0f7      	beq.n	8001900 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001910:	b995      	cbnz	r5, 8001938 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800191a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	f022 0201 	bic.w	r2, r2, #1
 8001922:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001924:	2320      	movs	r3, #32
 8001926:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800192a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800192e:	2300      	movs	r3, #0
 8001930:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001934:	2003      	movs	r0, #3
 8001936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001938:	f7fe fe18 	bl	800056c <HAL_GetTick>
 800193c:	1bc0      	subs	r0, r0, r7
 800193e:	4285      	cmp	r5, r0
 8001940:	d2dd      	bcs.n	80018fe <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001942:	e7e6      	b.n	8001912 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001944 <HAL_UART_Init>:
{
 8001944:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001946:	4604      	mov	r4, r0
 8001948:	b340      	cbz	r0, 800199c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800194a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800194e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001952:	b91b      	cbnz	r3, 800195c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001954:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001958:	f001 fd9a 	bl	8003490 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800195c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800195e:	2324      	movs	r3, #36	; 0x24
 8001960:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001964:	68d3      	ldr	r3, [r2, #12]
 8001966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800196a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800196c:	4620      	mov	r0, r4
 800196e:	f7ff ff53 	bl	8001818 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	691a      	ldr	r2, [r3, #16]
 8001976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800197a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001982:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800198a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800198c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800198e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001990:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001992:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001996:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800199a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800199c:	2001      	movs	r0, #1
}
 800199e:	bd10      	pop	{r4, pc}

080019a0 <HAL_UART_Transmit>:
{
 80019a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019a4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80019a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80019aa:	2b20      	cmp	r3, #32
{
 80019ac:	4604      	mov	r4, r0
 80019ae:	460d      	mov	r5, r1
 80019b0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80019b2:	d151      	bne.n	8001a58 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80019b4:	2900      	cmp	r1, #0
 80019b6:	d04c      	beq.n	8001a52 <HAL_UART_Transmit+0xb2>
 80019b8:	2a00      	cmp	r2, #0
 80019ba:	d04a      	beq.n	8001a52 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80019bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d049      	beq.n	8001a58 <HAL_UART_Transmit+0xb8>
 80019c4:	2301      	movs	r3, #1
 80019c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ca:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019ce:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d0:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80019d8:	f7fe fdc8 	bl	800056c <HAL_GetTick>
    huart->TxXferSize = Size;
 80019dc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80019e0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80019e2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80019e6:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 80019ea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b95b      	cbnz	r3, 8001a08 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	4632      	mov	r2, r6
 80019f4:	2140      	movs	r1, #64	; 0x40
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff ff7c 	bl	80018f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019fc:	b9a0      	cbnz	r0, 8001a28 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 80019fe:	2320      	movs	r3, #32
 8001a00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001a08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a10:	68a3      	ldr	r3, [r4, #8]
 8001a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a16:	4632      	mov	r2, r6
 8001a18:	463b      	mov	r3, r7
 8001a1a:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001a1e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a20:	d10e      	bne.n	8001a40 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a22:	f7ff ff67 	bl	80018f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a26:	b110      	cbz	r0, 8001a2e <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001a28:	2003      	movs	r0, #3
 8001a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001a2e:	882b      	ldrh	r3, [r5, #0]
 8001a30:	6822      	ldr	r2, [r4, #0]
 8001a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a36:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a38:	6923      	ldr	r3, [r4, #16]
 8001a3a:	b943      	cbnz	r3, 8001a4e <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001a3c:	3502      	adds	r5, #2
 8001a3e:	e7d4      	b.n	80019ea <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a40:	f7ff ff58 	bl	80018f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d1ef      	bne.n	8001a28 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	782a      	ldrb	r2, [r5, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	3501      	adds	r5, #1
 8001a50:	e7cb      	b.n	80019ea <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
 8001a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001a58:	2002      	movs	r0, #2
}
 8001a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001a5e <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a5e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	d120      	bne.n	8001aa8 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001a66:	b1e9      	cbz	r1, 8001aa4 <HAL_UART_Receive_IT+0x46>
 8001a68:	b1e2      	cbz	r2, 8001aa4 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001a6a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d01a      	beq.n	8001aa8 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001a72:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001a74:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a76:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a78:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a7c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a80:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001a82:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a84:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001a86:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001a8a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001a8e:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001a90:	6951      	ldr	r1, [r2, #20]
 8001a92:	f041 0101 	orr.w	r1, r1, #1
 8001a96:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001a98:	68d1      	ldr	r1, [r2, #12]
 8001a9a:	f041 0120 	orr.w	r1, r1, #32
 8001a9e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4770      	bx	lr
      return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	4770      	bx	lr
    return HAL_BUSY;
 8001aa8:	2002      	movs	r0, #2
}
 8001aaa:	4770      	bx	lr

08001aac <HAL_UART_TxCpltCallback>:
 8001aac:	4770      	bx	lr

08001aae <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001aae:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001ab2:	2b22      	cmp	r3, #34	; 0x22
{
 8001ab4:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ab6:	d136      	bne.n	8001b26 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ab8:	6883      	ldr	r3, [r0, #8]
 8001aba:	6901      	ldr	r1, [r0, #16]
 8001abc:	6802      	ldr	r2, [r0, #0]
 8001abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001ac4:	d123      	bne.n	8001b0e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ac6:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001ac8:	b9e9      	cbnz	r1, 8001b06 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ace:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001ad2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001ad4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001ad6:	3c01      	subs	r4, #1
 8001ad8:	b2a4      	uxth	r4, r4
 8001ada:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001adc:	b98c      	cbnz	r4, 8001b02 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ade:	6803      	ldr	r3, [r0, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	f022 0220 	bic.w	r2, r2, #32
 8001ae6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aee:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001af8:	2320      	movs	r3, #32
 8001afa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001afe:	f001 fa81 	bl	8003004 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001b02:	2000      	movs	r0, #0
}
 8001b04:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f823 2b01 	strh.w	r2, [r3], #1
 8001b0c:	e7e1      	b.n	8001ad2 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001b0e:	b921      	cbnz	r1, 8001b1a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b10:	1c59      	adds	r1, r3, #1
 8001b12:	6852      	ldr	r2, [r2, #4]
 8001b14:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	e7dc      	b.n	8001ad4 <UART_Receive_IT+0x26>
 8001b1a:	6852      	ldr	r2, [r2, #4]
 8001b1c:	1c59      	adds	r1, r3, #1
 8001b1e:	6281      	str	r1, [r0, #40]	; 0x28
 8001b20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b24:	e7f7      	b.n	8001b16 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001b26:	2002      	movs	r0, #2
 8001b28:	bd10      	pop	{r4, pc}

08001b2a <HAL_UART_ErrorCallback>:
 8001b2a:	4770      	bx	lr

08001b2c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b2c:	6803      	ldr	r3, [r0, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b30:	68d9      	ldr	r1, [r3, #12]
{
 8001b32:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001b34:	0716      	lsls	r6, r2, #28
{
 8001b36:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b38:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001b3a:	d107      	bne.n	8001b4c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b3c:	0696      	lsls	r6, r2, #26
 8001b3e:	d55c      	bpl.n	8001bfa <HAL_UART_IRQHandler+0xce>
 8001b40:	068d      	lsls	r5, r1, #26
 8001b42:	d55a      	bpl.n	8001bfa <HAL_UART_IRQHandler+0xce>
}
 8001b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001b48:	f7ff bfb1 	b.w	8001aae <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b4c:	f015 0501 	ands.w	r5, r5, #1
 8001b50:	d102      	bne.n	8001b58 <HAL_UART_IRQHandler+0x2c>
 8001b52:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001b56:	d050      	beq.n	8001bfa <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b58:	07d0      	lsls	r0, r2, #31
 8001b5a:	d505      	bpl.n	8001b68 <HAL_UART_IRQHandler+0x3c>
 8001b5c:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b5e:	bf42      	ittt	mi
 8001b60:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001b62:	f043 0301 	orrmi.w	r3, r3, #1
 8001b66:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b68:	0756      	lsls	r6, r2, #29
 8001b6a:	d504      	bpl.n	8001b76 <HAL_UART_IRQHandler+0x4a>
 8001b6c:	b11d      	cbz	r5, 8001b76 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b76:	0790      	lsls	r0, r2, #30
 8001b78:	d504      	bpl.n	8001b84 <HAL_UART_IRQHandler+0x58>
 8001b7a:	b11d      	cbz	r5, 8001b84 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b84:	0713      	lsls	r3, r2, #28
 8001b86:	d506      	bpl.n	8001b96 <HAL_UART_IRQHandler+0x6a>
 8001b88:	068e      	lsls	r6, r1, #26
 8001b8a:	d400      	bmi.n	8001b8e <HAL_UART_IRQHandler+0x62>
 8001b8c:	b11d      	cbz	r5, 8001b96 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d066      	beq.n	8001c6a <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b9c:	0695      	lsls	r5, r2, #26
 8001b9e:	d504      	bpl.n	8001baa <HAL_UART_IRQHandler+0x7e>
 8001ba0:	0688      	lsls	r0, r1, #26
 8001ba2:	d502      	bpl.n	8001baa <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff ff82 	bl	8001aae <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001bb0:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001bb2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001bb4:	d402      	bmi.n	8001bbc <HAL_UART_IRQHandler+0x90>
 8001bb6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001bba:	d01a      	beq.n	8001bf2 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8001bbc:	f7ff fe1f 	bl	80017fe <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	0652      	lsls	r2, r2, #25
 8001bc6:	d510      	bpl.n	8001bea <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bc8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001bca:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bd0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001bd2:	b150      	cbz	r0, 8001bea <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <HAL_UART_IRQHandler+0x140>)
 8001bd6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001bd8:	f7fe fd4c 	bl	8000674 <HAL_DMA_Abort_IT>
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d044      	beq.n	8001c6a <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001be0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001be6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001be8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001bea:	4620      	mov	r0, r4
 8001bec:	f7ff ff9d 	bl	8001b2a <HAL_UART_ErrorCallback>
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001bf2:	f7ff ff9a 	bl	8001b2a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf6:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001bf8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bfa:	0616      	lsls	r6, r2, #24
 8001bfc:	d527      	bpl.n	8001c4e <HAL_UART_IRQHandler+0x122>
 8001bfe:	060d      	lsls	r5, r1, #24
 8001c00:	d525      	bpl.n	8001c4e <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001c02:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001c06:	2a21      	cmp	r2, #33	; 0x21
 8001c08:	d12f      	bne.n	8001c6a <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c0a:	68a2      	ldr	r2, [r4, #8]
 8001c0c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c10:	6a22      	ldr	r2, [r4, #32]
 8001c12:	d117      	bne.n	8001c44 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001c14:	8811      	ldrh	r1, [r2, #0]
 8001c16:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001c1a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001c1c:	6921      	ldr	r1, [r4, #16]
 8001c1e:	b979      	cbnz	r1, 8001c40 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8001c20:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001c22:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001c24:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001c26:	3a01      	subs	r2, #1
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001c2c:	b9ea      	cbnz	r2, 8001c6a <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c34:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001c40:	3201      	adds	r2, #1
 8001c42:	e7ee      	b.n	8001c22 <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c44:	1c51      	adds	r1, r2, #1
 8001c46:	6221      	str	r1, [r4, #32]
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	e7ea      	b.n	8001c24 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c4e:	0650      	lsls	r0, r2, #25
 8001c50:	d50b      	bpl.n	8001c6a <HAL_UART_IRQHandler+0x13e>
 8001c52:	064a      	lsls	r2, r1, #25
 8001c54:	d509      	bpl.n	8001c6a <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c5c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001c5e:	2320      	movs	r3, #32
 8001c60:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7ff ff21 	bl	8001aac <HAL_UART_TxCpltCallback>
 8001c6a:	bd70      	pop	{r4, r5, r6, pc}
 8001c6c:	08001c71 	.word	0x08001c71

08001c70 <UART_DMAAbortOnError>:
{
 8001c70:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c72:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001c78:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001c7a:	f7ff ff56 	bl	8001b2a <HAL_UART_ErrorCallback>
 8001c7e:	bd08      	pop	{r3, pc}

08001c80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001c82:	3b01      	subs	r3, #1
 8001c84:	d101      	bne.n	8001c8a <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8001c86:	2003      	movs	r0, #3
 8001c88:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001c8a:	6902      	ldr	r2, [r0, #16]
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	daf8      	bge.n	8001c82 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001c90:	6903      	ldr	r3, [r0, #16]
 8001c92:	4a06      	ldr	r2, [pc, #24]	; (8001cac <USB_CoreReset+0x2c>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001c9a:	3a01      	subs	r2, #1
 8001c9c:	d0f3      	beq.n	8001c86 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001c9e:	6903      	ldr	r3, [r0, #16]
 8001ca0:	f013 0301 	ands.w	r3, r3, #1
 8001ca4:	d1f9      	bne.n	8001c9a <USB_CoreReset+0x1a>

  return HAL_OK;
 8001ca6:	4618      	mov	r0, r3
}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	00030d41 	.word	0x00030d41

08001cb0 <USB_CoreInit>:
{
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	b538      	push	{r3, r4, r5, lr}
 8001cb4:	ad05      	add	r5, sp, #20
 8001cb6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cbc:	2b01      	cmp	r3, #1
{
 8001cbe:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001cc0:	d125      	bne.n	8001d0e <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001cc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001cca:	68c3      	ldr	r3, [r0, #12]
 8001ccc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cd4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001cd6:	68c3      	ldr	r3, [r0, #12]
 8001cd8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001cdc:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001cde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001ce0:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001ce2:	bf02      	ittt	eq
 8001ce4:	68c3      	ldreq	r3, [r0, #12]
 8001ce6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001cea:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001cec:	f7ff ffc8 	bl	8001c80 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001cf0:	9b08      	ldr	r3, [sp, #32]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001cf6:	68a3      	ldr	r3, [r4, #8]
 8001cf8:	f043 0306 	orr.w	r3, r3, #6
 8001cfc:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001cfe:	68a3      	ldr	r3, [r4, #8]
 8001d00:	f043 0320 	orr.w	r3, r3, #32
 8001d04:	60a3      	str	r3, [r4, #8]
}
 8001d06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d0a:	b004      	add	sp, #16
 8001d0c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001d0e:	68c3      	ldr	r3, [r0, #12]
 8001d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d14:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001d16:	f7ff ffb3 	bl	8001c80 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8001d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d1c:	b923      	cbnz	r3, 8001d28 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001d24:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d26:	e7e3      	b.n	8001cf0 <USB_CoreInit+0x40>
 8001d28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2e:	e7f9      	b.n	8001d24 <USB_CoreInit+0x74>

08001d30 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001d30:	6883      	ldr	r3, [r0, #8]
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6083      	str	r3, [r0, #8]
}
 8001d38:	2000      	movs	r0, #0
 8001d3a:	4770      	bx	lr

08001d3c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001d3c:	6883      	ldr	r3, [r0, #8]
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6083      	str	r3, [r0, #8]
}
 8001d44:	2000      	movs	r0, #0
 8001d46:	4770      	bx	lr

08001d48 <USB_SetCurrentMode>:
{
 8001d48:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001d4a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001d4c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001d4e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001d52:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001d54:	d108      	bne.n	8001d68 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001d56:	68c3      	ldr	r3, [r0, #12]
 8001d58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001d5c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001d5e:	2032      	movs	r0, #50	; 0x32
 8001d60:	f7fe fc0a 	bl	8000578 <HAL_Delay>
  return HAL_OK;
 8001d64:	2000      	movs	r0, #0
 8001d66:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001d68:	b919      	cbnz	r1, 8001d72 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001d6a:	68c3      	ldr	r3, [r0, #12]
 8001d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d70:	e7f4      	b.n	8001d5c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8001d72:	2001      	movs	r0, #1
}
 8001d74:	bd08      	pop	{r3, pc}
	...

08001d78 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001d78:	0189      	lsls	r1, r1, #6
 8001d7a:	f041 0120 	orr.w	r1, r1, #32
 8001d7e:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <USB_FlushTxFifo+0x20>)
 8001d80:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8001d82:	3a01      	subs	r2, #1
 8001d84:	d005      	beq.n	8001d92 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001d86:	6903      	ldr	r3, [r0, #16]
 8001d88:	f013 0320 	ands.w	r3, r3, #32
 8001d8c:	d1f9      	bne.n	8001d82 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001d92:	2003      	movs	r0, #3
}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	00030d41 	.word	0x00030d41

08001d9c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001d9c:	2310      	movs	r3, #16
 8001d9e:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <USB_FlushRxFifo+0x1c>)
 8001da0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8001da2:	3a01      	subs	r2, #1
 8001da4:	d005      	beq.n	8001db2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001da6:	6903      	ldr	r3, [r0, #16]
 8001da8:	f013 0310 	ands.w	r3, r3, #16
 8001dac:	d1f9      	bne.n	8001da2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001dae:	4618      	mov	r0, r3
 8001db0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001db2:	2003      	movs	r0, #3
}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	00030d41 	.word	0x00030d41

08001dbc <USB_WritePacket>:
{
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8001dc2:	b94c      	cbnz	r4, 8001dd8 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8001dc4:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001dc6:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8001dd2:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8001dd4:	4299      	cmp	r1, r3
 8001dd6:	d101      	bne.n	8001ddc <USB_WritePacket+0x20>
}
 8001dd8:	2000      	movs	r0, #0
 8001dda:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8001ddc:	f851 2b04 	ldr.w	r2, [r1], #4
 8001de0:	6002      	str	r2, [r0, #0]
 8001de2:	e7f7      	b.n	8001dd4 <USB_WritePacket+0x18>

08001de4 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8001de4:	3203      	adds	r2, #3
 8001de6:	f022 0203 	bic.w	r2, r2, #3
 8001dea:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001dec:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8001df0:	4291      	cmp	r1, r2
 8001df2:	d101      	bne.n	8001df8 <USB_ReadPacket+0x14>
}
 8001df4:	4608      	mov	r0, r1
 8001df6:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001df8:	6803      	ldr	r3, [r0, #0]
 8001dfa:	f841 3b04 	str.w	r3, [r1], #4
 8001dfe:	e7f7      	b.n	8001df0 <USB_ReadPacket+0xc>

08001e00 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8001e00:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8001e02:	6980      	ldr	r0, [r0, #24]
}
 8001e04:	4010      	ands	r0, r2
 8001e06:	4770      	bx	lr

08001e08 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8001e08:	6940      	ldr	r0, [r0, #20]
}
 8001e0a:	f000 0001 	and.w	r0, r0, #1
 8001e0e:	4770      	bx	lr

08001e10 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001e10:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8001e14:	f023 0303 	bic.w	r3, r3, #3
{
 8001e18:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001e1a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001e1e:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8001e22:	f001 0303 	and.w	r3, r1, #3
 8001e26:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8001e28:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001e2a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001e2e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8001e32:	d104      	bne.n	8001e3e <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8001e34:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8001e38:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8001e3e:	2902      	cmp	r1, #2
 8001e40:	d1fb      	bne.n	8001e3a <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8001e42:	f241 7370 	movw	r3, #6000	; 0x1770
 8001e46:	e7f7      	b.n	8001e38 <USB_InitFSLSPClkSel+0x28>

08001e48 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8001e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8001e4a:	2500      	movs	r5, #0
 8001e4c:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001e4e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001e52:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8001e54:	9b01      	ldr	r3, [sp, #4]
 8001e56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e5a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8001e5c:	9b01      	ldr	r3, [sp, #4]
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001e62:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8001e64:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8001e68:	2064      	movs	r0, #100	; 0x64
 8001e6a:	f7fe fb85 	bl	8000578 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8001e6e:	9b01      	ldr	r3, [sp, #4]
 8001e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e74:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8001e78:	200a      	movs	r0, #10
 8001e7a:	f7fe fb7d 	bl	8000578 <HAL_Delay>

  return HAL_OK;
}
 8001e7e:	4628      	mov	r0, r5
 8001e80:	b003      	add	sp, #12
 8001e82:	bd30      	pop	{r4, r5, pc}

08001e84 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8001e84:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001e8a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001e8e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8001e90:	9b01      	ldr	r3, [sp, #4]
 8001e92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e96:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8001e98:	9b01      	ldr	r3, [sp, #4]
 8001e9a:	04da      	lsls	r2, r3, #19
 8001e9c:	d406      	bmi.n	8001eac <USB_DriveVbus+0x28>
 8001e9e:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8001ea0:	bf02      	ittt	eq
 8001ea2:	9b01      	ldreq	r3, [sp, #4]
 8001ea4:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8001ea8:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8001eac:	9b01      	ldr	r3, [sp, #4]
 8001eae:	04db      	lsls	r3, r3, #19
 8001eb0:	d505      	bpl.n	8001ebe <USB_DriveVbus+0x3a>
 8001eb2:	b921      	cbnz	r1, 8001ebe <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8001eb4:	9b01      	ldr	r3, [sp, #4]
 8001eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eba:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	b002      	add	sp, #8
 8001ec2:	4770      	bx	lr

08001ec4 <USB_HostInit>:
{
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	b538      	push	{r3, r4, r5, lr}
 8001ec8:	4604      	mov	r4, r0
 8001eca:	a805      	add	r0, sp, #20
 8001ecc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001ed6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001edc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ee4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8001eee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ef0:	05da      	lsls	r2, r3, #23
 8001ef2:	d53f      	bpl.n	8001f74 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8001ef4:	9b07      	ldr	r3, [sp, #28]
 8001ef6:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8001ef8:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8001efc:	d13c      	bne.n	8001f78 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8001efe:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8001f02:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8001f06:	2110      	movs	r1, #16
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ff35 	bl	8001d78 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff ff44 	bl	8001d9c <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	9906      	ldr	r1, [sp, #24]
 8001f18:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8001f20:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8001f22:	428b      	cmp	r3, r1
 8001f24:	d12b      	bne.n	8001f7e <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8001f26:	2101      	movs	r1, #1
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7ff ffab 	bl	8001e84 <USB_DriveVbus>
  HAL_Delay(200U);
 8001f2e:	20c8      	movs	r0, #200	; 0xc8
 8001f30:	f7fe fb22 	bl	8000578 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f3c:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8001f3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f40:	05db      	lsls	r3, r3, #23
 8001f42:	d521      	bpl.n	8001f88 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8001f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f48:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8001f4a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001f52:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8001f56:	9b08      	ldr	r3, [sp, #32]
 8001f58:	b91b      	cbnz	r3, 8001f62 <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001f5a:	69a3      	ldr	r3, [r4, #24]
 8001f5c:	f043 0310 	orr.w	r3, r3, #16
 8001f60:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8001f62:	69a2      	ldr	r2, [r4, #24]
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <USB_HostInit+0xd8>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61a3      	str	r3, [r4, #24]
}
 8001f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f6e:	2000      	movs	r0, #0
 8001f70:	b004      	add	sp, #16
 8001f72:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8001f74:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	e7c1      	b.n	8001f02 <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001f7e:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8001f80:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8001f82:	60d5      	str	r5, [r2, #12]
 8001f84:	3220      	adds	r2, #32
 8001f86:	e7cc      	b.n	8001f22 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8001f8c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8001f90:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001f92:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <USB_HostInit+0xdc>)
 8001f94:	e7dd      	b.n	8001f52 <USB_HostInit+0x8e>
 8001f96:	bf00      	nop
 8001f98:	00e00300 	.word	0x00e00300
 8001f9c:	a3200008 	.word	0xa3200008
 8001fa0:	004000e0 	.word	0x004000e0

08001fa4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8001fa4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001faa:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001fae:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8001fb0:	9801      	ldr	r0, [sp, #4]
}
 8001fb2:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8001fb6:	b002      	add	sp, #8
 8001fb8:	4770      	bx	lr

08001fba <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8001fba:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8001fbe:	6880      	ldr	r0, [r0, #8]
}
 8001fc0:	b280      	uxth	r0, r0
 8001fc2:	4770      	bx	lr

08001fc4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8001fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8001fc8:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8001fcc:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 8001fd0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8001fd4:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8001fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fda:	60a0      	str	r0, [r4, #8]
 8001fdc:	fa4f f882 	sxtb.w	r8, r2
 8001fe0:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8001fe4:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8001fe8:	2e03      	cmp	r6, #3
 8001fea:	d86c      	bhi.n	80020c6 <USB_HC_Init+0x102>
 8001fec:	e8df f006 	tbb	[pc, r6]
 8001ff0:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001ff4:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8001ff8:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8001ffc:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8001ffe:	da03      	bge.n	8002008 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002000:	68e1      	ldr	r1, [r4, #12]
 8002002:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002006:	e005      	b.n	8002014 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002008:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800200a:	05c9      	lsls	r1, r1, #23
 800200c:	d542      	bpl.n	8002094 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800200e:	68e1      	ldr	r1, [r4, #12]
 8002010:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8002014:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002016:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002018:	f8dc 4018 	ldr.w	r4, [ip, #24]
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f10e 	lsl.w	r1, r1, lr
 8002022:	4321      	orrs	r1, r4
 8002024:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002028:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800202a:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800202e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002032:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8002034:	bfb4      	ite	lt
 8002036:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 800203a:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800203c:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 8002040:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002044:	059b      	lsls	r3, r3, #22
 8002046:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800204a:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800204e:	02d2      	lsls	r2, r2, #11
 8002050:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002054:	432b      	orrs	r3, r5
 8002056:	4313      	orrs	r3, r2
 8002058:	04b2      	lsls	r2, r6, #18
 800205a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 800205e:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002060:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 8002064:	bf0c      	ite	eq
 8002066:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 800206a:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800206c:	4323      	orrs	r3, r4
 800206e:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 8002070:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002072:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8002076:	d128      	bne.n	80020ca <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002078:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800207c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002080:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8002084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002088:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 800208c:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002090:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002092:	dbb5      	blt.n	8002000 <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002094:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f10e 	lsl.w	r1, r1, lr
 800209e:	4301      	orrs	r1, r0
 80020a0:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80020a4:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 80020a6:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80020a8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80020ac:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 80020ae:	4604      	mov	r4, r0
 80020b0:	e7c4      	b.n	800203c <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80020b2:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 80020b6:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80020ba:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 80020bc:	daea      	bge.n	8002094 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80020be:	68e1      	ldr	r1, [r4, #12]
 80020c0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80020c4:	e7a6      	b.n	8002014 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
 80020c8:	e7a6      	b.n	8002018 <USB_HC_Init+0x54>
}
 80020ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020ce <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80020ce:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80020d2:	6940      	ldr	r0, [r0, #20]
}
 80020d4:	b280      	uxth	r0, r0
 80020d6:	4770      	bx	lr

080020d8 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80020d8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80020dc:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 80020e0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80020e4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80020e8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80020ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020f0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80020f4:	d11e      	bne.n	8002134 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80020f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80020f8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80020fc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002100:	d137      	bne.n	8002172 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002102:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002106:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800210a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800210e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002112:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002116:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800211a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800211e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002122:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8002126:	3b01      	subs	r3, #1
 8002128:	d002      	beq.n	8002130 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	2900      	cmp	r1, #0
 800212e:	dbfa      	blt.n	8002126 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002130:	2000      	movs	r0, #0
 8002132:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002134:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002138:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800213c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002140:	d117      	bne.n	8002172 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002142:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002146:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800214a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800214e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002152:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002156:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800215a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800215e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002162:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8002166:	3b01      	subs	r3, #1
 8002168:	d0e2      	beq.n	8002130 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800216a:	6811      	ldr	r1, [r2, #0]
 800216c:	2900      	cmp	r1, #0
 800216e:	dbfa      	blt.n	8002166 <USB_HC_Halt+0x8e>
 8002170:	e7de      	b.n	8002130 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002176:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800217a:	e7d9      	b.n	8002130 <USB_HC_Halt+0x58>

0800217c <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800217c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002180:	4a06      	ldr	r2, [pc, #24]	; (800219c <USB_DoPing+0x20>)
 8002182:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002186:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800218a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800218e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002192:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8002196:	2000      	movs	r0, #0
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	80080000 	.word	0x80080000

080021a0 <USB_HC_StartXfer>:
{
 80021a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80021a4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80021a6:	05db      	lsls	r3, r3, #23
{
 80021a8:	4616      	mov	r6, r2
 80021aa:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80021ac:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80021ae:	d517      	bpl.n	80021e0 <USB_HC_StartXfer+0x40>
 80021b0:	790d      	ldrb	r5, [r1, #4]
 80021b2:	b9ad      	cbnz	r5, 80021e0 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 80021b4:	b94e      	cbnz	r6, 80021ca <USB_HC_StartXfer+0x2a>
 80021b6:	794b      	ldrb	r3, [r1, #5]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d111      	bne.n	80021e0 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 80021bc:	4611      	mov	r1, r2
 80021be:	f7ff ffdd 	bl	800217c <USB_DoPing>
}
 80021c2:	2000      	movs	r0, #0
 80021c4:	b002      	add	sp, #8
 80021c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 80021ca:	2e01      	cmp	r6, #1
 80021cc:	d108      	bne.n	80021e0 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80021ce:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 80021d2:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 80021d6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80021da:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 80021de:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 80021e0:	6908      	ldr	r0, [r1, #16]
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d066      	beq.n	80022b4 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80021e6:	890b      	ldrh	r3, [r1, #8]
 80021e8:	3801      	subs	r0, #1
 80021ea:	4418      	add	r0, r3
 80021ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80021f0:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 80021f2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80021f6:	d903      	bls.n	8002200 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 80021fc:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8002200:	78cf      	ldrb	r7, [r1, #3]
 8002202:	b117      	cbz	r7, 800220a <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002204:	890b      	ldrh	r3, [r1, #8]
 8002206:	4343      	muls	r3, r0
 8002208:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800220a:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800220e:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002210:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002214:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002218:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800221c:	ea4e 0e08 	orr.w	lr, lr, r8
 8002220:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002300 <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002224:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002228:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 800222c:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002230:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8002234:	b116      	cbz	r6, 800223c <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002236:	68c8      	ldr	r0, [r1, #12]
 8002238:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800223c:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002240:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002244:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002248:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 800224c:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002250:	43c0      	mvns	r0, r0
 8002252:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002256:	0740      	lsls	r0, r0, #29
 8002258:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800225c:	ea40 000c 	orr.w	r0, r0, ip
 8002260:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002264:	4825      	ldr	r0, [pc, #148]	; (80022fc <USB_HC_StartXfer+0x15c>)
 8002266:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 800226a:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800226e:	f8d0 c000 	ldr.w	ip, [r0]
 8002272:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8002276:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800227a:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 800227e:	b1df      	cbz	r7, 80022b8 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002280:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002284:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002288:	f8d0 c000 	ldr.w	ip, [r0]
 800228c:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8002290:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002294:	6800      	ldr	r0, [r0, #0]
 8002296:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 800229a:	2e00      	cmp	r6, #0
 800229c:	d191      	bne.n	80021c2 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800229e:	2f00      	cmp	r7, #0
 80022a0:	d18f      	bne.n	80021c2 <USB_HC_StartXfer+0x22>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d08d      	beq.n	80021c2 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 80022a6:	79c8      	ldrb	r0, [r1, #7]
 80022a8:	2803      	cmp	r0, #3
 80022aa:	d813      	bhi.n	80022d4 <USB_HC_StartXfer+0x134>
 80022ac:	e8df f000 	tbb	[pc, r0]
 80022b0:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 80022b4:	2001      	movs	r0, #1
 80022b6:	e7a3      	b.n	8002200 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80022b8:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 80022bc:	e7e2      	b.n	8002284 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80022be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80022c0:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80022c2:	f3c5 058f 	ubfx	r5, r5, #2, #16
 80022c6:	b280      	uxth	r0, r0
 80022c8:	4285      	cmp	r5, r0
 80022ca:	d903      	bls.n	80022d4 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80022cc:	69a0      	ldr	r0, [r4, #24]
 80022ce:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80022d2:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80022d4:	2000      	movs	r0, #0
 80022d6:	9000      	str	r0, [sp, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	68c9      	ldr	r1, [r1, #12]
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff fd6d 	bl	8001dbc <USB_WritePacket>
 80022e2:	e76e      	b.n	80021c2 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80022e4:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80022e8:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80022ea:	f3c5 058f 	ubfx	r5, r5, #2, #16
 80022ee:	b280      	uxth	r0, r0
 80022f0:	4285      	cmp	r5, r0
 80022f2:	d9ef      	bls.n	80022d4 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80022f4:	69a0      	ldr	r0, [r4, #24]
 80022f6:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80022fa:	e7ea      	b.n	80022d2 <USB_HC_StartXfer+0x132>
 80022fc:	200000ac 	.word	0x200000ac
 8002300:	1ff80000 	.word	0x1ff80000

08002304 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002304:	6883      	ldr	r3, [r0, #8]
 8002306:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800230a:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800230c:	2110      	movs	r1, #16
{
 800230e:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002310:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002312:	f7ff fd31 	bl	8001d78 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff fd40 	bl	8001d9c <USB_FlushRxFifo>
 800231c:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002320:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8002324:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002326:	6811      	ldr	r1, [r2, #0]
 8002328:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800232c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002330:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8002334:	4290      	cmp	r0, r2
 8002336:	d1f6      	bne.n	8002326 <USB_StopHost+0x22>
 8002338:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002340:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002344:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8002346:	3001      	adds	r0, #1
 8002348:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800234c:	d802      	bhi.n	8002354 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	2900      	cmp	r1, #0
 8002352:	dbf8      	blt.n	8002346 <USB_StopHost+0x42>
 8002354:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8002356:	429a      	cmp	r2, r3
 8002358:	d1ef      	bne.n	800233a <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800235e:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002362:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002364:	68a3      	ldr	r3, [r4, #8]
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800236c:	2000      	movs	r0, #0
 800236e:	bd10      	pop	{r4, pc}

08002370 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8002370:	2000      	movs	r0, #0
 8002372:	4770      	bx	lr

08002374 <USBH_CDC_InterfaceDeInit>:
{
 8002374:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002376:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800237a:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 800237c:	7821      	ldrb	r1, [r4, #0]
{
 800237e:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8002380:	b139      	cbz	r1, 8002392 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8002382:	f000 fe17 	bl	8002fb4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8002386:	7821      	ldrb	r1, [r4, #0]
 8002388:	4628      	mov	r0, r5
 800238a:	f000 fe2f 	bl	8002fec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800238e:	2300      	movs	r3, #0
 8002390:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8002392:	7b21      	ldrb	r1, [r4, #12]
 8002394:	b141      	cbz	r1, 80023a8 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8002396:	4628      	mov	r0, r5
 8002398:	f000 fe0c 	bl	8002fb4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800239c:	7b21      	ldrb	r1, [r4, #12]
 800239e:	4628      	mov	r0, r5
 80023a0:	f000 fe24 	bl	8002fec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80023a4:	2300      	movs	r3, #0
 80023a6:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 80023a8:	7b61      	ldrb	r1, [r4, #13]
 80023aa:	b141      	cbz	r1, 80023be <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80023ac:	4628      	mov	r0, r5
 80023ae:	f000 fe01 	bl	8002fb4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80023b2:	7b61      	ldrb	r1, [r4, #13]
 80023b4:	4628      	mov	r0, r5
 80023b6:	f000 fe19 	bl	8002fec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80023ba:	2300      	movs	r3, #0
 80023bc:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 80023be:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80023c2:	69d8      	ldr	r0, [r3, #28]
 80023c4:	b128      	cbz	r0, 80023d2 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 80023c6:	f001 faeb 	bl	80039a0 <free>
    phost->pActiveClass->pData = 0U;
 80023ca:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
}
 80023d2:	2000      	movs	r0, #0
 80023d4:	bd38      	pop	{r3, r4, r5, pc}

080023d6 <USBH_CDC_InterfaceInit>:
{
 80023d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 80023d8:	2202      	movs	r2, #2
{
 80023da:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 80023dc:	2301      	movs	r3, #1
 80023de:	4611      	mov	r1, r2
{
 80023e0:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 80023e2:	f000 f9b2 	bl	800274a <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 80023e6:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 80023e8:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 80023ea:	d102      	bne.n	80023f2 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 80023ec:	2002      	movs	r0, #2
}
 80023ee:	b005      	add	sp, #20
 80023f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 80023f2:	4601      	mov	r1, r0
 80023f4:	4628      	mov	r0, r5
 80023f6:	f000 f99f 	bl	8002738 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80023fa:	2050      	movs	r0, #80	; 0x50
 80023fc:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8002400:	f001 fac6 	bl	8003990 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002404:	231a      	movs	r3, #26
 8002406:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800240a:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800240c:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 8002410:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002412:	bf42      	ittt	mi
 8002414:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002416:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 800241a:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800241c:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800241e:	7841      	ldrb	r1, [r0, #1]
 8002420:	4628      	mov	r0, r5
 8002422:	f000 fdcc 	bl	8002fbe <USBH_AllocPipe>
 8002426:	4601      	mov	r1, r0
 8002428:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 800242a:	8960      	ldrh	r0, [r4, #10]
 800242c:	9002      	str	r0, [sp, #8]
 800242e:	2003      	movs	r0, #3
 8002430:	9001      	str	r0, [sp, #4]
 8002432:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8002436:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800243a:	7862      	ldrb	r2, [r4, #1]
 800243c:	9000      	str	r0, [sp, #0]
 800243e:	4628      	mov	r0, r5
 8002440:	f000 fda9 	bl	8002f96 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8002444:	2200      	movs	r2, #0
 8002446:	7821      	ldrb	r1, [r4, #0]
 8002448:	4628      	mov	r0, r5
 800244a:	f001 fa32 	bl	80038b2 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 800244e:	2300      	movs	r3, #0
 8002450:	461a      	mov	r2, r3
 8002452:	210a      	movs	r1, #10
 8002454:	4628      	mov	r0, r5
 8002456:	f000 f978 	bl	800274a <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 800245a:	28ff      	cmp	r0, #255	; 0xff
 800245c:	d0c6      	beq.n	80023ec <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800245e:	231a      	movs	r3, #26
 8002460:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002464:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002468:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800246c:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 8002470:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8002474:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8002478:	bf0d      	iteet	eq
 800247a:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800247c:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800247e:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8002480:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8002482:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002486:	bf08      	it	eq
 8002488:	73a3      	strbeq	r3, [r4, #14]
 800248a:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800248e:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8002490:	bf18      	it	ne
 8002492:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8002494:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8002496:	bf14      	ite	ne
 8002498:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800249a:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800249c:	f000 fd8f 	bl	8002fbe <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80024a0:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80024a2:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80024a4:	4628      	mov	r0, r5
 80024a6:	f000 fd8a 	bl	8002fbe <USBH_AllocPipe>
 80024aa:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 80024ac:	8b20      	ldrh	r0, [r4, #24]
 80024ae:	9002      	str	r0, [sp, #8]
 80024b0:	2602      	movs	r6, #2
 80024b2:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80024b6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80024ba:	7ba2      	ldrb	r2, [r4, #14]
 80024bc:	7b61      	ldrb	r1, [r4, #13]
 80024be:	9601      	str	r6, [sp, #4]
 80024c0:	9000      	str	r0, [sp, #0]
 80024c2:	4628      	mov	r0, r5
 80024c4:	f000 fd67 	bl	8002f96 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 80024c8:	8b60      	ldrh	r0, [r4, #26]
 80024ca:	9002      	str	r0, [sp, #8]
 80024cc:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80024d0:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80024d4:	7be2      	ldrb	r2, [r4, #15]
 80024d6:	7b21      	ldrb	r1, [r4, #12]
 80024d8:	9601      	str	r6, [sp, #4]
 80024da:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 80024dc:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 80024de:	4628      	mov	r0, r5
 80024e0:	f000 fd59 	bl	8002f96 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80024e4:	4632      	mov	r2, r6
 80024e6:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 80024e8:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80024ec:	4628      	mov	r0, r5
 80024ee:	f001 f9e0 	bl	80038b2 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80024f2:	4632      	mov	r2, r6
 80024f4:	7b21      	ldrb	r1, [r4, #12]
 80024f6:	4628      	mov	r0, r5
 80024f8:	f001 f9db 	bl	80038b2 <USBH_LL_SetToggle>
      status = USBH_OK;
 80024fc:	4630      	mov	r0, r6
 80024fe:	e776      	b.n	80023ee <USBH_CDC_InterfaceInit+0x18>

08002500 <USBH_CDC_ClassRequest>:
{
 8002500:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002502:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002506:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8002508:	23a1      	movs	r3, #161	; 0xa1
 800250a:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800250c:	2321      	movs	r3, #33	; 0x21
 800250e:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002510:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8002516:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002518:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800251a:	3140      	adds	r1, #64	; 0x40
{
 800251c:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800251e:	f000 fac9 	bl	8002ab4 <USBH_CtlReq>
  if(status == USBH_OK)
 8002522:	4605      	mov	r5, r0
 8002524:	b920      	cbnz	r0, 8002530 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8002526:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800252a:	2102      	movs	r1, #2
 800252c:	4620      	mov	r0, r4
 800252e:	4798      	blx	r3
}
 8002530:	4628      	mov	r0, r5
 8002532:	bd38      	pop	{r3, r4, r5, pc}

08002534 <USBH_CDC_TransmitCallback>:
 8002534:	4770      	bx	lr

08002536 <USBH_CDC_ReceiveCallback>:
 8002536:	4770      	bx	lr

08002538 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8002538:	4770      	bx	lr

0800253a <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800253a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 800253e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8002540:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8002542:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8002546:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8002548:	2b04      	cmp	r3, #4
 800254a:	d83d      	bhi.n	80025c8 <USBH_CDC_Process+0x8e>
 800254c:	e8df f003 	tbb	[pc, r3]
 8002550:	42170603 	.word	0x42170603
 8002554:	a6          	.byte	0xa6
 8002555:	00          	.byte	0x00
    status = USBH_OK;
 8002556:	2000      	movs	r0, #0
}
 8002558:	b002      	add	sp, #8
 800255a:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800255c:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800255e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8002560:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8002562:	2320      	movs	r3, #32
 8002564:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002566:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800256c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800256e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002570:	f000 faa0 	bl	8002ab4 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002574:	bb50      	cbnz	r0, 80025cc <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8002576:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 8002578:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800257c:	e024      	b.n	80025c8 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800257e:	23a1      	movs	r3, #161	; 0xa1
 8002580:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8002582:	2321      	movs	r3, #33	; 0x21
 8002584:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8002586:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800258c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800258e:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8002590:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8002594:	f000 fa8e 	bl	8002ab4 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8002598:	b9c0      	cbnz	r0, 80025cc <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800259a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800259c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 800259e:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80025a2:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80025ac:	4291      	cmp	r1, r2
 80025ae:	d10b      	bne.n	80025c8 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80025b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025b4:	795a      	ldrb	r2, [r3, #5]
 80025b6:	4291      	cmp	r1, r2
 80025b8:	d106      	bne.n	80025c8 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80025ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d102      	bne.n	80025c8 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 80025c2:	4628      	mov	r0, r5
 80025c4:	f7ff ffb8 	bl	8002538 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 80025c8:	2001      	movs	r0, #1
 80025ca:	e7c5      	b.n	8002558 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 80025cc:	2801      	cmp	r0, #1
 80025ce:	d0fb      	beq.n	80025c8 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 80025d0:	2304      	movs	r3, #4
 80025d2:	e7d1      	b.n	8002578 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 80025d4:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 80025d8:	2901      	cmp	r1, #1
 80025da:	d021      	beq.n	8002620 <USBH_CDC_Process+0xe6>
 80025dc:	2902      	cmp	r1, #2
 80025de:	d02e      	beq.n	800263e <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80025e0:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80025e4:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 80025e6:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d045      	beq.n	800267a <USBH_CDC_Process+0x140>
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d1ea      	bne.n	80025c8 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80025f2:	7b31      	ldrb	r1, [r6, #12]
 80025f4:	4628      	mov	r0, r5
 80025f6:	f001 f94b 	bl	8003890 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80025fa:	2801      	cmp	r0, #1
 80025fc:	d1e4      	bne.n	80025c8 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80025fe:	7b31      	ldrb	r1, [r6, #12]
 8002600:	4628      	mov	r0, r5
 8002602:	f001 f901 	bl	8003808 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8002606:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002608:	4298      	cmp	r0, r3
 800260a:	d040      	beq.n	800268e <USBH_CDC_Process+0x154>
 800260c:	8b72      	ldrh	r2, [r6, #26]
 800260e:	4290      	cmp	r0, r2
 8002610:	d93d      	bls.n	800268e <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 8002612:	1a1b      	subs	r3, r3, r0
 8002614:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8002616:	6a33      	ldr	r3, [r6, #32]
 8002618:	4418      	add	r0, r3
 800261a:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800261c:	2303      	movs	r3, #3
 800261e:	e033      	b.n	8002688 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002620:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002622:	8b22      	ldrh	r2, [r4, #24]
 8002624:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8002626:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002628:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 800262a:	bf98      	it	ls
 800262c:	b282      	uxthls	r2, r0
 800262e:	69e1      	ldr	r1, [r4, #28]
 8002630:	4628      	mov	r0, r5
 8002632:	f000 fc89 	bl	8002f48 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8002636:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8002638:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 800263c:	e7d0      	b.n	80025e0 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800263e:	7b61      	ldrb	r1, [r4, #13]
 8002640:	f001 f926 	bl	8003890 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8002644:	2801      	cmp	r0, #1
 8002646:	d115      	bne.n	8002674 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8002648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800264a:	8b22      	ldrh	r2, [r4, #24]
 800264c:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800264e:	bf83      	ittte	hi
 8002650:	1a9b      	subhi	r3, r3, r2
 8002652:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002654:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 8002656:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8002658:	bf8a      	itet	hi
 800265a:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 800265c:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800265e:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 8002660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002662:	b10b      	cbz	r3, 8002668 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8002664:	2301      	movs	r3, #1
 8002666:	e7e7      	b.n	8002638 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8002668:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800266c:	4628      	mov	r0, r5
 800266e:	f7ff ff61 	bl	8002534 <USBH_CDC_TransmitCallback>
 8002672:	e7b5      	b.n	80025e0 <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 8002674:	2802      	cmp	r0, #2
 8002676:	d1b3      	bne.n	80025e0 <USBH_CDC_Process+0xa6>
 8002678:	e7f4      	b.n	8002664 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 800267a:	7b33      	ldrb	r3, [r6, #12]
 800267c:	8b72      	ldrh	r2, [r6, #26]
 800267e:	6a31      	ldr	r1, [r6, #32]
 8002680:	4628      	mov	r0, r5
 8002682:	f000 fc78 	bl	8002f76 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8002686:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8002688:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 800268c:	e79c      	b.n	80025c8 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8002694:	4628      	mov	r0, r5
 8002696:	f7ff ff4e 	bl	8002536 <USBH_CDC_ReceiveCallback>
 800269a:	e795      	b.n	80025c8 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 800269c:	2100      	movs	r1, #0
 800269e:	f000 fc0d 	bl	8002ebc <USBH_ClrFeature>
    if(req_status == USBH_OK )
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d190      	bne.n	80025c8 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 80026a6:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 80026aa:	e78d      	b.n	80025c8 <USBH_CDC_Process+0x8e>

080026ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80026ac:	f500 7360 	add.w	r3, r0, #896	; 0x380
 80026b0:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 80026b4:	2100      	movs	r1, #0
 80026b6:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d1fb      	bne.n	80026b6 <DeInitStateMachine+0xa>
 80026be:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80026c2:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80026cc:	4291      	cmp	r1, r2
 80026ce:	d1fb      	bne.n	80026c8 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80026d0:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80026d2:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 80026d4:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80026d6:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80026d8:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 80026da:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 80026de:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80026e0:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 80026e2:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80026e4:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80026e8:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 80026ec:	2000      	movs	r0, #0
 80026ee:	4770      	bx	lr

080026f0 <USBH_Init>:
{
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	460d      	mov	r5, r1
  if(phost == NULL)
 80026f4:	4604      	mov	r4, r0
 80026f6:	b180      	cbz	r0, 800271a <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 80026f8:	2300      	movs	r3, #0
  phost->id = id;
 80026fa:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 80026fe:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8002702:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8002706:	f7ff ffd1 	bl	80026ac <DeInitStateMachine>
  if(pUsrFunc != NULL)
 800270a:	b10d      	cbz	r5, 8002710 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 800270c:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8002710:	4620      	mov	r0, r4
 8002712:	f001 f81b 	bl	800374c <USBH_LL_Init>
  return USBH_OK;
 8002716:	2000      	movs	r0, #0
 8002718:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 800271a:	2002      	movs	r0, #2
}
 800271c:	bd38      	pop	{r3, r4, r5, pc}

0800271e <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800271e:	b149      	cbz	r1, 8002734 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8002720:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8002724:	b933      	cbnz	r3, 8002734 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8002726:	2201      	movs	r2, #1
 8002728:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 800272c:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 8002730:	4618      	mov	r0, r3
 8002732:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8002734:	2002      	movs	r0, #2
  }

  return status;
}
 8002736:	4770      	bx	lr

08002738 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8002738:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 800273c:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800273e:	bf86      	itte	hi
 8002740:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8002744:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8002746:	2002      	movls	r0, #2
  }
  return status;
}
 8002748:	4770      	bx	lr

0800274a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800274a:	b570      	push	{r4, r5, r6, lr}
 800274c:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800274e:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8002752:	428e      	cmp	r6, r1
 8002754:	b2e5      	uxtb	r5, r4
 8002756:	d001      	beq.n	800275c <USBH_FindInterface+0x12>
 8002758:	29ff      	cmp	r1, #255	; 0xff
 800275a:	d10b      	bne.n	8002774 <USBH_FindInterface+0x2a>
 800275c:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8002760:	4296      	cmp	r6, r2
 8002762:	d001      	beq.n	8002768 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8002764:	2aff      	cmp	r2, #255	; 0xff
 8002766:	d105      	bne.n	8002774 <USBH_FindInterface+0x2a>
 8002768:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800276c:	429e      	cmp	r6, r3
 800276e:	d007      	beq.n	8002780 <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8002770:	2bff      	cmp	r3, #255	; 0xff
 8002772:	d005      	beq.n	8002780 <USBH_FindInterface+0x36>
 8002774:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8002776:	2c02      	cmp	r4, #2
 8002778:	f100 001a 	add.w	r0, r0, #26
 800277c:	d1e7      	bne.n	800274e <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800277e:	25ff      	movs	r5, #255	; 0xff
}
 8002780:	4628      	mov	r0, r5
 8002782:	bd70      	pop	{r4, r5, r6, pc}

08002784 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8002784:	b510      	push	{r4, lr}
 8002786:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8002788:	f001 f806 	bl	8003798 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800278c:	2101      	movs	r1, #1
 800278e:	4620      	mov	r0, r4
 8002790:	f001 f882 	bl	8003898 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8002794:	2000      	movs	r0, #0
 8002796:	bd10      	pop	{r4, pc}

08002798 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8002798:	b530      	push	{r4, r5, lr}
 800279a:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800279c:	2302      	movs	r3, #2
 800279e:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 80027a2:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 80027a6:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80027a8:	b933      	cbnz	r3, 80027b8 <USBH_Process+0x20>
 80027aa:	7802      	ldrb	r2, [r0, #0]
 80027ac:	b122      	cbz	r2, 80027b8 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80027ae:	7802      	ldrb	r2, [r0, #0]
 80027b0:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 80027b2:	bf1c      	itt	ne
 80027b4:	2203      	movne	r2, #3
 80027b6:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 80027b8:	7822      	ldrb	r2, [r4, #0]
 80027ba:	2a0b      	cmp	r2, #11
 80027bc:	d818      	bhi.n	80027f0 <USBH_Process+0x58>
 80027be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80027c2:	000c      	.short	0x000c
 80027c4:	001f001a 	.word	0x001f001a
 80027c8:	00170121 	.word	0x00170121
 80027cc:	0107004f 	.word	0x0107004f
 80027d0:	00d000c6 	.word	0x00d000c6
 80027d4:	00e700da 	.word	0x00e700da
 80027d8:	0118      	.short	0x0118
    if (phost->device.is_connected)
 80027da:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 80027de:	b13b      	cbz	r3, 80027f0 <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80027e0:	2301      	movs	r3, #1
      USBH_Delay(200U);
 80027e2:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80027e4:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 80027e6:	f001 f873 	bl	80038d0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80027ea:	4620      	mov	r0, r4
 80027ec:	f000 fffe 	bl	80037ec <USBH_LL_ResetPort>
}
 80027f0:	2000      	movs	r0, #0
 80027f2:	b007      	add	sp, #28
 80027f4:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d1fa      	bne.n	80027f0 <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 80027fa:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 80027fc:	7023      	strb	r3, [r4, #0]
 80027fe:	e7f7      	b.n	80027f0 <USBH_Process+0x58>
    USBH_Delay(100U);
 8002800:	2064      	movs	r0, #100	; 0x64
 8002802:	f001 f865 	bl	80038d0 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8002806:	4620      	mov	r0, r4
 8002808:	f000 ffe2 	bl	80037d0 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800280c:	2305      	movs	r3, #5
 800280e:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8002810:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8002814:	2100      	movs	r1, #0
 8002816:	4620      	mov	r0, r4
 8002818:	f000 fbd1 	bl	8002fbe <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800281c:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800281e:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8002820:	4620      	mov	r0, r4
 8002822:	f000 fbcc 	bl	8002fbe <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8002826:	79a2      	ldrb	r2, [r4, #6]
 8002828:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800282c:	7120      	strb	r0, [r4, #4]
 800282e:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8002830:	9202      	str	r2, [sp, #8]
 8002832:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 8002834:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8002838:	9200      	str	r2, [sp, #0]
 800283a:	9501      	str	r5, [sp, #4]
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	4620      	mov	r0, r4
 8002840:	f000 fba9 	bl	8002f96 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8002844:	79a2      	ldrb	r2, [r4, #6]
 8002846:	9202      	str	r2, [sp, #8]
 8002848:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 800284c:	9200      	str	r2, [sp, #0]
 800284e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8002852:	7961      	ldrb	r1, [r4, #5]
 8002854:	9501      	str	r5, [sp, #4]
 8002856:	462a      	mov	r2, r5
 8002858:	4620      	mov	r0, r4
 800285a:	f000 fb9c 	bl	8002f96 <USBH_OpenPipe>
 800285e:	e7c7      	b.n	80027f0 <USBH_Process+0x58>
  switch (phost->EnumState)
 8002860:	7863      	ldrb	r3, [r4, #1]
 8002862:	2b07      	cmp	r3, #7
 8002864:	d8c4      	bhi.n	80027f0 <USBH_Process+0x58>
 8002866:	e8df f003 	tbb	[pc, r3]
 800286a:	1504      	.short	0x1504
 800286c:	4138301e 	.word	0x4138301e
 8002870:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8002872:	2108      	movs	r1, #8
 8002874:	4620      	mov	r0, r4
 8002876:	f000 f9fa 	bl	8002c6e <USBH_Get_DevDesc>
 800287a:	4605      	mov	r5, r0
 800287c:	2800      	cmp	r0, #0
 800287e:	d1b7      	bne.n	80027f0 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8002880:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8002882:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8002886:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8002888:	7921      	ldrb	r1, [r4, #4]
 800288a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800288e:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8002890:	9202      	str	r2, [sp, #8]
 8002892:	e7cf      	b.n	8002834 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8002894:	2112      	movs	r1, #18
 8002896:	4620      	mov	r0, r4
 8002898:	f000 f9e9 	bl	8002c6e <USBH_Get_DevDesc>
 800289c:	2800      	cmp	r0, #0
 800289e:	d1a7      	bne.n	80027f0 <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 80028a0:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80028a2:	7063      	strb	r3, [r4, #1]
 80028a4:	e7a4      	b.n	80027f0 <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80028a6:	2101      	movs	r1, #1
 80028a8:	4620      	mov	r0, r4
 80028aa:	f000 fadd 	bl	8002e68 <USBH_SetAddress>
 80028ae:	4605      	mov	r5, r0
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d19d      	bne.n	80027f0 <USBH_Process+0x58>
      USBH_Delay(2U);
 80028b4:	2002      	movs	r0, #2
 80028b6:	f001 f80b 	bl	80038d0 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 80028ba:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 80028bc:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 80028be:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 80028c0:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 80028c4:	7921      	ldrb	r1, [r4, #4]
 80028c6:	79a2      	ldrb	r2, [r4, #6]
 80028c8:	e7e2      	b.n	8002890 <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 80028ca:	2109      	movs	r1, #9
 80028cc:	4620      	mov	r0, r4
 80028ce:	f000 fa16 	bl	8002cfe <USBH_Get_CfgDesc>
 80028d2:	2800      	cmp	r0, #0
 80028d4:	d18c      	bne.n	80027f0 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80028d6:	2304      	movs	r3, #4
 80028d8:	e7e3      	b.n	80028a2 <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 80028da:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 80028de:	4620      	mov	r0, r4
 80028e0:	f000 fa0d 	bl	8002cfe <USBH_Get_CfgDesc>
 80028e4:	2800      	cmp	r0, #0
 80028e6:	d183      	bne.n	80027f0 <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80028e8:	2305      	movs	r3, #5
 80028ea:	e7da      	b.n	80028a2 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 80028ec:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 80028f0:	b141      	cbz	r1, 8002904 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 80028f2:	23ff      	movs	r3, #255	; 0xff
 80028f4:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80028f8:	4620      	mov	r0, r4
 80028fa:	f000 fa8e 	bl	8002e1a <USBH_Get_StringDesc>
 80028fe:	2800      	cmp	r0, #0
 8002900:	f47f af76 	bne.w	80027f0 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8002904:	2306      	movs	r3, #6
 8002906:	e7cc      	b.n	80028a2 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8002908:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 800290c:	b141      	cbz	r1, 8002920 <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 800290e:	23ff      	movs	r3, #255	; 0xff
 8002910:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8002914:	4620      	mov	r0, r4
 8002916:	f000 fa80 	bl	8002e1a <USBH_Get_StringDesc>
 800291a:	2800      	cmp	r0, #0
 800291c:	f47f af68 	bne.w	80027f0 <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8002920:	2307      	movs	r3, #7
 8002922:	e7be      	b.n	80028a2 <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8002924:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 8002928:	b141      	cbz	r1, 800293c <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 800292a:	23ff      	movs	r3, #255	; 0xff
 800292c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8002930:	4620      	mov	r0, r4
 8002932:	f000 fa72 	bl	8002e1a <USBH_Get_StringDesc>
 8002936:	2800      	cmp	r0, #0
 8002938:	f47f af5a 	bne.w	80027f0 <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8002942:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 8002946:	2b01      	cmp	r3, #1
 8002948:	d009      	beq.n	800295e <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 800294a:	2307      	movs	r3, #7
 800294c:	e756      	b.n	80027fc <USBH_Process+0x64>
      if(phost->pUser != NULL)
 800294e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002952:	2b00      	cmp	r3, #0
 8002954:	f43f af4c 	beq.w	80027f0 <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8002958:	2101      	movs	r1, #1
 800295a:	4620      	mov	r0, r4
 800295c:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 800295e:	2308      	movs	r3, #8
 8002960:	e74c      	b.n	80027fc <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8002962:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 8002966:	4620      	mov	r0, r4
 8002968:	f000 fa8c 	bl	8002e84 <USBH_SetCfg>
 800296c:	2800      	cmp	r0, #0
 800296e:	f47f af3f 	bne.w	80027f0 <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8002972:	2309      	movs	r3, #9
 8002974:	e742      	b.n	80027fc <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8002976:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 800297a:	069b      	lsls	r3, r3, #26
 800297c:	d506      	bpl.n	800298c <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800297e:	2101      	movs	r1, #1
 8002980:	4620      	mov	r0, r4
 8002982:	f000 fa8d 	bl	8002ea0 <USBH_SetFeature>
 8002986:	2800      	cmp	r0, #0
 8002988:	f47f af32 	bne.w	80027f0 <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 800298c:	230a      	movs	r3, #10
 800298e:	e735      	b.n	80027fc <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 8002990:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8002994:	2b00      	cmp	r3, #0
 8002996:	f43f af2b 	beq.w	80027f0 <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80029a0:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 80029a4:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 80029a8:	7919      	ldrb	r1, [r3, #4]
 80029aa:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 80029ac:	bf08      	it	eq
 80029ae:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 80029b2:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80029b6:	b1d3      	cbz	r3, 80029ee <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	4620      	mov	r0, r4
 80029bc:	4798      	blx	r3
 80029be:	b9b0      	cbnz	r0, 80029ee <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 80029c0:	2306      	movs	r3, #6
 80029c2:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80029c4:	2103      	movs	r1, #3
 80029c6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80029ca:	4620      	mov	r0, r4
 80029cc:	4798      	blx	r3
 80029ce:	e70f      	b.n	80027f0 <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 80029d0:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80029d4:	b15b      	cbz	r3, 80029ee <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4620      	mov	r0, r4
 80029da:	4798      	blx	r3
 80029dc:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 80029e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f af03 	bne.w	80027f0 <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 80029ea:	230b      	movs	r3, #11
 80029ec:	e706      	b.n	80027fc <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 80029ee:	230d      	movs	r3, #13
 80029f0:	e704      	b.n	80027fc <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 80029f2:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f43f aefa 	beq.w	80027f0 <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	4620      	mov	r0, r4
 8002a00:	4798      	blx	r3
 8002a02:	e6f5      	b.n	80027f0 <USBH_Process+0x58>
    DeInitStateMachine(phost);
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff fe51 	bl	80026ac <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8002a0a:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f43f aeee 	beq.w	80027f0 <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4620      	mov	r0, r4
 8002a18:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 8002a20:	e6e6      	b.n	80027f0 <USBH_Process+0x58>

08002a22 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8002a22:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 8002a26:	4770      	bx	lr

08002a28 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8002a28:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8002a2c:	3201      	adds	r2, #1
 8002a2e:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8002a32:	7802      	ldrb	r2, [r0, #0]
 8002a34:	2a0b      	cmp	r2, #11
 8002a36:	d104      	bne.n	8002a42 <USBH_LL_IncTimer+0x1a>
 8002a38:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8002a3c:	b10b      	cbz	r3, 8002a42 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4718      	bx	r3
 8002a42:	4770      	bx	lr

08002a44 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8002a4a:	4770      	bx	lr

08002a4c <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8002a52:	4770      	bx	lr

08002a54 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8002a54:	7802      	ldrb	r2, [r0, #0]
{
 8002a56:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8002a58:	b94a      	cbnz	r2, 8002a6e <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 8002a5a:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8002a64:	b10b      	cbz	r3, 8002a6a <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8002a66:	2104      	movs	r1, #4
 8002a68:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8002a6e:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8002a72:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8002a74:	bf04      	itt	eq
 8002a76:	2202      	moveq	r2, #2
 8002a78:	7002      	strbeq	r2, [r0, #0]
 8002a7a:	e7f6      	b.n	8002a6a <USBH_LL_Connect+0x16>

08002a7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8002a80:	f000 fe98 	bl	80037b4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8002a84:	7921      	ldrb	r1, [r4, #4]
 8002a86:	4620      	mov	r0, r4
 8002a88:	f000 fab0 	bl	8002fec <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8002a8c:	7961      	ldrb	r1, [r4, #5]
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f000 faac 	bl	8002fec <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 8002a9a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002a9e:	b113      	cbz	r3, 8002aa6 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8002aa0:	2105      	movs	r1, #5
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f000 fe76 	bl	8003798 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8002aac:	2303      	movs	r3, #3
 8002aae:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	bd10      	pop	{r4, pc}

08002ab4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8002ab4:	b513      	push	{r0, r1, r4, lr}
 8002ab6:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8002ab8:	7880      	ldrb	r0, [r0, #2]
 8002aba:	2801      	cmp	r0, #1
 8002abc:	d003      	beq.n	8002ac6 <USBH_CtlReq+0x12>
 8002abe:	2802      	cmp	r0, #2
 8002ac0:	d008      	beq.n	8002ad4 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8002ac2:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8002ac4:	e004      	b.n	8002ad0 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8002ac6:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8002ac8:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8002aca:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8002acc:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8002ace:	70a3      	strb	r3, [r4, #2]
}
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8002ad4:	7e23      	ldrb	r3, [r4, #24]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2b0a      	cmp	r3, #10
 8002adc:	d8f1      	bhi.n	8002ac2 <USBH_CtlReq+0xe>
 8002ade:	e8df f003 	tbb	[pc, r3]
 8002ae2:	0f06      	.short	0x0f06
 8002ae4:	4c40362b 	.word	0x4c40362b
 8002ae8:	8c806f64 	.word	0x8c806f64
 8002aec:	95          	.byte	0x95
 8002aed:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8002aee:	7962      	ldrb	r2, [r4, #5]
 8002af0:	f104 0110 	add.w	r1, r4, #16
 8002af4:	4620      	mov	r0, r4
 8002af6:	f000 f9ef 	bl	8002ed8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8002afa:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8002afc:	7623      	strb	r3, [r4, #24]
 8002afe:	e7e0      	b.n	8002ac2 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8002b00:	7961      	ldrb	r1, [r4, #5]
 8002b02:	4620      	mov	r0, r4
 8002b04:	f000 fec4 	bl	8003890 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8002b08:	2801      	cmp	r0, #1
 8002b0a:	d10f      	bne.n	8002b2c <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 8002b0c:	8ae2      	ldrh	r2, [r4, #22]
 8002b0e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8002b12:	b12a      	cbz	r2, 8002b20 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	da01      	bge.n	8002b1c <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e7ef      	b.n	8002afc <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8002b1c:	2305      	movs	r3, #5
 8002b1e:	e7ed      	b.n	8002afc <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da01      	bge.n	8002b28 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8002b24:	2309      	movs	r3, #9
 8002b26:	e7e9      	b.n	8002afc <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 8002b28:	2307      	movs	r3, #7
 8002b2a:	e7e7      	b.n	8002afc <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8002b2c:	2804      	cmp	r0, #4
 8002b2e:	d001      	beq.n	8002b34 <USBH_CtlReq+0x80>
 8002b30:	2802      	cmp	r0, #2
 8002b32:	d1c6      	bne.n	8002ac2 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8002b34:	230b      	movs	r3, #11
 8002b36:	e7e1      	b.n	8002afc <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 8002b38:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8002b3c:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8002b3e:	89a2      	ldrh	r2, [r4, #12]
 8002b40:	7923      	ldrb	r3, [r4, #4]
 8002b42:	68a1      	ldr	r1, [r4, #8]
 8002b44:	4620      	mov	r0, r4
 8002b46:	f000 f9ef 	bl	8002f28 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	e7d6      	b.n	8002afc <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8002b4e:	7921      	ldrb	r1, [r4, #4]
 8002b50:	4620      	mov	r0, r4
 8002b52:	f000 fe9d 	bl	8003890 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8002b56:	2801      	cmp	r0, #1
 8002b58:	d0e4      	beq.n	8002b24 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8002b5a:	2805      	cmp	r0, #5
 8002b5c:	d015      	beq.n	8002b8a <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8002b5e:	2804      	cmp	r0, #4
 8002b60:	e7e7      	b.n	8002b32 <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 8002b62:	7963      	ldrb	r3, [r4, #5]
 8002b64:	9100      	str	r1, [sp, #0]
 8002b66:	89a2      	ldrh	r2, [r4, #12]
 8002b68:	68a1      	ldr	r1, [r4, #8]
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f000 f9c5 	bl	8002efa <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8002b70:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8002b74:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8002b76:	2306      	movs	r3, #6
 8002b78:	e7c0      	b.n	8002afc <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8002b7a:	7961      	ldrb	r1, [r4, #5]
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f000 fe87 	bl	8003890 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8002b82:	2801      	cmp	r0, #1
 8002b84:	d0d0      	beq.n	8002b28 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 8002b86:	2805      	cmp	r0, #5
 8002b88:	d105      	bne.n	8002b96 <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8002b92:	2003      	movs	r0, #3
 8002b94:	e79c      	b.n	8002ad0 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8002b96:	2802      	cmp	r0, #2
 8002b98:	d0c0      	beq.n	8002b1c <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 8002b9a:	2804      	cmp	r0, #4
 8002b9c:	d191      	bne.n	8002ac2 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8002b9e:	230b      	movs	r3, #11
 8002ba0:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	e792      	b.n	8002ad0 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8002baa:	2200      	movs	r2, #0
 8002bac:	7923      	ldrb	r3, [r4, #4]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f000 f9b9 	bl	8002f28 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8002bb6:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8002bba:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8002bbc:	2308      	movs	r3, #8
 8002bbe:	e79d      	b.n	8002afc <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8002bc0:	7921      	ldrb	r1, [r4, #4]
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f000 fe64 	bl	8003890 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8002bc8:	2801      	cmp	r0, #1
 8002bca:	d104      	bne.n	8002bd6 <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 8002bcc:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8002bce:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8002bd0:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8002bd2:	7620      	strb	r0, [r4, #24]
 8002bd4:	e77c      	b.n	8002ad0 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8002bd6:	2804      	cmp	r0, #4
 8002bd8:	d0ac      	beq.n	8002b34 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 8002bda:	2805      	cmp	r0, #5
 8002bdc:	f47f af71 	bne.w	8002ac2 <USBH_CtlReq+0xe>
 8002be0:	e7d3      	b.n	8002b8a <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8002be2:	2200      	movs	r2, #0
 8002be4:	7963      	ldrb	r3, [r4, #5]
 8002be6:	9100      	str	r1, [sp, #0]
 8002be8:	4620      	mov	r0, r4
 8002bea:	4611      	mov	r1, r2
 8002bec:	f000 f985 	bl	8002efa <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8002bf0:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8002bf4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	e780      	b.n	8002afc <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8002bfa:	7961      	ldrb	r1, [r4, #5]
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f000 fe47 	bl	8003890 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8002c02:	2801      	cmp	r0, #1
 8002c04:	d0e2      	beq.n	8002bcc <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8002c06:	2802      	cmp	r0, #2
 8002c08:	d1a9      	bne.n	8002b5e <USBH_CtlReq+0xaa>
 8002c0a:	e78b      	b.n	8002b24 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8002c0c:	7e63      	ldrb	r3, [r4, #25]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	7663      	strb	r3, [r4, #25]
 8002c16:	d806      	bhi.n	8002c26 <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f000 fdcb 	bl	80037b4 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8002c22:	70a3      	strb	r3, [r4, #2]
 8002c24:	e74d      	b.n	8002ac2 <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8002c26:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8002c2a:	2106      	movs	r1, #6
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	7663      	strb	r3, [r4, #25]
 8002c34:	e7b5      	b.n	8002ba2 <USBH_CtlReq+0xee>

08002c36 <USBH_GetDescriptor>:
{
 8002c36:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8002c38:	7884      	ldrb	r4, [r0, #2]
{
 8002c3a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8002c3e:	2c01      	cmp	r4, #1
 8002c40:	d110      	bne.n	8002c64 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8002c42:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8002c46:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8002c48:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8002c4c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8002c50:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8002c52:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8002c56:	bf0c      	ite	eq
 8002c58:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8002c5c:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8002c5e:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8002c60:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8002c62:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8002c64:	462a      	mov	r2, r5
 8002c66:	4619      	mov	r1, r3
}
 8002c68:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8002c6a:	f7ff bf23 	b.w	8002ab4 <USBH_CtlReq>

08002c6e <USBH_Get_DevDesc>:
{
 8002c6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8002c70:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8002c74:	460d      	mov	r5, r1
 8002c76:	9100      	str	r1, [sp, #0]
 8002c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7c:	2100      	movs	r1, #0
{
 8002c7e:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8002c80:	f7ff ffd9 	bl	8002c36 <USBH_GetDescriptor>
 8002c84:	bbc8      	cbnz	r0, 8002cfa <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8002c86:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8002c8a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8002c8e:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8002c92:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8002c96:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8002c9a:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8002c9e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8002ca2:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8002ca6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8002caa:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8002cae:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8002cb2:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8002cb6:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8002cb8:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8002cbc:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8002cc0:	d91b      	bls.n	8002cfa <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8002cc2:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8002cc6:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8002cca:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8002cce:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8002cd2:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8002cd6:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8002cda:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8002cde:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8002ce2:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8002ce6:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8002cea:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8002cee:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8002cf2:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8002cf6:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8002cfa:	b003      	add	sp, #12
 8002cfc:	bd30      	pop	{r4, r5, pc}

08002cfe <USBH_Get_CfgDesc>:
{
 8002cfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8002d02:	f100 051c 	add.w	r5, r0, #28
{
 8002d06:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8002d08:	9100      	str	r1, [sp, #0]
 8002d0a:	462b      	mov	r3, r5
 8002d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d10:	2100      	movs	r1, #0
{
 8002d12:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8002d14:	f7ff ff8f 	bl	8002c36 <USBH_GetDescriptor>
 8002d18:	bb48      	cbnz	r0, 8002d6e <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8002d1a:	7f23      	ldrb	r3, [r4, #28]
 8002d1c:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8002d20:	7f63      	ldrb	r3, [r4, #29]
 8002d22:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8002d26:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002d2a:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8002d2e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002d32:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8002d36:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002d3a:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8002d3e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8002d42:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8002d46:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8002d4a:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8002d4c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8002d50:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8002d54:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8002d58:	d909      	bls.n	8002d6e <USBH_Get_CfgDesc+0x70>
 8002d5a:	4627      	mov	r7, r4
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	4606      	mov	r6, r0
 8002d60:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8002d62:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8002d66:	2e02      	cmp	r6, #2
 8002d68:	d001      	beq.n	8002d6e <USBH_Get_CfgDesc+0x70>
 8002d6a:	4596      	cmp	lr, r2
 8002d6c:	d802      	bhi.n	8002d74 <USBH_Get_CfgDesc+0x76>
}
 8002d6e:	b003      	add	sp, #12
 8002d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002d74:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8002d76:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002d78:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8002d7a:	7859      	ldrb	r1, [r3, #1]
 8002d7c:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002d7e:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8002d80:	d1f1      	bne.n	8002d66 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8002d82:	7819      	ldrb	r1, [r3, #0]
 8002d84:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8002d88:	7859      	ldrb	r1, [r3, #1]
 8002d8a:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8002d8e:	7899      	ldrb	r1, [r3, #2]
 8002d90:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8002d94:	78d9      	ldrb	r1, [r3, #3]
 8002d96:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8002d9a:	7919      	ldrb	r1, [r3, #4]
 8002d9c:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8002da0:	7959      	ldrb	r1, [r3, #5]
 8002da2:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8002da6:	7999      	ldrb	r1, [r3, #6]
 8002da8:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8002dac:	79d9      	ldrb	r1, [r3, #7]
 8002dae:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8002db2:	7a19      	ldrb	r1, [r3, #8]
 8002db4:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8002db8:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8002dbc:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8002dbe:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8002dc2:	428d      	cmp	r5, r1
 8002dc4:	d802      	bhi.n	8002dcc <USBH_Get_CfgDesc+0xce>
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	371a      	adds	r7, #26
 8002dca:	e7cc      	b.n	8002d66 <USBH_Get_CfgDesc+0x68>
 8002dcc:	4596      	cmp	lr, r2
 8002dce:	d9fa      	bls.n	8002dc6 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002dd0:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8002dd2:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002dd4:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8002dd6:	785d      	ldrb	r5, [r3, #1]
 8002dd8:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8002dda:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8002ddc:	d1ef      	bne.n	8002dbe <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8002dde:	1c4d      	adds	r5, r1, #1
 8002de0:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8002de4:	4421      	add	r1, r4
 8002de6:	f893 9000 	ldrb.w	r9, [r3]
 8002dea:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8002dee:	f893 9001 	ldrb.w	r9, [r3, #1]
 8002df2:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8002df6:	f893 9002 	ldrb.w	r9, [r3, #2]
 8002dfa:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8002dfe:	f893 9003 	ldrb.w	r9, [r3, #3]
 8002e02:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8002e06:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8002e0a:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8002e0e:	f893 9006 	ldrb.w	r9, [r3, #6]
 8002e12:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8002e16:	b2e9      	uxtb	r1, r5
 8002e18:	e7d1      	b.n	8002dbe <USBH_Get_CfgDesc+0xc0>

08002e1a <USBH_Get_StringDesc>:
{
 8002e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8002e1c:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8002e20:	4614      	mov	r4, r2
 8002e22:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8002e2a:	462b      	mov	r3, r5
 8002e2c:	2100      	movs	r1, #0
{
 8002e2e:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8002e30:	f7ff ff01 	bl	8002c36 <USBH_GetDescriptor>
 8002e34:	b978      	cbnz	r0, 8002e56 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8002e36:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d10b      	bne.n	8002e56 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8002e3e:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8002e42:	3b02      	subs	r3, #2
 8002e44:	42bb      	cmp	r3, r7
 8002e46:	bf28      	it	cs
 8002e48:	463b      	movcs	r3, r7
 8002e4a:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d803      	bhi.n	8002e5a <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8002e52:	2300      	movs	r3, #0
 8002e54:	7023      	strb	r3, [r4, #0]
}
 8002e56:	b003      	add	sp, #12
 8002e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8002e5a:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8002e5c:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8002e5e:	7889      	ldrb	r1, [r1, #2]
 8002e60:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8002e64:	b292      	uxth	r2, r2
 8002e66:	e7f2      	b.n	8002e4e <USBH_Get_StringDesc+0x34>

08002e68 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8002e68:	7883      	ldrb	r3, [r0, #2]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d106      	bne.n	8002e7c <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8002e6e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8002e70:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8002e72:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8002e74:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8002e76:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8002e78:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8002e7a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4611      	mov	r1, r2
 8002e80:	f7ff be18 	b.w	8002ab4 <USBH_CtlReq>

08002e84 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8002e84:	7883      	ldrb	r3, [r0, #2]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d106      	bne.n	8002e98 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8002e8a:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8002e8c:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8002e8e:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8002e90:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8002e92:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8002e94:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8002e96:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	f7ff be0a 	b.w	8002ab4 <USBH_CtlReq>

08002ea0 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8002ea0:	7883      	ldrb	r3, [r0, #2]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d106      	bne.n	8002eb4 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8002ea6:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8002ea8:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8002eaa:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8002eac:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8002eae:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8002eb0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8002eb2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	f7ff bdfc 	b.w	8002ab4 <USBH_CtlReq>

08002ebc <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8002ebc:	7883      	ldrb	r3, [r0, #2]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d106      	bne.n	8002ed0 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8002ec2:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8002ec4:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8002ec6:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8002ec8:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8002eca:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8002ecc:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8002ece:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	f7ff bdee 	b.w	8002ab4 <USBH_CtlReq>

08002ed8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8002ed8:	b530      	push	{r4, r5, lr}
 8002eda:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002edc:	2400      	movs	r4, #0
{
 8002ede:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	9302      	str	r3, [sp, #8]
 8002ee4:	9101      	str	r1, [sp, #4]
 8002ee6:	9403      	str	r4, [sp, #12]
 8002ee8:	9400      	str	r4, [sp, #0]
 8002eea:	4623      	mov	r3, r4
 8002eec:	4622      	mov	r2, r4
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f000 fcb4 	bl	800385c <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	b005      	add	sp, #20
 8002ef8:	bd30      	pop	{r4, r5, pc}

08002efa <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8002efa:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8002efc:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8002f00:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8002f02:	2d00      	cmp	r5, #0
{
 8002f04:	461c      	mov	r4, r3
 8002f06:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002f0a:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8002f0c:	bf18      	it	ne
 8002f0e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002f10:	9303      	str	r3, [sp, #12]
 8002f12:	2301      	movs	r3, #1
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2300      	movs	r3, #0
 8002f18:	9101      	str	r1, [sp, #4]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	f000 fc9d 	bl	800385c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8002f22:	2000      	movs	r0, #0
 8002f24:	b005      	add	sp, #20
 8002f26:	bd30      	pop	{r4, r5, pc}

08002f28 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8002f28:	b530      	push	{r4, r5, lr}
 8002f2a:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002f2c:	2400      	movs	r4, #0
{
 8002f2e:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002f30:	9202      	str	r2, [sp, #8]
 8002f32:	2201      	movs	r2, #1
 8002f34:	9101      	str	r1, [sp, #4]
 8002f36:	9403      	str	r4, [sp, #12]
 8002f38:	9200      	str	r2, [sp, #0]
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	f000 fc8d 	bl	800385c <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8002f42:	4620      	mov	r0, r4
 8002f44:	b005      	add	sp, #20
 8002f46:	bd30      	pop	{r4, r5, pc}

08002f48 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8002f48:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8002f4a:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8002f4e:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8002f50:	2d00      	cmp	r5, #0
{
 8002f52:	461c      	mov	r4, r3
 8002f54:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002f58:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8002f5a:	bf18      	it	ne
 8002f5c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002f5e:	9303      	str	r3, [sp, #12]
 8002f60:	2301      	movs	r3, #1
 8002f62:	9101      	str	r1, [sp, #4]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2302      	movs	r3, #2
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	f000 fc76 	bl	800385c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8002f70:	2000      	movs	r0, #0
 8002f72:	b005      	add	sp, #20
 8002f74:	bd30      	pop	{r4, r5, pc}

08002f76 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8002f76:	b530      	push	{r4, r5, lr}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8002f7c:	2400      	movs	r4, #0
 8002f7e:	9202      	str	r2, [sp, #8]
 8002f80:	2201      	movs	r2, #1
 8002f82:	9101      	str	r1, [sp, #4]
 8002f84:	9403      	str	r4, [sp, #12]
 8002f86:	9200      	str	r2, [sp, #0]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	f000 fc66 	bl	800385c <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8002f90:	4620      	mov	r0, r4
 8002f92:	b005      	add	sp, #20
 8002f94:	bd30      	pop	{r4, r5, pc}

08002f96 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8002f96:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8002f98:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002f9c:	9402      	str	r4, [sp, #8]
 8002f9e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8002fa2:	9401      	str	r4, [sp, #4]
 8002fa4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8002fa8:	9400      	str	r4, [sp, #0]
 8002faa:	f000 fc31 	bl	8003810 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8002fae:	2000      	movs	r0, #0
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd10      	pop	{r4, pc}

08002fb4 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8002fb4:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8002fb6:	f000 fc43 	bl	8003840 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8002fba:	2000      	movs	r0, #0
 8002fbc:	bd08      	pop	{r3, pc}

08002fbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8002fbe:	b530      	push	{r4, r5, lr}
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8002fc6:	f854 5b04 	ldr.w	r5, [r4], #4
 8002fca:	042d      	lsls	r5, r5, #16
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	d407      	bmi.n	8002fe0 <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8002fd0:	33e0      	adds	r3, #224	; 0xe0
 8002fd2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002fd6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8002fda:	b292      	uxth	r2, r2
}
 8002fdc:	b2d0      	uxtb	r0, r2
 8002fde:	bd30      	pop	{r4, r5, pc}
 8002fe0:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8002fe2:	2b0b      	cmp	r3, #11
 8002fe4:	d1ef      	bne.n	8002fc6 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8002fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fea:	e7f7      	b.n	8002fdc <USBH_AllocPipe+0x1e>

08002fec <USBH_FreePipe>:
   if(idx < 11U)
 8002fec:	290a      	cmp	r1, #10
 8002fee:	bf9f      	itttt	ls
 8002ff0:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8002ff4:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8002ff8:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8002ffc:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 8003000:	2000      	movs	r0, #0
 8003002:	4770      	bx	lr

08003004 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t received_car = 0;
uint8_t print_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003004:	b508      	push	{r3, lr}
	//if ( huart->Instance == USART3 )
	//{
	if(received_car == 64){
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_UART_RxCpltCallback+0x38>)
		HAL_GPIO_TogglePin( GPIOD, LD3_Pin);
	}
	else{
		HAL_GPIO_TogglePin( GPIOD, LD5_Pin);
 8003008:	480d      	ldr	r0, [pc, #52]	; (8003040 <HAL_UART_RxCpltCallback+0x3c>)
	if(received_car == 64){
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b40      	cmp	r3, #64	; 0x40
		HAL_GPIO_TogglePin( GPIOD, LD3_Pin);
 800300e:	bf0c      	ite	eq
 8003010:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
		HAL_GPIO_TogglePin( GPIOD, LD5_Pin);
 8003014:	f44f 4180 	movne.w	r1, #16384	; 0x4000
 8003018:	f7fd fc23 	bl	8000862 <HAL_GPIO_TogglePin>
	}

	print_flag = 1;
 800301c:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_UART_RxCpltCallback+0x40>)
	if(HAL_UART_Receive_IT( &huart3, &received_car, 1 ) == HAL_OK){
 800301e:	4907      	ldr	r1, [pc, #28]	; (800303c <HAL_UART_RxCpltCallback+0x38>)
 8003020:	4809      	ldr	r0, [pc, #36]	; (8003048 <HAL_UART_RxCpltCallback+0x44>)
	print_flag = 1;
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Receive_IT( &huart3, &received_car, 1 ) == HAL_OK){
 8003026:	f7fe fd1a 	bl	8001a5e <HAL_UART_Receive_IT>
 800302a:	b930      	cbnz	r0, 800303a <HAL_UART_RxCpltCallback+0x36>
		HAL_GPIO_TogglePin( GPIOD, LD4_Pin);
 800302c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003030:	4803      	ldr	r0, [pc, #12]	; (8003040 <HAL_UART_RxCpltCallback+0x3c>)

	}
	//}

}
 8003032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_TogglePin( GPIOD, LD4_Pin);
 8003036:	f7fd bc14 	b.w	8000862 <HAL_GPIO_TogglePin>
 800303a:	bd08      	pop	{r3, pc}
 800303c:	200000b1 	.word	0x200000b1
 8003040:	40020c00 	.word	0x40020c00
 8003044:	200000b0 	.word	0x200000b0
 8003048:	200000c8 	.word	0x200000c8

0800304c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800304c:	b530      	push	{r4, r5, lr}
 800304e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003050:	2230      	movs	r2, #48	; 0x30
 8003052:	2100      	movs	r1, #0
 8003054:	a808      	add	r0, sp, #32
 8003056:	f000 fcab 	bl	80039b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800305a:	2100      	movs	r1, #0
 800305c:	2214      	movs	r2, #20
 800305e:	a803      	add	r0, sp, #12
 8003060:	f000 fca6 	bl	80039b0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	2400      	movs	r4, #0
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <SystemClock_Config+0x90>)
 8003068:	9401      	str	r4, [sp, #4]
 800306a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <SystemClock_Config+0x94>)
 800307e:	9402      	str	r4, [sp, #8]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003092:	2301      	movs	r3, #1
 8003094:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003096:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800309a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800309c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030a0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030a2:	2308      	movs	r3, #8
 80030a4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80030a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030aa:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 80030ac:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ae:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80030b0:	2307      	movs	r3, #7
 80030b2:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b4:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030b6:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b8:	f7fe f8d4 	bl	8001264 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030bc:	230f      	movs	r3, #15
 80030be:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030c4:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030c6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030cc:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ce:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030d0:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030d2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030d4:	f7fe fa9a 	bl	800160c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80030d8:	b015      	add	sp, #84	; 0x54
 80030da:	bd30      	pop	{r4, r5, pc}
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40007000 	.word	0x40007000

080030e4 <main>:
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80030e8:	f7fd fa1a 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 80030ec:	f7ff ffae 	bl	800304c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	2214      	movs	r2, #20
 80030f2:	2100      	movs	r1, #0
 80030f4:	a807      	add	r0, sp, #28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030f6:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f000 fc5a 	bl	80039b0 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030fc:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <main+0x250>)
 80030fe:	9401      	str	r4, [sp, #4]
 8003100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003102:	488d      	ldr	r0, [pc, #564]	; (8003338 <main+0x254>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003104:	4e8d      	ldr	r6, [pc, #564]	; (800333c <main+0x258>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003106:	f042 0210 	orr.w	r2, r2, #16
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
 800310c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310e:	f002 0210 	and.w	r2, r2, #16
 8003112:	9201      	str	r2, [sp, #4]
 8003114:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003116:	9402      	str	r4, [sp, #8]
 8003118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800311a:	f042 0204 	orr.w	r2, r2, #4
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
 8003120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003122:	f002 0204 	and.w	r2, r2, #4
 8003126:	9202      	str	r2, [sp, #8]
 8003128:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800312a:	9403      	str	r4, [sp, #12]
 800312c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800312e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
 8003134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003136:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800313a:	9203      	str	r2, [sp, #12]
 800313c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	9404      	str	r4, [sp, #16]
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
 8003148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314a:	f002 0201 	and.w	r2, r2, #1
 800314e:	9204      	str	r2, [sp, #16]
 8003150:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	9405      	str	r4, [sp, #20]
 8003154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003156:	f042 0202 	orr.w	r2, r2, #2
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
 800315c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315e:	f002 0202 	and.w	r2, r2, #2
 8003162:	9205      	str	r2, [sp, #20]
 8003164:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003166:	9406      	str	r4, [sp, #24]
 8003168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316a:	f042 0208 	orr.w	r2, r2, #8
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003176:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003178:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800317a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800317c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800317e:	f7fd fb6b 	bl	8000858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003182:	2201      	movs	r2, #1
 8003184:	4611      	mov	r1, r2
 8003186:	486e      	ldr	r0, [pc, #440]	; (8003340 <main+0x25c>)
 8003188:	f7fd fb66 	bl	8000858 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800318c:	4622      	mov	r2, r4
 800318e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003192:	486c      	ldr	r0, [pc, #432]	; (8003344 <main+0x260>)
 8003194:	f7fd fb60 	bl	8000858 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003198:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800319a:	2508      	movs	r5, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800319c:	a907      	add	r1, sp, #28
 800319e:	4866      	ldr	r0, [pc, #408]	; (8003338 <main+0x254>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80031a0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a6:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80031a8:	f7fd fa76 	bl	8000698 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80031ac:	a907      	add	r1, sp, #28
 80031ae:	4864      	ldr	r0, [pc, #400]	; (8003340 <main+0x25c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031b2:	f04f 0905 	mov.w	r9, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80031b8:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80031bc:	f7fd fa6c 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80031c0:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80031c2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2502      	movs	r5, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80031c6:	485e      	ldr	r0, [pc, #376]	; (8003340 <main+0x25c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031ce:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80031d2:	f7fd fa61 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031d6:	a907      	add	r1, sp, #28
 80031d8:	485b      	ldr	r0, [pc, #364]	; (8003348 <main+0x264>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031da:	9608      	str	r6, [sp, #32]
  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031dc:	f04f 0806 	mov.w	r8, #6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = B1_Pin;
 80031e2:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031e4:	f7fd fa58 	bl	8000698 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80031e8:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80031ea:	a907      	add	r1, sp, #28
 80031ec:	4856      	ldr	r0, [pc, #344]	; (8003348 <main+0x264>)
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80031ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031f6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80031fa:	f7fd fa4d 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80031fe:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003200:	a907      	add	r1, sp, #28
 8003202:	4852      	ldr	r0, [pc, #328]	; (800334c <main+0x268>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003204:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003206:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800320a:	f7fd fa45 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800320e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003212:	a907      	add	r1, sp, #28
 8003214:	484d      	ldr	r0, [pc, #308]	; (800334c <main+0x268>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003216:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800321e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003222:	f7fd fa39 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8003226:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800322a:	a907      	add	r1, sp, #28
 800322c:	4845      	ldr	r0, [pc, #276]	; (8003344 <main+0x260>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800322e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003234:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003236:	f7fd fa2f 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 800323a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800323e:	a907      	add	r1, sp, #28
 8003240:	483f      	ldr	r0, [pc, #252]	; (8003340 <main+0x25c>)
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8003242:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003248:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800324a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800324e:	f7fd fa23 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003252:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003254:	a907      	add	r1, sp, #28
 8003256:	483b      	ldr	r0, [pc, #236]	; (8003344 <main+0x260>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003258:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800325a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800325e:	f7fd fa1b 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003262:	a907      	add	r1, sp, #28
 8003264:	4834      	ldr	r0, [pc, #208]	; (8003338 <main+0x254>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003266:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003268:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800326c:	f7fd fa14 	bl	8000698 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8003270:	4837      	ldr	r0, [pc, #220]	; (8003350 <main+0x26c>)
  hi2c1.Init.ClockSpeed = 100000;
 8003272:	4a38      	ldr	r2, [pc, #224]	; (8003354 <main+0x270>)
 8003274:	4b38      	ldr	r3, [pc, #224]	; (8003358 <main+0x274>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003276:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8003278:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800327c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8003280:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003282:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003284:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003286:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003288:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800328a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800328c:	f7fd ff3e 	bl	800110c <HAL_I2C_Init>
  hspi1.Instance = SPI1;
 8003290:	4832      	ldr	r0, [pc, #200]	; (800335c <main+0x278>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003292:	4933      	ldr	r1, [pc, #204]	; (8003360 <main+0x27c>)
  huart3.Instance = USART3;
 8003294:	4e33      	ldr	r6, [pc, #204]	; (8003364 <main+0x280>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003296:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003298:	f44f 7382 	mov.w	r3, #260	; 0x104
 800329c:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032a4:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80032a6:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032a8:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032aa:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032ac:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032ae:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032b0:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032b2:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032b4:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80032b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032b8:	f7fe fa64 	bl	8001784 <HAL_SPI_Init>
  huart3.Init.BaudRate = 115200;
 80032bc:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <main+0x284>)
  huart6.Instance = USART6;
 80032be:	4d2b      	ldr	r5, [pc, #172]	; (800336c <main+0x288>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032c0:	60b4      	str	r4, [r6, #8]
  huart3.Init.BaudRate = 115200;
 80032c2:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032c6:	f04f 080c 	mov.w	r8, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032ca:	4630      	mov	r0, r6
  huart3.Init.BaudRate = 115200;
 80032cc:	e886 0208 	stmia.w	r6, {r3, r9}
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032d0:	60f4      	str	r4, [r6, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032d2:	6134      	str	r4, [r6, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032d4:	61b4      	str	r4, [r6, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d6:	61f4      	str	r4, [r6, #28]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80032d8:	f8c6 8014 	str.w	r8, [r6, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032dc:	f7fe fb32 	bl	8001944 <HAL_UART_Init>
  huart6.Instance = USART6;
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <main+0x28c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80032e2:	60ac      	str	r4, [r5, #8]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032e4:	4628      	mov	r0, r5
  huart6.Init.BaudRate = 115200;
 80032e6:	e885 0208 	stmia.w	r5, {r3, r9}
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032ea:	60ec      	str	r4, [r5, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032ec:	612c      	str	r4, [r5, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ee:	61ac      	str	r4, [r5, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032f0:	61ec      	str	r4, [r5, #28]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80032f2:	f8c5 8014 	str.w	r8, [r5, #20]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032f6:	f7fe fb25 	bl	8001944 <HAL_UART_Init>
  MX_USB_HOST_Init();
 80032fa:	f000 f9a3 	bl	8003644 <MX_USB_HOST_Init>
  HAL_UART_Receive_IT( &huart3, &received_car, 1 );
 80032fe:	4630      	mov	r0, r6
 8003300:	463a      	mov	r2, r7
 8003302:	491c      	ldr	r1, [pc, #112]	; (8003374 <main+0x290>)
    if(print_flag == 1){
 8003304:	4c1c      	ldr	r4, [pc, #112]	; (8003378 <main+0x294>)
    	HAL_UART_Transmit(&huart6, &received_car, 1, 1000);
 8003306:	4e1b      	ldr	r6, [pc, #108]	; (8003374 <main+0x290>)
  HAL_UART_Receive_IT( &huart3, &received_car, 1 );
 8003308:	f7fe fba9 	bl	8001a5e <HAL_UART_Receive_IT>
    MX_USB_HOST_Process();
 800330c:	f000 f9ba 	bl	8003684 <MX_USB_HOST_Process>
    if(print_flag == 1){
 8003310:	7822      	ldrb	r2, [r4, #0]
 8003312:	2a01      	cmp	r2, #1
 8003314:	d107      	bne.n	8003326 <main+0x242>
    	HAL_UART_Transmit(&huart6, &received_car, 1, 1000);
 8003316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800331a:	4631      	mov	r1, r6
 800331c:	4628      	mov	r0, r5
 800331e:	f7fe fb3f 	bl	80019a0 <HAL_UART_Transmit>
    	print_flag = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_TogglePin( GPIOD, LD6_Pin);
 8003326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800332a:	4806      	ldr	r0, [pc, #24]	; (8003344 <main+0x260>)
 800332c:	f7fd fa99 	bl	8000862 <HAL_GPIO_TogglePin>
    MX_USB_HOST_Process();
 8003330:	e7ec      	b.n	800330c <main+0x228>
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40021000 	.word	0x40021000
 800333c:	10120000 	.word	0x10120000
 8003340:	40020800 	.word	0x40020800
 8003344:	40020c00 	.word	0x40020c00
 8003348:	40020000 	.word	0x40020000
 800334c:	40020400 	.word	0x40020400
 8003350:	20000108 	.word	0x20000108
 8003354:	40005400 	.word	0x40005400
 8003358:	000186a0 	.word	0x000186a0
 800335c:	2000019c 	.word	0x2000019c
 8003360:	40013000 	.word	0x40013000
 8003364:	200000c8 	.word	0x200000c8
 8003368:	40004800 	.word	0x40004800
 800336c:	2000015c 	.word	0x2000015c
 8003370:	40011400 	.word	0x40011400
 8003374:	200000b1 	.word	0x200000b1
 8003378:	200000b0 	.word	0x200000b0

0800337c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800337c:	4770      	bx	lr
	...

08003380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003380:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_MspInit+0x34>)
 8003384:	2100      	movs	r1, #0
 8003386:	9100      	str	r1, [sp, #0]
 8003388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
 8003390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003392:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003396:	9200      	str	r2, [sp, #0]
 8003398:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	9101      	str	r1, [sp, #4]
 800339c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ae:	b002      	add	sp, #8
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b8:	b530      	push	{r4, r5, lr}
 80033ba:	4604      	mov	r4, r0
 80033bc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033be:	2214      	movs	r2, #20
 80033c0:	2100      	movs	r1, #0
 80033c2:	a803      	add	r0, sp, #12
 80033c4:	f000 faf4 	bl	80039b0 <memset>
  if(hi2c->Instance==I2C1)
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_I2C_MspInit+0x64>)
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d122      	bne.n	8003416 <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d0:	4c13      	ldr	r4, [pc, #76]	; (8003420 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d2:	4814      	ldr	r0, [pc, #80]	; (8003424 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d4:	2500      	movs	r5, #0
 80033d6:	9501      	str	r5, [sp, #4]
 80033d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033da:	f043 0302 	orr.w	r3, r3, #2
 80033de:	6323      	str	r3, [r4, #48]	; 0x30
 80033e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80033ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80033ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f0:	2312      	movs	r3, #18
 80033f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f4:	2301      	movs	r3, #1
 80033f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033fa:	2304      	movs	r3, #4
 80033fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fe:	f7fd f94b 	bl	8000698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003402:	9502      	str	r5, [sp, #8]
 8003404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003406:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800340a:	6423      	str	r3, [r4, #64]	; 0x40
 800340c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800340e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003412:	9302      	str	r3, [sp, #8]
 8003414:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003416:	b009      	add	sp, #36	; 0x24
 8003418:	bd30      	pop	{r4, r5, pc}
 800341a:	bf00      	nop
 800341c:	40005400 	.word	0x40005400
 8003420:	40023800 	.word	0x40023800
 8003424:	40020400 	.word	0x40020400

08003428 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003428:	b510      	push	{r4, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342e:	2214      	movs	r2, #20
 8003430:	2100      	movs	r1, #0
 8003432:	a803      	add	r0, sp, #12
 8003434:	f000 fabc 	bl	80039b0 <memset>
  if(hspi->Instance==SPI1)
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_SPI_MspInit+0x60>)
 800343c:	429a      	cmp	r2, r3
 800343e:	d120      	bne.n	8003482 <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003440:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003444:	2100      	movs	r1, #0
 8003446:	9101      	str	r1, [sp, #4]
 8003448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	4810      	ldr	r0, [pc, #64]	; (800348c <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800344c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
 8003452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003454:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003458:	9201      	str	r2, [sp, #4]
 800345a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345c:	9102      	str	r1, [sp, #8]
 800345e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	9302      	str	r3, [sp, #8]
 800346e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003470:	23e0      	movs	r3, #224	; 0xe0
 8003472:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003474:	2302      	movs	r3, #2
 8003476:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003478:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800347a:	2305      	movs	r3, #5
 800347c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347e:	f7fd f90b 	bl	8000698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003482:	b008      	add	sp, #32
 8003484:	bd10      	pop	{r4, pc}
 8003486:	bf00      	nop
 8003488:	40013000 	.word	0x40013000
 800348c:	40020000 	.word	0x40020000

08003490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	2214      	movs	r2, #20
{
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349a:	2100      	movs	r1, #0
 800349c:	eb0d 0002 	add.w	r0, sp, r2
 80034a0:	f000 fa86 	bl	80039b0 <memset>
  if(huart->Instance==USART3)
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	4a39      	ldr	r2, [pc, #228]	; (800358c <HAL_UART_MspInit+0xfc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d147      	bne.n	800353c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034ac:	4b38      	ldr	r3, [pc, #224]	; (8003590 <HAL_UART_MspInit+0x100>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ae:	4839      	ldr	r0, [pc, #228]	; (8003594 <HAL_UART_MspInit+0x104>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80034b0:	2400      	movs	r4, #0
 80034b2:	9400      	str	r4, [sp, #0]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
 80034bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034be:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80034c2:	9200      	str	r2, [sp, #0]
 80034c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c6:	9401      	str	r4, [sp, #4]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	f042 0202 	orr.w	r2, r2, #2
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
 80034d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d2:	f002 0202 	and.w	r2, r2, #2
 80034d6:	9201      	str	r2, [sp, #4]
 80034d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034da:	9402      	str	r4, [sp, #8]
 80034dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034de:	f042 0208 	orr.w	r2, r2, #8
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	9302      	str	r3, [sp, #8]
 80034ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ee:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f6:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034fa:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fc:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003500:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003504:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003506:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003508:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350a:	f7fd f8c5 	bl	8000698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800350e:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003512:	a905      	add	r1, sp, #20
 8003514:	4820      	ldr	r0, [pc, #128]	; (8003598 <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003516:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003518:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800351c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003520:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003522:	f7fd f8b9 	bl	8000698 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003526:	2027      	movs	r0, #39	; 0x27
 8003528:	4622      	mov	r2, r4
 800352a:	4621      	mov	r1, r4
 800352c:	f7fd f84a 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003530:	2027      	movs	r0, #39	; 0x27
 8003532:	f7fd f87b 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003536:	b00a      	add	sp, #40	; 0x28
 8003538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART6)
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_UART_MspInit+0x10c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d1f9      	bne.n	8003536 <HAL_UART_MspInit+0xa6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <HAL_UART_MspInit+0x100>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003544:	4816      	ldr	r0, [pc, #88]	; (80035a0 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8003546:	2100      	movs	r1, #0
 8003548:	9103      	str	r1, [sp, #12]
 800354a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800354c:	f042 0220 	orr.w	r2, r2, #32
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
 8003552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003554:	f002 0220 	and.w	r2, r2, #32
 8003558:	9203      	str	r2, [sp, #12]
 800355a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800355c:	9104      	str	r1, [sp, #16]
 800355e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003560:	f042 0204 	orr.w	r2, r2, #4
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	9304      	str	r3, [sp, #16]
 800356e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003570:	23c0      	movs	r3, #192	; 0xc0
 8003572:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003578:	2301      	movs	r3, #1
 800357a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800357c:	2303      	movs	r3, #3
 800357e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003582:	2308      	movs	r3, #8
 8003584:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003586:	f7fd f887 	bl	8000698 <HAL_GPIO_Init>
}
 800358a:	e7d4      	b.n	8003536 <HAL_UART_MspInit+0xa6>
 800358c:	40004800 	.word	0x40004800
 8003590:	40023800 	.word	0x40023800
 8003594:	40020400 	.word	0x40020400
 8003598:	40020c00 	.word	0x40020c00
 800359c:	40011400 	.word	0x40011400
 80035a0:	40020800 	.word	0x40020800

080035a4 <NMI_Handler>:
 80035a4:	4770      	bx	lr

080035a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a6:	e7fe      	b.n	80035a6 <HardFault_Handler>

080035a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a8:	e7fe      	b.n	80035a8 <MemManage_Handler>

080035aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035aa:	e7fe      	b.n	80035aa <BusFault_Handler>

080035ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035ac:	e7fe      	b.n	80035ac <UsageFault_Handler>

080035ae <SVC_Handler>:
 80035ae:	4770      	bx	lr

080035b0 <DebugMon_Handler>:
 80035b0:	4770      	bx	lr

080035b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035b2:	4770      	bx	lr

080035b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b4:	f7fc bfce 	b.w	8000554 <HAL_IncTick>

080035b8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035b8:	4801      	ldr	r0, [pc, #4]	; (80035c0 <USART3_IRQHandler+0x8>)
 80035ba:	f7fe bab7 	b.w	8001b2c <HAL_UART_IRQHandler>
 80035be:	bf00      	nop
 80035c0:	200000c8 	.word	0x200000c8

080035c4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80035c4:	4801      	ldr	r0, [pc, #4]	; (80035cc <OTG_FS_IRQHandler+0x8>)
 80035c6:	f7fd ba49 	b.w	8000a5c <HAL_HCD_IRQHandler>
 80035ca:	bf00      	nop
 80035cc:	200005c0 	.word	0x200005c0

080035d0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80035d0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <_sbrk+0x2c>)
 80035d4:	6819      	ldr	r1, [r3, #0]
{
 80035d6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80035d8:	b909      	cbnz	r1, 80035de <_sbrk+0xe>
		heap_end = &end;
 80035da:	4909      	ldr	r1, [pc, #36]	; (8003600 <_sbrk+0x30>)
 80035dc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80035de:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80035e0:	4669      	mov	r1, sp
 80035e2:	4402      	add	r2, r0
 80035e4:	428a      	cmp	r2, r1
 80035e6:	d906      	bls.n	80035f6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80035e8:	f000 f9a8 	bl	800393c <__errno>
 80035ec:	230c      	movs	r3, #12
 80035ee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80035f6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80035f8:	bd08      	pop	{r3, pc}
 80035fa:	bf00      	nop
 80035fc:	200000b4 	.word	0x200000b4
 8003600:	20000888 	.word	0x20000888

08003604 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <SystemInit+0x18>)
 8003606:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800360a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800360e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8003620:	2904      	cmp	r1, #4
 8003622:	d00a      	beq.n	800363a <USBH_UserProcess+0x1a>
 8003624:	2905      	cmp	r1, #5
 8003626:	d004      	beq.n	8003632 <USBH_UserProcess+0x12>
 8003628:	2902      	cmp	r1, #2
 800362a:	d105      	bne.n	8003638 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <USBH_UserProcess+0x20>)
 800362e:	7019      	strb	r1, [r3, #0]
  break;
 8003630:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8003632:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <USBH_UserProcess+0x20>)
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	4770      	bx	lr
 800363a:	2201      	movs	r2, #1
 800363c:	e7fa      	b.n	8003634 <USBH_UserProcess+0x14>
 800363e:	bf00      	nop
 8003640:	200000b8 	.word	0x200000b8

08003644 <MX_USB_HOST_Init>:
{
 8003644:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8003646:	2201      	movs	r2, #1
 8003648:	490b      	ldr	r1, [pc, #44]	; (8003678 <MX_USB_HOST_Init+0x34>)
 800364a:	480c      	ldr	r0, [pc, #48]	; (800367c <MX_USB_HOST_Init+0x38>)
 800364c:	f7ff f850 	bl	80026f0 <USBH_Init>
 8003650:	b108      	cbz	r0, 8003656 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8003652:	f7ff fe93 	bl	800337c <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8003656:	490a      	ldr	r1, [pc, #40]	; (8003680 <MX_USB_HOST_Init+0x3c>)
 8003658:	4808      	ldr	r0, [pc, #32]	; (800367c <MX_USB_HOST_Init+0x38>)
 800365a:	f7ff f860 	bl	800271e <USBH_RegisterClass>
 800365e:	b108      	cbz	r0, 8003664 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8003660:	f7ff fe8c 	bl	800337c <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8003664:	4805      	ldr	r0, [pc, #20]	; (800367c <MX_USB_HOST_Init+0x38>)
 8003666:	f7ff f88d 	bl	8002784 <USBH_Start>
 800366a:	b118      	cbz	r0, 8003674 <MX_USB_HOST_Init+0x30>
}
 800366c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003670:	f7ff be84 	b.w	800337c <Error_Handler>
 8003674:	bd08      	pop	{r3, pc}
 8003676:	bf00      	nop
 8003678:	08003621 	.word	0x08003621
 800367c:	200001f4 	.word	0x200001f4
 8003680:	20000008 	.word	0x20000008

08003684 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <MX_USB_HOST_Process+0x8>)
 8003686:	f7ff b887 	b.w	8002798 <USBH_Process>
 800368a:	bf00      	nop
 800368c:	200001f4 	.word	0x200001f4

08003690 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003690:	b530      	push	{r4, r5, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003696:	2214      	movs	r2, #20
 8003698:	2100      	movs	r1, #0
 800369a:	a803      	add	r0, sp, #12
 800369c:	f000 f988 	bl	80039b0 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a6:	d135      	bne.n	8003714 <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a8:	4c1b      	ldr	r4, [pc, #108]	; (8003718 <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80036aa:	481c      	ldr	r0, [pc, #112]	; (800371c <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ac:	2500      	movs	r5, #0
 80036ae:	9501      	str	r5, [sp, #4]
 80036b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6323      	str	r3, [r4, #48]	; 0x30
 80036b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80036c2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80036c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036c8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80036ca:	f7fc ffe5 	bl	8000698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80036ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80036d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80036da:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036dc:	480f      	ldr	r0, [pc, #60]	; (800371c <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80036de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f7fc ffd8 	bl	8000698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80036e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ee:	6363      	str	r3, [r4, #52]	; 0x34
 80036f0:	9502      	str	r5, [sp, #8]
 80036f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f8:	6463      	str	r3, [r4, #68]	; 0x44
 80036fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003700:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003702:	2043      	movs	r0, #67	; 0x43
 8003704:	462a      	mov	r2, r5
 8003706:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003708:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800370a:	f7fc ff5b 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800370e:	2043      	movs	r0, #67	; 0x43
 8003710:	f7fc ff8c 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003714:	b009      	add	sp, #36	; 0x24
 8003716:	bd30      	pop	{r4, r5, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	40020000 	.word	0x40020000

08003720 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8003720:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003724:	f7ff b980 	b.w	8002a28 <USBH_LL_IncTimer>

08003728 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8003728:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800372c:	f7ff b992 	b.w	8002a54 <USBH_LL_Connect>

08003730 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8003730:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003734:	f7ff b9a2 	b.w	8002a7c <USBH_LL_Disconnect>

08003738 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003738:	4770      	bx	lr

0800373a <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 800373a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800373e:	f7ff b981 	b.w	8002a44 <USBH_LL_PortEnabled>

08003742 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8003742:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003746:	f7ff b981 	b.w	8002a4c <USBH_LL_PortDisabled>
	...

0800374c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800374c:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800374e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8003752:	2b01      	cmp	r3, #1
{
 8003754:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 8003756:	d11b      	bne.n	8003790 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8003758:	480e      	ldr	r0, [pc, #56]	; (8003794 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 800375a:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800375e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003762:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8003764:	2208      	movs	r2, #8
 8003766:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8003768:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800376a:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800376c:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 800376e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003772:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8003774:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003776:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8003778:	f7fd f8c4 	bl	8000904 <HAL_HCD_Init>
 800377c:	b108      	cbz	r0, 8003782 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800377e:	f7ff fdfd 	bl	800337c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8003782:	4804      	ldr	r0, [pc, #16]	; (8003794 <USBH_LL_Init+0x48>)
 8003784:	f7fd fcbc 	bl	8001100 <HAL_HCD_GetCurrentFrame>
 8003788:	4601      	mov	r1, r0
 800378a:	4620      	mov	r0, r4
 800378c:	f7ff f949 	bl	8002a22 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8003790:	2000      	movs	r0, #0
 8003792:	bd10      	pop	{r4, pc}
 8003794:	200005c0 	.word	0x200005c0

08003798 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8003798:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800379a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800379e:	f7fd fc79 	bl	8001094 <HAL_HCD_Start>
 80037a2:	2803      	cmp	r0, #3
 80037a4:	bf9a      	itte	ls
 80037a6:	4b02      	ldrls	r3, [pc, #8]	; (80037b0 <USBH_LL_Start+0x18>)
 80037a8:	5c18      	ldrbls	r0, [r3, r0]
 80037aa:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80037ac:	bd08      	pop	{r3, pc}
 80037ae:	bf00      	nop
 80037b0:	08003b73 	.word	0x08003b73

080037b4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80037b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 80037b6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80037ba:	f7fd fc81 	bl	80010c0 <HAL_HCD_Stop>
 80037be:	2803      	cmp	r0, #3
 80037c0:	bf9a      	itte	ls
 80037c2:	4b02      	ldrls	r3, [pc, #8]	; (80037cc <USBH_LL_Stop+0x18>)
 80037c4:	5c18      	ldrbls	r0, [r3, r0]
 80037c6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80037c8:	bd08      	pop	{r3, pc}
 80037ca:	bf00      	nop
 80037cc:	08003b73 	.word	0x08003b73

080037d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80037d0:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80037d2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80037d6:	f7fd fc96 	bl	8001106 <HAL_HCD_GetCurrentSpeed>
 80037da:	2802      	cmp	r0, #2
 80037dc:	bf9a      	itte	ls
 80037de:	4b02      	ldrls	r3, [pc, #8]	; (80037e8 <USBH_LL_GetSpeed+0x18>)
 80037e0:	5c18      	ldrbls	r0, [r3, r0]
 80037e2:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 80037e4:	bd08      	pop	{r3, pc}
 80037e6:	bf00      	nop
 80037e8:	08003b70 	.word	0x08003b70

080037ec <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80037ec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80037ee:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80037f2:	f7fd fc77 	bl	80010e4 <HAL_HCD_ResetPort>
 80037f6:	2803      	cmp	r0, #3
 80037f8:	bf9a      	itte	ls
 80037fa:	4b02      	ldrls	r3, [pc, #8]	; (8003804 <USBH_LL_ResetPort+0x18>)
 80037fc:	5c18      	ldrbls	r0, [r3, r0]
 80037fe:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003800:	bd08      	pop	{r3, pc}
 8003802:	bf00      	nop
 8003804:	08003b73 	.word	0x08003b73

08003808 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8003808:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800380c:	f7fd bc73 	b.w	80010f6 <HAL_HCD_HC_GetXferCount>

08003810 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8003812:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003816:	9402      	str	r4, [sp, #8]
 8003818:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800381c:	9401      	str	r4, [sp, #4]
 800381e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003822:	9400      	str	r4, [sp, #0]
 8003824:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003828:	f7fd f822 	bl	8000870 <HAL_HCD_HC_Init>
 800382c:	2803      	cmp	r0, #3
 800382e:	bf9a      	itte	ls
 8003830:	4b02      	ldrls	r3, [pc, #8]	; (800383c <USBH_LL_OpenPipe+0x2c>)
 8003832:	5c18      	ldrbls	r0, [r3, r0]
 8003834:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003836:	b004      	add	sp, #16
 8003838:	bd10      	pop	{r4, pc}
 800383a:	bf00      	nop
 800383c:	08003b73 	.word	0x08003b73

08003840 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8003840:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8003842:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003846:	f7fd f84b 	bl	80008e0 <HAL_HCD_HC_Halt>
 800384a:	2803      	cmp	r0, #3
 800384c:	bf9a      	itte	ls
 800384e:	4b02      	ldrls	r3, [pc, #8]	; (8003858 <USBH_LL_ClosePipe+0x18>)
 8003850:	5c18      	ldrbls	r0, [r3, r0]
 8003852:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003854:	bd08      	pop	{r3, pc}
 8003856:	bf00      	nop
 8003858:	08003b73 	.word	0x08003b73

0800385c <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800385c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800385e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8003862:	9403      	str	r4, [sp, #12]
 8003864:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003868:	9402      	str	r4, [sp, #8]
 800386a:	9c07      	ldr	r4, [sp, #28]
 800386c:	9401      	str	r4, [sp, #4]
 800386e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003872:	9400      	str	r4, [sp, #0]
 8003874:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003878:	f7fd f88e 	bl	8000998 <HAL_HCD_HC_SubmitRequest>
 800387c:	2803      	cmp	r0, #3
 800387e:	bf9a      	itte	ls
 8003880:	4b02      	ldrls	r3, [pc, #8]	; (800388c <USBH_LL_SubmitURB+0x30>)
 8003882:	5c18      	ldrbls	r0, [r3, r0]
 8003884:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8003886:	b004      	add	sp, #16
 8003888:	bd10      	pop	{r4, pc}
 800388a:	bf00      	nop
 800388c:	08003b73 	.word	0x08003b73

08003890 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8003890:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8003894:	f7fd bc29 	b.w	80010ea <HAL_HCD_HC_GetURBState>

08003898 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8003898:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800389a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d102      	bne.n	80038a8 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 80038a2:	4608      	mov	r0, r1
 80038a4:	f000 f816 	bl	80038d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80038a8:	20c8      	movs	r0, #200	; 0xc8
 80038aa:	f7fc fe65 	bl	8000578 <HAL_Delay>
  return USBH_OK;
}
 80038ae:	2000      	movs	r0, #0
 80038b0:	bd08      	pop	{r3, pc}

080038b2 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80038b2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 80038b6:	2328      	movs	r3, #40	; 0x28
 80038b8:	fb03 0101 	mla	r1, r3, r1, r0
 80038bc:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80038c0:	b11b      	cbz	r3, 80038ca <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80038c2:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80038c6:	2000      	movs	r0, #0
 80038c8:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80038ca:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 80038ce:	e7fa      	b.n	80038c6 <USBH_LL_SetToggle+0x14>

080038d0 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80038d0:	f7fc be52 	b.w	8000578 <HAL_Delay>

080038d4 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80038d4:	fab0 f280 	clz	r2, r0
 80038d8:	0952      	lsrs	r2, r2, #5
 80038da:	2101      	movs	r1, #1
 80038dc:	4801      	ldr	r0, [pc, #4]	; (80038e4 <MX_DriverVbusFS+0x10>)
 80038de:	f7fc bfbb 	b.w	8000858 <HAL_GPIO_WritePin>
 80038e2:	bf00      	nop
 80038e4:	40020800 	.word	0x40020800

080038e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038ee:	e003      	b.n	80038f8 <LoopCopyDataInit>

080038f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038f6:	3104      	adds	r1, #4

080038f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038f8:	480b      	ldr	r0, [pc, #44]	; (8003928 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003900:	d3f6      	bcc.n	80038f0 <CopyDataInit>
  ldr  r2, =_sbss
 8003902:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003904:	e002      	b.n	800390c <LoopFillZerobss>

08003906 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003906:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003908:	f842 3b04 	str.w	r3, [r2], #4

0800390c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800390e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003910:	d3f9      	bcc.n	8003906 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003912:	f7ff fe77 	bl	8003604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003916:	f000 f817 	bl	8003948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391a:	f7ff fbe3 	bl	80030e4 <main>
  bx  lr    
 800391e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003920:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003924:	08003b88 	.word	0x08003b88
  ldr  r0, =_sdata
 8003928:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800392c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8003930:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8003934:	20000888 	.word	0x20000888

08003938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003938:	e7fe      	b.n	8003938 <ADC_IRQHandler>
	...

0800393c <__errno>:
 800393c:	4b01      	ldr	r3, [pc, #4]	; (8003944 <__errno+0x8>)
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	2000002c 	.word	0x2000002c

08003948 <__libc_init_array>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	4e0d      	ldr	r6, [pc, #52]	; (8003980 <__libc_init_array+0x38>)
 800394c:	4c0d      	ldr	r4, [pc, #52]	; (8003984 <__libc_init_array+0x3c>)
 800394e:	1ba4      	subs	r4, r4, r6
 8003950:	10a4      	asrs	r4, r4, #2
 8003952:	2500      	movs	r5, #0
 8003954:	42a5      	cmp	r5, r4
 8003956:	d109      	bne.n	800396c <__libc_init_array+0x24>
 8003958:	4e0b      	ldr	r6, [pc, #44]	; (8003988 <__libc_init_array+0x40>)
 800395a:	4c0c      	ldr	r4, [pc, #48]	; (800398c <__libc_init_array+0x44>)
 800395c:	f000 f8ee 	bl	8003b3c <_init>
 8003960:	1ba4      	subs	r4, r4, r6
 8003962:	10a4      	asrs	r4, r4, #2
 8003964:	2500      	movs	r5, #0
 8003966:	42a5      	cmp	r5, r4
 8003968:	d105      	bne.n	8003976 <__libc_init_array+0x2e>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003970:	4798      	blx	r3
 8003972:	3501      	adds	r5, #1
 8003974:	e7ee      	b.n	8003954 <__libc_init_array+0xc>
 8003976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800397a:	4798      	blx	r3
 800397c:	3501      	adds	r5, #1
 800397e:	e7f2      	b.n	8003966 <__libc_init_array+0x1e>
 8003980:	08003b80 	.word	0x08003b80
 8003984:	08003b80 	.word	0x08003b80
 8003988:	08003b80 	.word	0x08003b80
 800398c:	08003b84 	.word	0x08003b84

08003990 <malloc>:
 8003990:	4b02      	ldr	r3, [pc, #8]	; (800399c <malloc+0xc>)
 8003992:	4601      	mov	r1, r0
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	f000 b861 	b.w	8003a5c <_malloc_r>
 800399a:	bf00      	nop
 800399c:	2000002c 	.word	0x2000002c

080039a0 <free>:
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <free+0xc>)
 80039a2:	4601      	mov	r1, r0
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	f000 b80b 	b.w	80039c0 <_free_r>
 80039aa:	bf00      	nop
 80039ac:	2000002c 	.word	0x2000002c

080039b0 <memset>:
 80039b0:	4402      	add	r2, r0
 80039b2:	4603      	mov	r3, r0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d100      	bne.n	80039ba <memset+0xa>
 80039b8:	4770      	bx	lr
 80039ba:	f803 1b01 	strb.w	r1, [r3], #1
 80039be:	e7f9      	b.n	80039b4 <memset+0x4>

080039c0 <_free_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4605      	mov	r5, r0
 80039c4:	2900      	cmp	r1, #0
 80039c6:	d045      	beq.n	8003a54 <_free_r+0x94>
 80039c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039cc:	1f0c      	subs	r4, r1, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	18e4      	addlt	r4, r4, r3
 80039d4:	f000 f8b0 	bl	8003b38 <__malloc_lock>
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <_free_r+0x98>)
 80039da:	6813      	ldr	r3, [r2, #0]
 80039dc:	4610      	mov	r0, r2
 80039de:	b933      	cbnz	r3, 80039ee <_free_r+0x2e>
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	6014      	str	r4, [r2, #0]
 80039e4:	4628      	mov	r0, r5
 80039e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039ea:	f000 b8a6 	b.w	8003b3a <__malloc_unlock>
 80039ee:	42a3      	cmp	r3, r4
 80039f0:	d90c      	bls.n	8003a0c <_free_r+0x4c>
 80039f2:	6821      	ldr	r1, [r4, #0]
 80039f4:	1862      	adds	r2, r4, r1
 80039f6:	4293      	cmp	r3, r2
 80039f8:	bf04      	itt	eq
 80039fa:	681a      	ldreq	r2, [r3, #0]
 80039fc:	685b      	ldreq	r3, [r3, #4]
 80039fe:	6063      	str	r3, [r4, #4]
 8003a00:	bf04      	itt	eq
 8003a02:	1852      	addeq	r2, r2, r1
 8003a04:	6022      	streq	r2, [r4, #0]
 8003a06:	6004      	str	r4, [r0, #0]
 8003a08:	e7ec      	b.n	80039e4 <_free_r+0x24>
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	b10a      	cbz	r2, 8003a14 <_free_r+0x54>
 8003a10:	42a2      	cmp	r2, r4
 8003a12:	d9fa      	bls.n	8003a0a <_free_r+0x4a>
 8003a14:	6819      	ldr	r1, [r3, #0]
 8003a16:	1858      	adds	r0, r3, r1
 8003a18:	42a0      	cmp	r0, r4
 8003a1a:	d10b      	bne.n	8003a34 <_free_r+0x74>
 8003a1c:	6820      	ldr	r0, [r4, #0]
 8003a1e:	4401      	add	r1, r0
 8003a20:	1858      	adds	r0, r3, r1
 8003a22:	4282      	cmp	r2, r0
 8003a24:	6019      	str	r1, [r3, #0]
 8003a26:	d1dd      	bne.n	80039e4 <_free_r+0x24>
 8003a28:	6810      	ldr	r0, [r2, #0]
 8003a2a:	6852      	ldr	r2, [r2, #4]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	4401      	add	r1, r0
 8003a30:	6019      	str	r1, [r3, #0]
 8003a32:	e7d7      	b.n	80039e4 <_free_r+0x24>
 8003a34:	d902      	bls.n	8003a3c <_free_r+0x7c>
 8003a36:	230c      	movs	r3, #12
 8003a38:	602b      	str	r3, [r5, #0]
 8003a3a:	e7d3      	b.n	80039e4 <_free_r+0x24>
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	1821      	adds	r1, r4, r0
 8003a40:	428a      	cmp	r2, r1
 8003a42:	bf04      	itt	eq
 8003a44:	6811      	ldreq	r1, [r2, #0]
 8003a46:	6852      	ldreq	r2, [r2, #4]
 8003a48:	6062      	str	r2, [r4, #4]
 8003a4a:	bf04      	itt	eq
 8003a4c:	1809      	addeq	r1, r1, r0
 8003a4e:	6021      	streq	r1, [r4, #0]
 8003a50:	605c      	str	r4, [r3, #4]
 8003a52:	e7c7      	b.n	80039e4 <_free_r+0x24>
 8003a54:	bd38      	pop	{r3, r4, r5, pc}
 8003a56:	bf00      	nop
 8003a58:	200000bc 	.word	0x200000bc

08003a5c <_malloc_r>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	1ccd      	adds	r5, r1, #3
 8003a60:	f025 0503 	bic.w	r5, r5, #3
 8003a64:	3508      	adds	r5, #8
 8003a66:	2d0c      	cmp	r5, #12
 8003a68:	bf38      	it	cc
 8003a6a:	250c      	movcc	r5, #12
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	4606      	mov	r6, r0
 8003a70:	db01      	blt.n	8003a76 <_malloc_r+0x1a>
 8003a72:	42a9      	cmp	r1, r5
 8003a74:	d903      	bls.n	8003a7e <_malloc_r+0x22>
 8003a76:	230c      	movs	r3, #12
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	bd70      	pop	{r4, r5, r6, pc}
 8003a7e:	f000 f85b 	bl	8003b38 <__malloc_lock>
 8003a82:	4a23      	ldr	r2, [pc, #140]	; (8003b10 <_malloc_r+0xb4>)
 8003a84:	6814      	ldr	r4, [r2, #0]
 8003a86:	4621      	mov	r1, r4
 8003a88:	b991      	cbnz	r1, 8003ab0 <_malloc_r+0x54>
 8003a8a:	4c22      	ldr	r4, [pc, #136]	; (8003b14 <_malloc_r+0xb8>)
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	b91b      	cbnz	r3, 8003a98 <_malloc_r+0x3c>
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 f841 	bl	8003b18 <_sbrk_r>
 8003a96:	6020      	str	r0, [r4, #0]
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f000 f83c 	bl	8003b18 <_sbrk_r>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d126      	bne.n	8003af2 <_malloc_r+0x96>
 8003aa4:	230c      	movs	r3, #12
 8003aa6:	6033      	str	r3, [r6, #0]
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f846 	bl	8003b3a <__malloc_unlock>
 8003aae:	e7e4      	b.n	8003a7a <_malloc_r+0x1e>
 8003ab0:	680b      	ldr	r3, [r1, #0]
 8003ab2:	1b5b      	subs	r3, r3, r5
 8003ab4:	d41a      	bmi.n	8003aec <_malloc_r+0x90>
 8003ab6:	2b0b      	cmp	r3, #11
 8003ab8:	d90f      	bls.n	8003ada <_malloc_r+0x7e>
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	50cd      	str	r5, [r1, r3]
 8003abe:	18cc      	adds	r4, r1, r3
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	f000 f83a 	bl	8003b3a <__malloc_unlock>
 8003ac6:	f104 000b 	add.w	r0, r4, #11
 8003aca:	1d23      	adds	r3, r4, #4
 8003acc:	f020 0007 	bic.w	r0, r0, #7
 8003ad0:	1ac3      	subs	r3, r0, r3
 8003ad2:	d01b      	beq.n	8003b0c <_malloc_r+0xb0>
 8003ad4:	425a      	negs	r2, r3
 8003ad6:	50e2      	str	r2, [r4, r3]
 8003ad8:	bd70      	pop	{r4, r5, r6, pc}
 8003ada:	428c      	cmp	r4, r1
 8003adc:	bf0d      	iteet	eq
 8003ade:	6863      	ldreq	r3, [r4, #4]
 8003ae0:	684b      	ldrne	r3, [r1, #4]
 8003ae2:	6063      	strne	r3, [r4, #4]
 8003ae4:	6013      	streq	r3, [r2, #0]
 8003ae6:	bf18      	it	ne
 8003ae8:	460c      	movne	r4, r1
 8003aea:	e7e9      	b.n	8003ac0 <_malloc_r+0x64>
 8003aec:	460c      	mov	r4, r1
 8003aee:	6849      	ldr	r1, [r1, #4]
 8003af0:	e7ca      	b.n	8003a88 <_malloc_r+0x2c>
 8003af2:	1cc4      	adds	r4, r0, #3
 8003af4:	f024 0403 	bic.w	r4, r4, #3
 8003af8:	42a0      	cmp	r0, r4
 8003afa:	d005      	beq.n	8003b08 <_malloc_r+0xac>
 8003afc:	1a21      	subs	r1, r4, r0
 8003afe:	4630      	mov	r0, r6
 8003b00:	f000 f80a 	bl	8003b18 <_sbrk_r>
 8003b04:	3001      	adds	r0, #1
 8003b06:	d0cd      	beq.n	8003aa4 <_malloc_r+0x48>
 8003b08:	6025      	str	r5, [r4, #0]
 8003b0a:	e7d9      	b.n	8003ac0 <_malloc_r+0x64>
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	bf00      	nop
 8003b10:	200000bc 	.word	0x200000bc
 8003b14:	200000c0 	.word	0x200000c0

08003b18 <_sbrk_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	4c06      	ldr	r4, [pc, #24]	; (8003b34 <_sbrk_r+0x1c>)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4605      	mov	r5, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	6023      	str	r3, [r4, #0]
 8003b24:	f7ff fd54 	bl	80035d0 <_sbrk>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_sbrk_r+0x1a>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_sbrk_r+0x1a>
 8003b30:	602b      	str	r3, [r5, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	20000884 	.word	0x20000884

08003b38 <__malloc_lock>:
 8003b38:	4770      	bx	lr

08003b3a <__malloc_unlock>:
 8003b3a:	4770      	bx	lr

08003b3c <_init>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr

08003b48 <_fini>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr
