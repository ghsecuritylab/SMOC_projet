
Test_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004c78  08004c78  00014c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ec  20000000  08004c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
  8 .bss          00000858  200000ec  200000ec  000200ec  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000944  20000944  000200ec  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 11 .debug_info   00021f9b  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004fc1  00000000  00000000  000420b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000dc38  00000000  00000000  00047078  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  00054cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017d0  00000000  00000000  00055eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a6a1  00000000  00000000  00057688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006c9b  00000000  00000000  00061d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000689c4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000034f8  00000000  00000000  00068a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ec 	.word	0x200000ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bd0 	.word	0x08004bd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000f0 	.word	0x200000f0
 80001c4:	08004bd0 	.word	0x08004bd0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80004d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 80004da:	2300      	movs	r3, #0
{
 80004dc:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 80004de:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004e2:	f000 fa7d 	bl	80009e0 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80004e6:	a802      	add	r0, sp, #8

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004e8:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 80004ea:	f800 4d01 	strb.w	r4, [r0, #-1]!
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004ee:	2120      	movs	r1, #32
 80004f0:	f000 fac4 	bl	8000a7c <ACCELERO_IO_Write>
}
 80004f4:	b002      	add	sp, #8
 80004f6:	bd10      	pop	{r4, pc}

080004f8 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 80004f8:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmp = 0;
 80004fa:	ac02      	add	r4, sp, #8
 80004fc:	2300      	movs	r3, #0
 80004fe:	f804 3d01 	strb.w	r3, [r4, #-1]!

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000502:	f000 fa6d 	bl	80009e0 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000506:	4620      	mov	r0, r4
 8000508:	2201      	movs	r2, #1
 800050a:	210f      	movs	r1, #15
 800050c:	f000 fad8 	bl	8000ac0 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 8000510:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000514:	b002      	add	sp, #8
 8000516:	bd10      	pop	{r4, pc}

08000518 <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 8000518:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t ctrl = 0x00;
 800051a:	ac02      	add	r4, sp, #8
 800051c:	2300      	movs	r3, #0
 800051e:	f804 3d01 	strb.w	r3, [r4, #-1]!
{
 8000522:	4605      	mov	r5, r0
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	4620      	mov	r0, r4
 8000528:	2121      	movs	r1, #33	; 0x21
 800052a:	f000 fac9 	bl	8000ac0 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 800052e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000532:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 8000536:	431d      	orrs	r5, r3
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	2121      	movs	r1, #33	; 0x21
 800053c:	4620      	mov	r0, r4
  ctrl |= FilterStruct;
 800053e:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000542:	f000 fa9b 	bl	8000a7c <ACCELERO_IO_Write>
}
 8000546:	b003      	add	sp, #12
 8000548:	bd30      	pop	{r4, r5, pc}

0800054a <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 800054a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[6], clickreg = 0;
 800054c:	a804      	add	r0, sp, #16
 800054e:	2300      	movs	r3, #0
 8000550:	f800 3d09 	strb.w	r3, [r0, #-9]!

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8000554:	2201      	movs	r2, #1
 8000556:	2139      	movs	r1, #57	; 0x39
 8000558:	f000 fab2 	bl	8000ac0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 800055c:	2206      	movs	r2, #6
 800055e:	2127      	movs	r1, #39	; 0x27
 8000560:	a802      	add	r0, sp, #8
 8000562:	f000 faad 	bl	8000ac0 <ACCELERO_IO_Read>
}
 8000566:	b005      	add	sp, #20
 8000568:	f85d fb04 	ldr.w	pc, [sp], #4

0800056c <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 800056c:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800056e:	2201      	movs	r2, #1
 8000570:	f10d 0007 	add.w	r0, sp, #7
 8000574:	2121      	movs	r1, #33	; 0x21
 8000576:	f000 faa3 	bl	8000ac0 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 800057a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800057e:	2201      	movs	r2, #1
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8000580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000584:	2121      	movs	r1, #33	; 0x21
 8000586:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 800058a:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800058e:	f000 fa75 	bl	8000a7c <ACCELERO_IO_Write>
}
 8000592:	b003      	add	sp, #12
 8000594:	f85d fb04 	ldr.w	pc, [sp], #4

08000598 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 8000598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800059a:	4604      	mov	r4, r0
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
  uint8_t crtl, i = 0x00;
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 800059c:	2201      	movs	r2, #1
 800059e:	f10d 0007 	add.w	r0, sp, #7
 80005a2:	2120      	movs	r1, #32
 80005a4:	f000 fa8c 	bl	8000ac0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80005a8:	a802      	add	r0, sp, #8
 80005aa:	2206      	movs	r2, #6
 80005ac:	2129      	movs	r1, #41	; 0x29
 80005ae:	f000 fa87 	bl	8000ac0 <ACCELERO_IO_Read>
  for(i=0; i<3; i++)
  {
    pnRawData[i] = buffer[2*i];
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 80005b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    pnRawData[i] = buffer[2*i];
 80005b6:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 80005ba:	f99d 100a 	ldrsb.w	r1, [sp, #10]
 80005be:	f99d 300c 	ldrsb.w	r3, [sp, #12]
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 80005c2:	f002 0220 	and.w	r2, r2, #32
 80005c6:	2a20      	cmp	r2, #32
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80005c8:	bf0c      	ite	eq
 80005ca:	2248      	moveq	r2, #72	; 0x48
 80005cc:	2212      	movne	r2, #18
 80005ce:	fb10 f002 	smulbb	r0, r0, r2
 80005d2:	fb11 f102 	smulbb	r1, r1, r2
 80005d6:	fb13 f302 	smulbb	r3, r3, r2
 80005da:	8020      	strh	r0, [r4, #0]
 80005dc:	8061      	strh	r1, [r4, #2]
 80005de:	80a3      	strh	r3, [r4, #4]
  }
}
 80005e0:	b004      	add	sp, #16
 80005e2:	bd10      	pop	{r4, pc}

080005e4 <LIS302DL_InterruptConfig>:
{
 80005e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t ctrl = 0x00;
 80005e6:	ac02      	add	r4, sp, #8
 80005e8:	2300      	movs	r3, #0
 80005ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
{
 80005ee:	4605      	mov	r5, r0
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	4620      	mov	r0, r4
 80005f4:	2138      	movs	r1, #56	; 0x38
 80005f6:	f000 fa63 	bl	8000ac0 <ACCELERO_IO_Read>
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 80005fa:	786a      	ldrb	r2, [r5, #1]
 80005fc:	782b      	ldrb	r3, [r5, #0]
 80005fe:	4313      	orrs	r3, r2
 8000600:	78aa      	ldrb	r2, [r5, #2]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000602:	2138      	movs	r1, #56	; 0x38
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000604:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000606:	4620      	mov	r0, r4
 8000608:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800060a:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800060e:	f000 fa35 	bl	8000a7c <ACCELERO_IO_Write>
}
 8000612:	b003      	add	sp, #12
 8000614:	bd30      	pop	{r4, r5, pc}

08000616 <LIS302DL_Click_IntConfig>:
{
 8000616:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t ctrl = 0x00;
 8000618:	2300      	movs	r3, #0
 800061a:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_ITConfig();
 800061e:	f000 fa05 	bl	8000a2c <ACCELERO_IO_ITConfig>
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 8000622:	2340      	movs	r3, #64	; 0x40
  ctrl = 0x3F;
 8000624:	ac02      	add	r4, sp, #8
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 8000626:	f88d 3004 	strb.w	r3, [sp, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 800062a:	2310      	movs	r3, #16
 800062c:	f88d 3005 	strb.w	r3, [sp, #5]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 8000630:	a801      	add	r0, sp, #4
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 8000632:	2320      	movs	r3, #32
  ctrl = 0x3F;
 8000634:	253f      	movs	r5, #63	; 0x3f
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 8000636:	f88d 3006 	strb.w	r3, [sp, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 800063a:	f7ff ffd3 	bl	80005e4 <LIS302DL_InterruptConfig>
  ctrl = 0x3F;
 800063e:	f804 5d05 	strb.w	r5, [r4, #-5]!
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	4620      	mov	r0, r4
 8000646:	2122      	movs	r1, #34	; 0x22
 8000648:	f000 fa18 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl = 0x50;
 800064c:	2350      	movs	r3, #80	; 0x50
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800064e:	4620      	mov	r0, r4
 8000650:	2201      	movs	r2, #1
 8000652:	2138      	movs	r1, #56	; 0x38
  ctrl = 0x50;
 8000654:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000658:	f000 fa10 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl = 0xAA;
 800065c:	23aa      	movs	r3, #170	; 0xaa
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 800065e:	4620      	mov	r0, r4
 8000660:	2201      	movs	r2, #1
 8000662:	213b      	movs	r1, #59	; 0x3b
  ctrl = 0xAA;
 8000664:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8000668:	f000 fa08 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl = 0x0A;
 800066c:	230a      	movs	r3, #10
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 800066e:	4620      	mov	r0, r4
 8000670:	2201      	movs	r2, #1
 8000672:	213c      	movs	r1, #60	; 0x3c
  ctrl = 0x0A;
 8000674:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8000678:	f000 fa00 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl = 0x4C;
 800067c:	234c      	movs	r3, #76	; 0x4c
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800067e:	4620      	mov	r0, r4
 8000680:	2201      	movs	r2, #1
 8000682:	2130      	movs	r1, #48	; 0x30
  ctrl = 0x4C;
 8000684:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8000688:	f000 f9f8 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl = 0x03;
 800068c:	2303      	movs	r3, #3
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800068e:	4620      	mov	r0, r4
 8000690:	2201      	movs	r2, #1
 8000692:	213d      	movs	r1, #61	; 0x3d
  ctrl = 0x03;
 8000694:	f88d 3003 	strb.w	r3, [sp, #3]
  ctrl = 0x7F;
 8000698:	267f      	movs	r6, #127	; 0x7f
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800069a:	f000 f9ef 	bl	8000a7c <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800069e:	4620      	mov	r0, r4
 80006a0:	2201      	movs	r2, #1
 80006a2:	213e      	movs	r1, #62	; 0x3e
  ctrl = 0x7F;
 80006a4:	f88d 6003 	strb.w	r6, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 80006a8:	f000 f9e8 	bl	8000a7c <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 80006ac:	2201      	movs	r2, #1
 80006ae:	4629      	mov	r1, r5
 80006b0:	4620      	mov	r0, r4
  ctrl = 0x7F;
 80006b2:	f88d 6003 	strb.w	r6, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 80006b6:	f000 f9e1 	bl	8000a7c <ACCELERO_IO_Write>
}
 80006ba:	b002      	add	sp, #8
 80006bc:	bd70      	pop	{r4, r5, r6, pc}

080006be <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 80006be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 80006c0:	ac02      	add	r4, sp, #8
  uint8_t ctrl = 0x00;
 80006c2:	2300      	movs	r3, #0
{
 80006c4:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 80006c6:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 80006ca:	f000 f989 	bl	80009e0 <ACCELERO_IO_Init>
  ctrl = (uint8_t) (InitStruct);
 80006ce:	f804 5d01 	strb.w	r5, [r4, #-1]!
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	4620      	mov	r0, r4
 80006d6:	2120      	movs	r1, #32
 80006d8:	f000 f9d0 	bl	8000a7c <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 80006dc:	0a2d      	lsrs	r5, r5, #8
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2124      	movs	r1, #36	; 0x24
 80006e2:	4620      	mov	r0, r4
  ctrl = (uint8_t) (InitStruct >> 8);
 80006e4:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80006e8:	f000 f9c8 	bl	8000a7c <ACCELERO_IO_Write>
}
 80006ec:	b003      	add	sp, #12
 80006ee:	bd30      	pop	{r4, r5, pc}

080006f0 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80006f0:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmp = 0;
 80006f2:	ac02      	add	r4, sp, #8
 80006f4:	2300      	movs	r3, #0
 80006f6:	f804 3d01 	strb.w	r3, [r4, #-1]!

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80006fa:	f000 f971 	bl	80009e0 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80006fe:	4620      	mov	r0, r4
 8000700:	2201      	movs	r2, #1
 8000702:	210f      	movs	r1, #15
 8000704:	f000 f9dc 	bl	8000ac0 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 8000708:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800070c:	b002      	add	sp, #8
 800070e:	bd10      	pop	{r4, pc}

08000710 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8000710:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000712:	2201      	movs	r2, #1
 8000714:	f10d 0007 	add.w	r0, sp, #7
 8000718:	2125      	movs	r1, #37	; 0x25
 800071a:	f000 f9d1 	bl	8000ac0 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 800071e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000722:	2201      	movs	r2, #1
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8000724:	f063 037f 	orn	r3, r3, #127	; 0x7f
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000728:	2125      	movs	r1, #37	; 0x25
 800072a:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS3DSH_BOOT_FORCED;
 800072e:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000732:	f000 f9a3 	bl	8000a7c <ACCELERO_IO_Write>
}
 8000736:	b003      	add	sp, #12
 8000738:	f85d fb04 	ldr.w	pc, [sp], #4

0800073c <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 800073c:	b530      	push	{r4, r5, lr}
 800073e:	b085      	sub	sp, #20
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
  float valueinfloat = 0;
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 8000740:	2201      	movs	r2, #1
 8000742:	2124      	movs	r1, #36	; 0x24
{
 8000744:	4605      	mov	r5, r0
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8000746:	ac02      	add	r4, sp, #8
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 8000748:	f10d 0007 	add.w	r0, sp, #7
 800074c:	f000 f9b8 	bl	8000ac0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	2128      	movs	r1, #40	; 0x28
 8000754:	4620      	mov	r0, r4
 8000756:	f000 f9b3 	bl	8000ac0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 800075a:	2201      	movs	r2, #1
 800075c:	2129      	movs	r1, #41	; 0x29
 800075e:	f10d 0009 	add.w	r0, sp, #9
 8000762:	f000 f9ad 	bl	8000ac0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	212a      	movs	r1, #42	; 0x2a
 800076a:	f10d 000a 	add.w	r0, sp, #10
 800076e:	f000 f9a7 	bl	8000ac0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	212b      	movs	r1, #43	; 0x2b
 8000776:	f10d 000b 	add.w	r0, sp, #11
 800077a:	f000 f9a1 	bl	8000ac0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 800077e:	2201      	movs	r2, #1
 8000780:	212c      	movs	r1, #44	; 0x2c
 8000782:	a803      	add	r0, sp, #12
 8000784:	f000 f99c 	bl	8000ac0 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8000788:	2201      	movs	r2, #1
 800078a:	212d      	movs	r1, #45	; 0x2d
 800078c:	f10d 000d 	add.w	r0, sp, #13
 8000790:	f000 f996 	bl	8000ac0 <ACCELERO_IO_Read>
 8000794:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800079c:	3b08      	subs	r3, #8
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b18      	cmp	r3, #24
 80007a2:	bf97      	itett	ls
 80007a4:	4a0e      	ldrls	r2, [pc, #56]	; (80007e0 <LIS3DSH_ReadACC+0xa4>)
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80007a6:	ed9f 7a0f 	vldrhi	s14, [pc, #60]	; 80007e4 <LIS3DSH_ReadACC+0xa8>
 80007aa:	eb02 0383 	addls.w	r3, r2, r3, lsl #2
 80007ae:	ed93 7a00 	vldrls	s14, [r3]
 80007b2:	2200      	movs	r2, #0
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 80007b4:	18a3      	adds	r3, r4, r2
 80007b6:	f993 1001 	ldrsb.w	r1, [r3, #1]
 80007ba:	56a3      	ldrsb	r3, [r4, r2]
 80007bc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c8:	ee67 7a87 	vmul.f32	s15, s15, s14
    pData[i] = (int16_t)valueinfloat;
 80007cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d0:	ee17 3a90 	vmov	r3, s15
 80007d4:	52ab      	strh	r3, [r5, r2]
 80007d6:	3202      	adds	r2, #2
  for(i=0; i<3; i++)
 80007d8:	2a06      	cmp	r2, #6
 80007da:	d1eb      	bne.n	80007b4 <LIS3DSH_ReadACC+0x78>
  }
}
 80007dc:	b005      	add	sp, #20
 80007de:	bd30      	pop	{r4, r5, pc}
 80007e0:	08004be8 	.word	0x08004be8
 80007e4:	3d75c28f 	.word	0x3d75c28f

080007e8 <LIS3DSH_InterruptConfig>:
{
 80007e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007ea:	7802      	ldrb	r2, [r0, #0]
 80007ec:	7843      	ldrb	r3, [r0, #1]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	7882      	ldrb	r2, [r0, #2]
 80007f2:	ad02      	add	r5, sp, #8
 80007f4:	4313      	orrs	r3, r2
 80007f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
{
 80007fa:	4604      	mov	r4, r0
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	4628      	mov	r0, r5
 8000800:	2123      	movs	r1, #35	; 0x23
 8000802:	f000 f93b 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000806:	7922      	ldrb	r2, [r4, #4]
 8000808:	78e3      	ldrb	r3, [r4, #3]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 800080a:	4628      	mov	r0, r5
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800080c:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 800080e:	2121      	movs	r1, #33	; 0x21
 8000810:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000812:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000816:	f000 f931 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 800081a:	79a2      	ldrb	r2, [r4, #6]
 800081c:	7963      	ldrb	r3, [r4, #5]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 800081e:	2122      	movs	r1, #34	; 0x22
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000820:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8000822:	4628      	mov	r0, r5
 8000824:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000826:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 800082a:	f000 f927 	bl	8000a7c <ACCELERO_IO_Write>
}
 800082e:	b003      	add	sp, #12
 8000830:	bd30      	pop	{r4, r5, pc}

08000832 <LIS3DSH_Click_IntConfig>:
{
 8000832:	b530      	push	{r4, r5, lr}
 8000834:	b085      	sub	sp, #20
  uint8_t ctrl = 0x00;
 8000836:	2400      	movs	r4, #0
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000838:	2501      	movs	r5, #1
  uint8_t ctrl = 0x00;
 800083a:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_ITConfig();
 800083e:	f000 f8f5 	bl	8000a2c <ACCELERO_IO_ITConfig>
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000842:	f88d 4009 	strb.w	r4, [sp, #9]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8000846:	f88d 4008 	strb.w	r4, [sp, #8]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 800084a:	2340      	movs	r3, #64	; 0x40
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 800084c:	f88d 400b 	strb.w	r4, [sp, #11]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8000850:	f88d 400e 	strb.w	r4, [sp, #14]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000854:	a802      	add	r0, sp, #8
  ctrl=0x03; 
 8000856:	ac04      	add	r4, sp, #16
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000858:	f88d 300a 	strb.w	r3, [sp, #10]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 800085c:	f88d 500d 	strb.w	r5, [sp, #13]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000860:	f7ff ffc2 	bl	80007e8 <LIS3DSH_InterruptConfig>
  ctrl=0x03; 
 8000864:	2303      	movs	r3, #3
 8000866:	f804 3d09 	strb.w	r3, [r4, #-9]!
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 800086a:	462a      	mov	r2, r5
 800086c:	4620      	mov	r0, r4
 800086e:	2152      	movs	r1, #82	; 0x52
 8000870:	f000 f904 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000874:	23c8      	movs	r3, #200	; 0xc8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000876:	462a      	mov	r2, r5
 8000878:	4620      	mov	r0, r4
 800087a:	2154      	movs	r1, #84	; 0x54
  ctrl=0xC8; 
 800087c:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000880:	f000 f8fc 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl=0x45; 
 8000884:	2345      	movs	r3, #69	; 0x45
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000886:	462a      	mov	r2, r5
 8000888:	4620      	mov	r0, r4
 800088a:	2156      	movs	r1, #86	; 0x56
  ctrl=0x45; 
 800088c:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000890:	f000 f8f4 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl=0xFC; 
 8000894:	23fc      	movs	r3, #252	; 0xfc
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8000896:	462a      	mov	r2, r5
 8000898:	4620      	mov	r0, r4
 800089a:	215a      	movs	r1, #90	; 0x5a
  ctrl=0xFC; 
 800089c:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80008a0:	f000 f8ec 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80008a4:	23a1      	movs	r3, #161	; 0xa1
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008a6:	462a      	mov	r2, r5
 80008a8:	4620      	mov	r0, r4
 80008aa:	215b      	movs	r1, #91	; 0x5b
  ctrl=0xA1; 
 80008ac:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008b0:	f000 f8e4 	bl	8000a7c <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008b4:	462a      	mov	r2, r5
 80008b6:	4620      	mov	r0, r4
 80008b8:	215c      	movs	r1, #92	; 0x5c
  ctrl=0x01; 
 80008ba:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008be:	f000 f8dd 	bl	8000a7c <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80008c2:	462a      	mov	r2, r5
 80008c4:	4620      	mov	r0, r4
 80008c6:	217b      	movs	r1, #123	; 0x7b
 80008c8:	f000 f8d8 	bl	8000a7c <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80008cc:	462a      	mov	r2, r5
 80008ce:	4620      	mov	r0, r4
 80008d0:	2160      	movs	r1, #96	; 0x60
 80008d2:	f000 f8d3 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl=0x06; 
 80008d6:	2306      	movs	r3, #6
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80008d8:	462a      	mov	r2, r5
 80008da:	4620      	mov	r0, r4
 80008dc:	2161      	movs	r1, #97	; 0x61
  ctrl=0x06; 
 80008de:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80008e2:	f000 f8cb 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl=0x28; 
 80008e6:	2328      	movs	r3, #40	; 0x28
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 80008e8:	462a      	mov	r2, r5
 80008ea:	4620      	mov	r0, r4
 80008ec:	2162      	movs	r1, #98	; 0x62
  ctrl=0x28; 
 80008ee:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 80008f2:	f000 f8c3 	bl	8000a7c <ACCELERO_IO_Write>
  ctrl=0x11; 
 80008f6:	2311      	movs	r3, #17
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 80008f8:	462a      	mov	r2, r5
 80008fa:	2163      	movs	r1, #99	; 0x63
 80008fc:	4620      	mov	r0, r4
  ctrl=0x11; 
 80008fe:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 8000902:	f000 f8bb 	bl	8000a7c <ACCELERO_IO_Write>
}
 8000906:	b005      	add	sp, #20
 8000908:	bd30      	pop	{r4, r5, pc}
	...

0800090c <SPIx_Init>:
  * @brief  SPIx Bus initialization
  * @param  None
  * @retval None
  */
static void SPIx_Init(void)
{
 800090c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800090e:	4c20      	ldr	r4, [pc, #128]	; (8000990 <SPIx_Init+0x84>)
{
 8000910:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000912:	4620      	mov	r0, r4
 8000914:	f001 ffbb 	bl	800288e <HAL_SPI_GetState>
 8000918:	2800      	cmp	r0, #0
 800091a:	d137      	bne.n	800098c <SPIx_Init+0x80>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <SPIx_Init+0x88>)
 800091e:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000920:	2318      	movs	r3, #24
 8000922:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 8000924:	2307      	movs	r3, #7
 8000926:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8000928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800092c:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800092e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000932:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <SPIx_Init+0x8c>)
 8000936:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8000938:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093a:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093c:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800093e:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000942:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8000944:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8000946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800094c:	645a      	str	r2, [r3, #68]	; 0x44
 800094e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000950:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000954:	9201      	str	r2, [sp, #4]
 8000956:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000958:	9002      	str	r0, [sp, #8]
 800095a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800095c:	480f      	ldr	r0, [pc, #60]	; (800099c <SPIx_Init+0x90>)
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 800096e:	23e0      	movs	r3, #224	; 0xe0
 8000970:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8000976:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8000978:	2301      	movs	r3, #1
 800097a:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800097c:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800097e:	2305      	movs	r3, #5
 8000980:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8000982:	f000 f9db 	bl	8000d3c <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000986:	4620      	mov	r0, r4
 8000988:	f001 fe3e 	bl	8002608 <HAL_SPI_Init>
}
 800098c:	b008      	add	sp, #32
 800098e:	bd10      	pop	{r4, pc}
 8000990:	20000108 	.word	0x20000108
 8000994:	40013000 	.word	0x40013000
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <SPIx_WriteRead>:
{
 80009a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 80009a2:	aa06      	add	r2, sp, #24
 80009a4:	2300      	movs	r3, #0
 80009a6:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <SPIx_WriteRead+0x38>)
{
 80009ac:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	f10d 010f 	add.w	r1, sp, #15
 80009b8:	2301      	movs	r3, #1
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <SPIx_WriteRead+0x3c>)
 80009bc:	f001 fe77 	bl	80026ae <HAL_SPI_TransmitReceive>
 80009c0:	b120      	cbz	r0, 80009cc <SPIx_WriteRead+0x2c>
  HAL_SPI_DeInit(&SpiHandle);
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <SPIx_WriteRead+0x3c>)
 80009c4:	f001 fe5d 	bl	8002682 <HAL_SPI_DeInit>
  SPIx_Init();
 80009c8:	f7ff ffa0 	bl	800090c <SPIx_Init>
}
 80009cc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80009d0:	b007      	add	sp, #28
 80009d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80009d6:	bf00      	nop
 80009d8:	20000058 	.word	0x20000058
 80009dc:	20000108 	.word	0x20000108

080009e0 <ACCELERO_IO_Init>:
  * @brief  Configures the Accelerometer SPI interface.
  * @param  None
  * @retval None
  */
void ACCELERO_IO_Init(void)
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80009e4:	2100      	movs	r1, #0
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <ACCELERO_IO_Init+0x44>)
 80009e8:	9100      	str	r1, [sp, #0]
 80009ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80009ec:	4d0e      	ldr	r5, [pc, #56]	; (8000a28 <ACCELERO_IO_Init+0x48>)
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80009ee:	f042 0210 	orr.w	r2, r2, #16
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80009f6:	9103      	str	r1, [sp, #12]
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80009f8:	f003 0310 	and.w	r3, r3, #16
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2401      	movs	r4, #1
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80009fe:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8000a00:	2608      	movs	r6, #8
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000a02:	a901      	add	r1, sp, #4
 8000a04:	4628      	mov	r0, r5
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8000a06:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8000a08:	9601      	str	r6, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8000a0c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8000a0e:	f000 f995 	bl	8000d3c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8000a12:	4622      	mov	r2, r4
 8000a14:	4631      	mov	r1, r6
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 fafe 	bl	8001018 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8000a1c:	f7ff ff76 	bl	800090c <SPIx_Init>
}
 8000a20:	b006      	add	sp, #24
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40021000 	.word	0x40021000

08000a2c <ACCELERO_IO_ITConfig>:
  *         EXTI0 is already used by user button so INT1 is not configured here.
  * @param  None
  * @retval None
  */
void ACCELERO_IO_ITConfig(void)
{
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000a30:	2400      	movs	r4, #0
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <ACCELERO_IO_ITConfig+0x44>)
 8000a34:	9400      	str	r4, [sp, #0]
 8000a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000a38:	480e      	ldr	r0, [pc, #56]	; (8000a74 <ACCELERO_IO_ITConfig+0x48>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000a3a:	f042 0210 	orr.w	r2, r2, #16
 8000a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8000a42:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <ACCELERO_IO_ITConfig+0x4c>)
 8000a44:	9202      	str	r2, [sp, #8]
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a4e:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8000a50:	2302      	movs	r3, #2
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000a52:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8000a54:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a56:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8000a58:	f000 f970 	bl	8000d3c <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8000a5c:	4622      	mov	r2, r4
 8000a5e:	210f      	movs	r1, #15
 8000a60:	2007      	movs	r0, #7
 8000a62:	f000 f901 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8000a66:	2007      	movs	r0, #7
 8000a68:	f000 f932 	bl	8000cd0 <HAL_NVIC_EnableIRQ>
}
 8000a6c:	b006      	add	sp, #24
 8000a6e:	bd10      	pop	{r4, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	10110000 	.word	0x10110000

08000a7c <ACCELERO_IO_Write>:
{
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8000a7c:	2a01      	cmp	r2, #1
{
 8000a7e:	b570      	push	{r4, r5, r6, lr}
 8000a80:	460d      	mov	r5, r1
 8000a82:	4606      	mov	r6, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000a84:	bf88      	it	hi
 8000a86:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8000a8a:	480c      	ldr	r0, [pc, #48]	; (8000abc <ACCELERO_IO_Write+0x40>)
{
 8000a8c:	4614      	mov	r4, r2
  ACCELERO_CS_LOW();
 8000a8e:	2108      	movs	r1, #8
 8000a90:	2200      	movs	r2, #0
 8000a92:	f000 fac1 	bl	8001018 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8000a96:	4628      	mov	r0, r5
 8000a98:	f7ff ff82 	bl	80009a0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8000a9c:	b934      	cbnz	r4, 8000aac <ACCELERO_IO_Write+0x30>
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2108      	movs	r1, #8
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <ACCELERO_IO_Write+0x40>)
}
 8000aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8000aa8:	f000 bab6 	b.w	8001018 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 8000aac:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 8000ab0:	3c01      	subs	r4, #1
    SPIx_WriteRead(*pBuffer);
 8000ab2:	f7ff ff75 	bl	80009a0 <SPIx_WriteRead>
    NumByteToWrite--;
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	e7f0      	b.n	8000a9c <ACCELERO_IO_Write+0x20>
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <ACCELERO_IO_Read>:
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  * @retval None
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8000ac0:	2a01      	cmp	r2, #1
{  
 8000ac2:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8000ac4:	bf8c      	ite	hi
 8000ac6:	f041 05c0 	orrhi.w	r5, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8000aca:	f041 0580 	orrls.w	r5, r1, #128	; 0x80
{  
 8000ace:	4606      	mov	r6, r0
 8000ad0:	4614      	mov	r4, r2
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8000ad2:	480c      	ldr	r0, [pc, #48]	; (8000b04 <ACCELERO_IO_Read+0x44>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	f000 fa9e 	bl	8001018 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8000adc:	4628      	mov	r0, r5
 8000ade:	f7ff ff5f 	bl	80009a0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8000ae2:	b934      	cbnz	r4, 8000af2 <ACCELERO_IO_Read+0x32>
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <ACCELERO_IO_Read+0x44>)
}
 8000aea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8000aee:	f000 ba93 	b.w	8001018 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff ff54 	bl	80009a0 <SPIx_WriteRead>
    NumByteToRead--;
 8000af8:	3c01      	subs	r4, #1
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8000afa:	f806 0b01 	strb.w	r0, [r6], #1
    NumByteToRead--;
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	e7ef      	b.n	8000ae2 <ACCELERO_IO_Read+0x22>
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <BSP_ACCELERO_Init>:
  * @brief  Setx Accelerometer Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8000b08:	b538      	push	{r3, r4, r5, lr}
  uint16_t ctrl = 0x0000;
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 8000b0a:	4c0e      	ldr	r4, [pc, #56]	; (8000b44 <BSP_ACCELERO_Init+0x3c>)
 8000b0c:	6863      	ldr	r3, [r4, #4]
 8000b0e:	4798      	blx	r3
 8000b10:	283b      	cmp	r0, #59	; 0x3b
 8000b12:	d10a      	bne.n	8000b2a <BSP_ACCELERO_Init+0x22>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 8000b14:	4d0c      	ldr	r5, [pc, #48]	; (8000b48 <BSP_ACCELERO_Init+0x40>)
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
                       lis302dl_initstruct.Axes_Enable);
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8000b16:	6823      	ldr	r3, [r4, #0]
    AcceleroDrv = &Lis302dlDrv;
 8000b18:	602c      	str	r4, [r5, #0]
    AcceleroDrv->Init(ctrl);
 8000b1a:	2047      	movs	r0, #71	; 0x47
 8000b1c:	4798      	blx	r3
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
                     lis302dl_filter.HighPassFilter_Interrupt);

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	202d      	movs	r0, #45	; 0x2d
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4798      	blx	r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
    
    ret = ACCELERO_OK;
 8000b26:	2000      	movs	r0, #0
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8000b2a:	4c08      	ldr	r4, [pc, #32]	; (8000b4c <BSP_ACCELERO_Init+0x44>)
 8000b2c:	6863      	ldr	r3, [r4, #4]
 8000b2e:	4798      	blx	r3
 8000b30:	283f      	cmp	r0, #63	; 0x3f
 8000b32:	d105      	bne.n	8000b40 <BSP_ACCELERO_Init+0x38>
    AcceleroDrv = &Lis3dshDrv;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <BSP_ACCELERO_Init+0x40>)
    AcceleroDrv->Init(ctrl);
 8000b36:	2067      	movs	r0, #103	; 0x67
    AcceleroDrv = &Lis3dshDrv;
 8000b38:	601c      	str	r4, [r3, #0]
    AcceleroDrv->Init(ctrl);
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	4798      	blx	r3
 8000b3e:	e7f2      	b.n	8000b26 <BSP_ACCELERO_Init+0x1e>
  }

  else
  {
    ret = ACCELERO_ERROR;
 8000b40:	2001      	movs	r0, #1
  }
  return ret;
}
 8000b42:	bd38      	pop	{r3, r4, r5, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000160 	.word	0x20000160
 8000b4c:	2000002c 	.word	0x2000002c

08000b50 <BSP_ACCELERO_GetXYZ>:
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8000b50:	b538      	push	{r3, r4, r5, lr}
  int16_t SwitchXY = 0;
  
  if(AcceleroDrv->GetXYZ != NULL)
 8000b52:	4d08      	ldr	r5, [pc, #32]	; (8000b74 <BSP_ACCELERO_GetXYZ+0x24>)
 8000b54:	682b      	ldr	r3, [r5, #0]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
{
 8000b58:	4604      	mov	r4, r0
  if(AcceleroDrv->GetXYZ != NULL)
 8000b5a:	b153      	cbz	r3, 8000b72 <BSP_ACCELERO_GetXYZ+0x22>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 8000b5c:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 8000b5e:	682a      	ldr	r2, [r5, #0]
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <BSP_ACCELERO_GetXYZ+0x28>)
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d105      	bne.n	8000b72 <BSP_ACCELERO_GetXYZ+0x22>
    { 
      SwitchXY  = pDataXYZ[0];
 8000b66:	f9b4 3000 	ldrsh.w	r3, [r4]
      pDataXYZ[0] = pDataXYZ[1];
 8000b6a:	8862      	ldrh	r2, [r4, #2]
 8000b6c:	8022      	strh	r2, [r4, #0]
      /* Invert Y Axis to be conpliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 8000b6e:	425b      	negs	r3, r3
 8000b70:	8063      	strh	r3, [r4, #2]
 8000b72:	bd38      	pop	{r3, r4, r5, pc}
 8000b74:	20000160 	.word	0x20000160
 8000b78:	20000000 	.word	0x20000000

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <HAL_InitTick+0x3c>)
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_InitTick+0x40>)
{
 8000b82:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	7818      	ldrb	r0, [r3, #0]
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b8e:	6810      	ldr	r0, [r2, #0]
 8000b90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b94:	f000 f8aa 	bl	8000cec <HAL_SYSTICK_Config>
 8000b98:	4604      	mov	r4, r0
 8000b9a:	b958      	cbnz	r0, 8000bb4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9c:	2d0f      	cmp	r5, #15
 8000b9e:	d809      	bhi.n	8000bb4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba8:	f000 f85e 	bl	8000c68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <HAL_InitTick+0x44>)
 8000bae:	4620      	mov	r0, r4
 8000bb0:	601d      	str	r5, [r3, #0]
 8000bb2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000bb4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
 8000bb8:	20000084 	.word	0x20000084
 8000bbc:	2000005c 	.word	0x2000005c
 8000bc0:	20000060 	.word	0x20000060

08000bc4 <HAL_Init>:
{
 8000bc4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x30>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bd6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000bde:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f82f 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff ffc8 	bl	8000b7c <HAL_InitTick>
  HAL_MspInit();
 8000bec:	f003 fbec 	bl	80043c8 <HAL_MspInit>
}
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	bd08      	pop	{r3, pc}
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bf8:	4a03      	ldr	r2, [pc, #12]	; (8000c08 <HAL_IncTick+0x10>)
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <HAL_IncTick+0x14>)
 8000bfc:	6811      	ldr	r1, [r2, #0]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	440b      	add	r3, r1
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000178 	.word	0x20000178
 8000c0c:	2000005c 	.word	0x2000005c

08000c10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c10:	4b01      	ldr	r3, [pc, #4]	; (8000c18 <HAL_GetTick+0x8>)
 8000c12:	6818      	ldr	r0, [r3, #0]
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000178 	.word	0x20000178

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b538      	push	{r3, r4, r5, lr}
 8000c1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff6 	bl	8000c10 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c24:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	bf1c      	itt	ne
 8000c28:	4b05      	ldrne	r3, [pc, #20]	; (8000c40 <HAL_Delay+0x24>)
 8000c2a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000c2e:	bf18      	it	ne
 8000c30:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c32:	f7ff ffed 	bl	8000c10 <HAL_GetTick>
 8000c36:	1b40      	subs	r0, r0, r5
 8000c38:	4284      	cmp	r4, r0
 8000c3a:	d8fa      	bhi.n	8000c32 <HAL_Delay+0x16>
  {
  }
}
 8000c3c:	bd38      	pop	{r3, r4, r5, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000005c 	.word	0x2000005c

08000c44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c4c:	041b      	lsls	r3, r3, #16
 8000c4e:	0c1b      	lsrs	r3, r3, #16
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	0200      	lsls	r0, r0, #8
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c5e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c60:	60d3      	str	r3, [r2, #12]
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6a:	b530      	push	{r4, r5, lr}
 8000c6c:	68dc      	ldr	r4, [r3, #12]
 8000c6e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c72:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	bf28      	it	cs
 8000c7c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 0501 	mov.w	r5, #1
 8000c84:	fa05 f303 	lsl.w	r3, r5, r3
 8000c88:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8c:	bf8c      	ite	hi
 8000c8e:	3c03      	subhi	r4, #3
 8000c90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c92:	4019      	ands	r1, r3
 8000c94:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c96:	fa05 f404 	lsl.w	r4, r5, r4
 8000c9a:	3c01      	subs	r4, #1
 8000c9c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	ea42 0201 	orr.w	r2, r2, r1
 8000ca4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	bfad      	iteet	ge
 8000caa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	f000 000f 	andlt.w	r0, r0, #15
 8000cb2:	4b06      	ldrlt	r3, [pc, #24]	; (8000ccc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	bfb5      	itete	lt
 8000cba:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000cc4:	bd30      	pop	{r4, r5, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	e000ed14 	.word	0xe000ed14

08000cd0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	db08      	blt.n	8000ce6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd4:	0942      	lsrs	r2, r0, #5
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f000 001f 	and.w	r0, r0, #31
 8000cdc:	fa03 f000 	lsl.w	r0, r3, r0
 8000ce0:	4b01      	ldr	r3, [pc, #4]	; (8000ce8 <HAL_NVIC_EnableIRQ+0x18>)
 8000ce2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	3801      	subs	r0, #1
 8000cee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cf2:	d20a      	bcs.n	8000d0a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	21f0      	movs	r1, #240	; 0xf0
 8000cfc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d04:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d18:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d003      	beq.n	8000d28 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000d24:	2001      	movs	r0, #1
 8000d26:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d28:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000d30:	6813      	ldr	r3, [r2, #0]
 8000d32:	f023 0301 	bic.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000d38:	2000      	movs	r0, #0
}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d40:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000ef4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d48:	4a68      	ldr	r2, [pc, #416]	; (8000eec <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000ef8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d50:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000d52:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d54:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000d56:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d58:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000d5a:	42ac      	cmp	r4, r5
 8000d5c:	f040 80b0 	bne.w	8000ec0 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d60:	684c      	ldr	r4, [r1, #4]
 8000d62:	f024 0c10 	bic.w	ip, r4, #16
 8000d66:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8000d6a:	2e01      	cmp	r6, #1
 8000d6c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000d70:	d812      	bhi.n	8000d98 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000d72:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d74:	2603      	movs	r6, #3
 8000d76:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d7a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7e:	68ce      	ldr	r6, [r1, #12]
 8000d80:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d84:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000d86:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d88:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d8a:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8e:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d92:	409e      	lsls	r6, r3
 8000d94:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000d96:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d98:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000d9a:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d9c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000da0:	43f6      	mvns	r6, r6
 8000da2:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da6:	688f      	ldr	r7, [r1, #8]
 8000da8:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dac:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db0:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000db4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db6:	d116      	bne.n	8000de6 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000db8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000dbc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000dc4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000dcc:	f04f 0c0f 	mov.w	ip, #15
 8000dd0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000dd4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	690f      	ldr	r7, [r1, #16]
 8000dda:	fa07 f70b 	lsl.w	r7, r7, fp
 8000dde:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000de2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000de6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dea:	f004 0703 	and.w	r7, r4, #3
 8000dee:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000df2:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000df6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df8:	00e6      	lsls	r6, r4, #3
 8000dfa:	d561      	bpl.n	8000ec0 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	f04f 0b00 	mov.w	fp, #0
 8000e00:	f8cd b00c 	str.w	fp, [sp, #12]
 8000e04:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e08:	4e39      	ldr	r6, [pc, #228]	; (8000ef0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000e0e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000e12:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000e16:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000e1a:	9703      	str	r7, [sp, #12]
 8000e1c:	9f03      	ldr	r7, [sp, #12]
 8000e1e:	f023 0703 	bic.w	r7, r3, #3
 8000e22:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e26:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e2a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e2e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e32:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000e36:	f04f 0e0f 	mov.w	lr, #15
 8000e3a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e40:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e44:	d043      	beq.n	8000ece <HAL_GPIO_Init+0x192>
 8000e46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e4a:	42b0      	cmp	r0, r6
 8000e4c:	d041      	beq.n	8000ed2 <HAL_GPIO_Init+0x196>
 8000e4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e52:	42b0      	cmp	r0, r6
 8000e54:	d03f      	beq.n	8000ed6 <HAL_GPIO_Init+0x19a>
 8000e56:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e5a:	42b0      	cmp	r0, r6
 8000e5c:	d03d      	beq.n	8000eda <HAL_GPIO_Init+0x19e>
 8000e5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e62:	42b0      	cmp	r0, r6
 8000e64:	d03b      	beq.n	8000ede <HAL_GPIO_Init+0x1a2>
 8000e66:	4548      	cmp	r0, r9
 8000e68:	d03b      	beq.n	8000ee2 <HAL_GPIO_Init+0x1a6>
 8000e6a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000e6e:	42b0      	cmp	r0, r6
 8000e70:	d039      	beq.n	8000ee6 <HAL_GPIO_Init+0x1aa>
 8000e72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e76:	42b0      	cmp	r0, r6
 8000e78:	bf14      	ite	ne
 8000e7a:	2608      	movne	r6, #8
 8000e7c:	2607      	moveq	r6, #7
 8000e7e:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e82:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e86:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e88:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e90:	bf0c      	ite	eq
 8000e92:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000e94:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000e96:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000e98:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	bf0c      	ite	eq
 8000ea0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000ea2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000ea4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000eac:	bf0c      	ite	eq
 8000eae:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000eb0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000eb2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000eb4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	bf54      	ite	pl
 8000eba:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000ebc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000ebe:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	2b10      	cmp	r3, #16
 8000ec4:	f47f af45 	bne.w	8000d52 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ec8:	b005      	add	sp, #20
 8000eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ece:	465e      	mov	r6, fp
 8000ed0:	e7d5      	b.n	8000e7e <HAL_GPIO_Init+0x142>
 8000ed2:	2601      	movs	r6, #1
 8000ed4:	e7d3      	b.n	8000e7e <HAL_GPIO_Init+0x142>
 8000ed6:	2602      	movs	r6, #2
 8000ed8:	e7d1      	b.n	8000e7e <HAL_GPIO_Init+0x142>
 8000eda:	2603      	movs	r6, #3
 8000edc:	e7cf      	b.n	8000e7e <HAL_GPIO_Init+0x142>
 8000ede:	2604      	movs	r6, #4
 8000ee0:	e7cd      	b.n	8000e7e <HAL_GPIO_Init+0x142>
 8000ee2:	2605      	movs	r6, #5
 8000ee4:	e7cb      	b.n	8000e7e <HAL_GPIO_Init+0x142>
 8000ee6:	2606      	movs	r6, #6
 8000ee8:	e7c9      	b.n	8000e7e <HAL_GPIO_Init+0x142>
 8000eea:	bf00      	nop
 8000eec:	40013c00 	.word	0x40013c00
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40021400 	.word	0x40021400

08000efc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000f00:	4d40      	ldr	r5, [pc, #256]	; (8001004 <HAL_GPIO_DeInit+0x108>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000f02:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800100c <HAL_GPIO_DeInit+0x110>
 8000f06:	f8df a108 	ldr.w	sl, [pc, #264]	; 8001010 <HAL_GPIO_DeInit+0x114>
 8000f0a:	f8df b108 	ldr.w	fp, [pc, #264]	; 8001014 <HAL_GPIO_DeInit+0x118>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f0e:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8000f10:	2301      	movs	r3, #1
 8000f12:	fa03 fc02 	lsl.w	ip, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8000f16:	ea0c 0401 	and.w	r4, ip, r1
    if(iocurrent == ioposition)
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d15f      	bne.n	8000fde <HAL_GPIO_DeInit+0xe2>
 8000f1e:	f022 0603 	bic.w	r6, r2, #3
 8000f22:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000f26:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000f2a:	f002 0e03 	and.w	lr, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_GPIO_DeInit+0x10c>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000f30:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000f34:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000f38:	270f      	movs	r7, #15
 8000f3a:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000f3e:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8000f40:	ea08 0807 	and.w	r8, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000f44:	d050      	beq.n	8000fe8 <HAL_GPIO_DeInit+0xec>
 8000f46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d04e      	beq.n	8000fec <HAL_GPIO_DeInit+0xf0>
 8000f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f52:	4298      	cmp	r0, r3
 8000f54:	d04c      	beq.n	8000ff0 <HAL_GPIO_DeInit+0xf4>
 8000f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f5a:	4298      	cmp	r0, r3
 8000f5c:	d04a      	beq.n	8000ff4 <HAL_GPIO_DeInit+0xf8>
 8000f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f62:	4298      	cmp	r0, r3
 8000f64:	d048      	beq.n	8000ff8 <HAL_GPIO_DeInit+0xfc>
 8000f66:	4548      	cmp	r0, r9
 8000f68:	d048      	beq.n	8000ffc <HAL_GPIO_DeInit+0x100>
 8000f6a:	4550      	cmp	r0, sl
 8000f6c:	d048      	beq.n	8001000 <HAL_GPIO_DeInit+0x104>
 8000f6e:	4558      	cmp	r0, fp
 8000f70:	bf0c      	ite	eq
 8000f72:	2307      	moveq	r3, #7
 8000f74:	2308      	movne	r3, #8
 8000f76:	fa03 f30e 	lsl.w	r3, r3, lr
 8000f7a:	4598      	cmp	r8, r3
 8000f7c:	d110      	bne.n	8000fa0 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000f7e:	682b      	ldr	r3, [r5, #0]
 8000f80:	43e4      	mvns	r4, r4
 8000f82:	4023      	ands	r3, r4
 8000f84:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000f86:	686b      	ldr	r3, [r5, #4]
 8000f88:	4023      	ands	r3, r4
 8000f8a:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000f8c:	68ab      	ldr	r3, [r5, #8]
 8000f8e:	4023      	ands	r3, r4
 8000f90:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000f92:	68eb      	ldr	r3, [r5, #12]
 8000f94:	401c      	ands	r4, r3
 8000f96:	60ec      	str	r4, [r5, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8000f98:	68b3      	ldr	r3, [r6, #8]
 8000f9a:	ea23 0707 	bic.w	r7, r3, r7
 8000f9e:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa0:	0056      	lsls	r6, r2, #1
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	6804      	ldr	r4, [r0, #0]
 8000fa6:	40b3      	lsls	r3, r6
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	401c      	ands	r4, r3
 8000fac:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fae:	08d4      	lsrs	r4, r2, #3
 8000fb0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8000fb4:	f002 0e07 	and.w	lr, r2, #7
 8000fb8:	6a26      	ldr	r6, [r4, #32]
 8000fba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000fbe:	270f      	movs	r7, #15
 8000fc0:	fa07 f70e 	lsl.w	r7, r7, lr
 8000fc4:	ea26 0707 	bic.w	r7, r6, r7
 8000fc8:	6227      	str	r7, [r4, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	68c4      	ldr	r4, [r0, #12]
 8000fcc:	401c      	ands	r4, r3
 8000fce:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	6844      	ldr	r4, [r0, #4]
 8000fd2:	ea24 040c 	bic.w	r4, r4, ip
 8000fd6:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	6884      	ldr	r4, [r0, #8]
 8000fda:	4023      	ands	r3, r4
 8000fdc:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fde:	3201      	adds	r2, #1
 8000fe0:	2a10      	cmp	r2, #16
 8000fe2:	d195      	bne.n	8000f10 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8000fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e7c4      	b.n	8000f76 <HAL_GPIO_DeInit+0x7a>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e7c2      	b.n	8000f76 <HAL_GPIO_DeInit+0x7a>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e7c0      	b.n	8000f76 <HAL_GPIO_DeInit+0x7a>
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e7be      	b.n	8000f76 <HAL_GPIO_DeInit+0x7a>
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e7bc      	b.n	8000f76 <HAL_GPIO_DeInit+0x7a>
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	e7ba      	b.n	8000f76 <HAL_GPIO_DeInit+0x7a>
 8001000:	2306      	movs	r3, #6
 8001002:	e7b8      	b.n	8000f76 <HAL_GPIO_DeInit+0x7a>
 8001004:	40013c00 	.word	0x40013c00
 8001008:	40020000 	.word	0x40020000
 800100c:	40021400 	.word	0x40021400
 8001010:	40021800 	.word	0x40021800
 8001014:	40021c00 	.word	0x40021c00

08001018 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	b10a      	cbz	r2, 800101e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800101a:	6181      	str	r1, [r0, #24]
 800101c:	4770      	bx	lr
 800101e:	0409      	lsls	r1, r1, #16
 8001020:	e7fb      	b.n	800101a <HAL_GPIO_WritePin+0x2>

08001022 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001022:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001026:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001028:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 800102c:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001030:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001034:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8001038:	2801      	cmp	r0, #1
 800103a:	d028      	beq.n	800108e <HAL_HCD_HC_Init+0x6c>
  hhcd->hc[ch_num].do_ping = 0U;
 800103c:	2028      	movs	r0, #40	; 0x28
 800103e:	fb00 4001 	mla	r0, r0, r1, r4
  __HAL_LOCK(hhcd);
 8001042:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8001044:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001046:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 800104a:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800104e:	f002 097f 	and.w	r9, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001052:	bf08      	it	eq
 8001054:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8001056:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 800105a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 800105e:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001062:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001066:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 800106a:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800106e:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8001072:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8001076:	f8cd c008 	str.w	ip, [sp, #8]
 800107a:	e88d 4080 	stmia.w	sp, {r7, lr}
 800107e:	6820      	ldr	r0, [r4, #0]
 8001080:	f001 ffc6 	bl	8003010 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001084:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8001088:	b004      	add	sp, #16
 800108a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 800108e:	2002      	movs	r0, #2
 8001090:	e7fa      	b.n	8001088 <HAL_HCD_HC_Init+0x66>

08001092 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001092:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001096:	2b01      	cmp	r3, #1
{
 8001098:	b510      	push	{r4, lr}
 800109a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800109c:	d009      	beq.n	80010b2 <HAL_HCD_HC_Halt+0x20>
 800109e:	2301      	movs	r3, #1
 80010a0:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010a4:	6800      	ldr	r0, [r0, #0]
 80010a6:	f002 f83d 	bl	8003124 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 80010b0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80010b2:	2002      	movs	r0, #2
}
 80010b4:	bd10      	pop	{r4, pc}

080010b6 <HAL_HCD_Init>:
{
 80010b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 80010ba:	4607      	mov	r7, r0
{
 80010bc:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 80010be:	2800      	cmp	r0, #0
 80010c0:	d041      	beq.n	8001146 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010c2:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 80010c6:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80010c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010cc:	b91b      	cbnz	r3, 80010d6 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 80010ce:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80010d2:	f003 fb27 	bl	8004724 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 80010de:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010e0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 80010e4:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 80010e8:	bf08      	it	eq
 80010ea:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 80010ec:	f001 fe4c 	bl	8002d88 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f2:	466d      	mov	r5, sp
 80010f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001102:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001106:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001108:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800110c:	6838      	ldr	r0, [r7, #0]
 800110e:	f001 fdf5 	bl	8002cfc <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001112:	f856 0b10 	ldr.w	r0, [r6], #16
 8001116:	2101      	movs	r1, #1
 8001118:	f001 fe3c 	bl	8002d94 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800111c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800111e:	466d      	mov	r5, sp
 8001120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001122:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001126:	e894 0003 	ldmia.w	r4, {r0, r1}
 800112a:	e885 0003 	stmia.w	r5, {r0, r1}
 800112e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001132:	6838      	ldr	r0, [r7, #0]
 8001134:	f001 feec 	bl	8002f10 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001138:	2301      	movs	r3, #1
 800113a:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  return HAL_OK;
 800113e:	2000      	movs	r0, #0
}
 8001140:	b00a      	add	sp, #40	; 0x28
 8001142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001146:	2001      	movs	r0, #1
 8001148:	e7fa      	b.n	8001140 <HAL_HCD_Init+0x8a>
	...

0800114c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800114e:	2428      	movs	r4, #40	; 0x28
 8001150:	fb04 0401 	mla	r4, r4, r1, r0
{
 8001154:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001158:	9e06      	ldr	r6, [sp, #24]
 800115a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800115e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001162:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8001166:	b96f      	cbnz	r7, 8001184 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001168:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800116a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800116c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8001170:	d02b      	beq.n	80011ca <HAL_HCD_HC_SubmitRequest+0x7e>
 8001172:	42bb      	cmp	r3, r7
 8001174:	d029      	beq.n	80011ca <HAL_HCD_HC_SubmitRequest+0x7e>
 8001176:	2b01      	cmp	r3, #1
 8001178:	d131      	bne.n	80011de <HAL_HCD_HC_SubmitRequest+0x92>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800117a:	2328      	movs	r3, #40	; 0x28
 800117c:	fb03 0301 	mla	r3, r3, r1, r0
 8001180:	2200      	movs	r2, #0
 8001182:	e02a      	b.n	80011da <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001184:	f04f 0e02 	mov.w	lr, #2
 8001188:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 800118c:	2b03      	cmp	r3, #3
 800118e:	d826      	bhi.n	80011de <HAL_HCD_HC_SubmitRequest+0x92>
 8001190:	a401      	add	r4, pc, #4	; (adr r4, 8001198 <HAL_HCD_HC_SubmitRequest+0x4c>)
 8001192:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	0800117b 	.word	0x0800117b
 80011a0:	080011cb 	.word	0x080011cb
 80011a4:	080011cb 	.word	0x080011cb
      if ((token == 1U) && (direction == 0U)) /*send data */
 80011a8:	2f01      	cmp	r7, #1
 80011aa:	d118      	bne.n	80011de <HAL_HCD_HC_SubmitRequest+0x92>
 80011ac:	b9ba      	cbnz	r2, 80011de <HAL_HCD_HC_SubmitRequest+0x92>
        if (length == 0U)
 80011ae:	b925      	cbnz	r5, 80011ba <HAL_HCD_HC_SubmitRequest+0x6e>
          hhcd->hc[ch_num].toggle_out = 1U;
 80011b0:	2328      	movs	r3, #40	; 0x28
 80011b2:	fb03 0301 	mla	r3, r3, r1, r0
 80011b6:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011ba:	2328      	movs	r3, #40	; 0x28
 80011bc:	fb03 0301 	mla	r3, r3, r1, r0
 80011c0:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80011c4:	b14a      	cbz	r2, 80011da <HAL_HCD_HC_SubmitRequest+0x8e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011c6:	2202      	movs	r2, #2
 80011c8:	e007      	b.n	80011da <HAL_HCD_HC_SubmitRequest+0x8e>
 80011ca:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011cc:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 80011d0:	b9d2      	cbnz	r2, 8001208 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80011d2:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 80011d6:	2c00      	cmp	r4, #0
 80011d8:	d1f5      	bne.n	80011c6 <HAL_HCD_HC_SubmitRequest+0x7a>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80011da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80011de:	2428      	movs	r4, #40	; 0x28
 80011e0:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80011e4:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 80011e6:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011ea:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80011ec:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 80011ee:	649d      	str	r5, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80011f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80011f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80011f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011fa:	3138      	adds	r1, #56	; 0x38
 80011fc:	7c02      	ldrb	r2, [r0, #16]
 80011fe:	6800      	ldr	r0, [r0, #0]
}
 8001200:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001204:	f001 bff2 	b.w	80031ec <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001208:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800120c:	e7da      	b.n	80011c4 <HAL_HCD_HC_SubmitRequest+0x78>
 800120e:	bf00      	nop

08001210 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001214:	6806      	ldr	r6, [r0, #0]
{
 8001216:	b087      	sub	sp, #28
 8001218:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800121a:	4630      	mov	r0, r6
 800121c:	f001 fe1a 	bl	8002e54 <USB_GetMode>
 8001220:	2801      	cmp	r0, #1
 8001222:	f040 80b4 	bne.w	800138e <HAL_HCD_IRQHandler+0x17e>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001226:	6820      	ldr	r0, [r4, #0]
 8001228:	f001 fe10 	bl	8002e4c <USB_ReadInterrupts>
 800122c:	2800      	cmp	r0, #0
 800122e:	f000 80ae 	beq.w	800138e <HAL_HCD_IRQHandler+0x17e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001232:	6820      	ldr	r0, [r4, #0]
 8001234:	f001 fe0a 	bl	8002e4c <USB_ReadInterrupts>
 8001238:	0287      	lsls	r7, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800123a:	bf48      	it	mi
 800123c:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800123e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001240:	bf44      	itt	mi
 8001242:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001246:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001248:	f001 fe00 	bl	8002e4c <USB_ReadInterrupts>
 800124c:	02c5      	lsls	r5, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800124e:	bf48      	it	mi
 8001250:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001252:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001254:	bf44      	itt	mi
 8001256:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800125a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800125c:	f001 fdf6 	bl	8002e4c <USB_ReadInterrupts>
 8001260:	0140      	lsls	r0, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001262:	bf48      	it	mi
 8001264:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001266:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001268:	bf44      	itt	mi
 800126a:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 800126e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001270:	f001 fdec 	bl	8002e4c <USB_ReadInterrupts>
 8001274:	0781      	lsls	r1, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001276:	bf48      	it	mi
 8001278:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800127a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800127c:	bf44      	itt	mi
 800127e:	2202      	movmi	r2, #2
 8001280:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001282:	f001 fde3 	bl	8002e4c <USB_ReadInterrupts>
 8001286:	0082      	lsls	r2, r0, #2
 8001288:	d510      	bpl.n	80012ac <HAL_HCD_IRQHandler+0x9c>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800128a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 800128e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001292:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001296:	4620      	mov	r0, r4
 8001298:	f003 fa94 	bl	80047c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800129c:	2101      	movs	r1, #1
 800129e:	6820      	ldr	r0, [r4, #0]
 80012a0:	f001 fddc 	bl	8002e5c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80012ac:	6820      	ldr	r0, [r4, #0]
 80012ae:	f001 fdcd 	bl	8002e4c <USB_ReadInterrupts>
 80012b2:	01c3      	lsls	r3, r0, #7
 80012b4:	d542      	bpl.n	800133c <HAL_HCD_IRQHandler+0x12c>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80012b6:	6825      	ldr	r5, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80012b8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80012bc:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 80012be:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80012c2:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80012c4:	9b05      	ldr	r3, [sp, #20]
 80012c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80012ca:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80012cc:	9b04      	ldr	r3, [sp, #16]
 80012ce:	079f      	lsls	r7, r3, #30
 80012d0:	d50d      	bpl.n	80012ee <HAL_HCD_IRQHandler+0xde>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80012d2:	9b04      	ldr	r3, [sp, #16]
 80012d4:	07d8      	lsls	r0, r3, #31
 80012d6:	d506      	bpl.n	80012e6 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80012d8:	69ab      	ldr	r3, [r5, #24]
 80012da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80012de:	61ab      	str	r3, [r5, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80012e0:	4620      	mov	r0, r4
 80012e2:	f003 fa6b 	bl	80047bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80012e6:	9b05      	ldr	r3, [sp, #20]
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80012ee:	9b04      	ldr	r3, [sp, #16]
 80012f0:	0719      	lsls	r1, r3, #28
 80012f2:	d519      	bpl.n	8001328 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80012f4:	9b05      	ldr	r3, [sp, #20]
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80012fc:	9b04      	ldr	r3, [sp, #16]
 80012fe:	075a      	lsls	r2, r3, #29
 8001300:	d550      	bpl.n	80013a4 <HAL_HCD_IRQHandler+0x194>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001302:	69a1      	ldr	r1, [r4, #24]
 8001304:	2902      	cmp	r1, #2
 8001306:	d145      	bne.n	8001394 <HAL_HCD_IRQHandler+0x184>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001308:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800130a:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800130c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001314:	bf18      	it	ne
 8001316:	2101      	movne	r1, #1
 8001318:	f001 fda0 	bl	8002e5c <USB_InitFSLSPClkSel>
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800131c:	4620      	mov	r0, r4
 800131e:	f003 fa56 	bl	80047ce <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001322:	4620      	mov	r0, r4
 8001324:	f003 fa4a 	bl	80047bc <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001328:	9b04      	ldr	r3, [sp, #16]
 800132a:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800132c:	bf42      	ittt	mi
 800132e:	9b05      	ldrmi	r3, [sp, #20]
 8001330:	f043 0320 	orrmi.w	r3, r3, #32
 8001334:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001336:	9b05      	ldr	r3, [sp, #20]
 8001338:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800133c:	6820      	ldr	r0, [r4, #0]
 800133e:	f001 fd85 	bl	8002e4c <USB_ReadInterrupts>
 8001342:	0707      	lsls	r7, r0, #28
 8001344:	d505      	bpl.n	8001352 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8001346:	4620      	mov	r0, r4
 8001348:	f003 fa34 	bl	80047b4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	2208      	movs	r2, #8
 8001350:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001352:	6820      	ldr	r0, [r4, #0]
 8001354:	f001 fd7a 	bl	8002e4c <USB_ReadInterrupts>
 8001358:	0185      	lsls	r5, r0, #6
 800135a:	d512      	bpl.n	8001382 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800135c:	6820      	ldr	r0, [r4, #0]
 800135e:	f001 fedc 	bl	800311a <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001362:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001366:	9001      	str	r0, [sp, #4]
 8001368:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800136c:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800136e:	f04f 0902 	mov.w	r9, #2
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001372:	46d3      	mov	fp, sl
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001374:	68a3      	ldr	r3, [r4, #8]
 8001376:	459a      	cmp	sl, r3
 8001378:	d323      	bcc.n	80013c2 <HAL_HCD_IRQHandler+0x1b2>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001380:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001382:	6820      	ldr	r0, [r4, #0]
 8001384:	f001 fd62 	bl	8002e4c <USB_ReadInterrupts>
 8001388:	06c3      	lsls	r3, r0, #27
 800138a:	f100 8220 	bmi.w	80017ce <HAL_HCD_IRQHandler+0x5be>
}
 800138e:	b007      	add	sp, #28
 8001390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001394:	68e3      	ldr	r3, [r4, #12]
 8001396:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8001398:	bf04      	itt	eq
 800139a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 800139e:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 80013a2:	e7bb      	b.n	800131c <HAL_HCD_IRQHandler+0x10c>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80013a4:	4620      	mov	r0, r4
 80013a6:	f003 fa16 	bl	80047d6 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80013aa:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80013ae:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80013b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80013b4:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80013b8:	6993      	ldr	r3, [r2, #24]
 80013ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	e7b2      	b.n	8001328 <HAL_HCD_IRQHandler+0x118>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80013c2:	9a01      	ldr	r2, [sp, #4]
 80013c4:	f00a 030f 	and.w	r3, sl, #15
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	07d8      	lsls	r0, r3, #31
 80013ce:	f140 808a 	bpl.w	80014e6 <HAL_HCD_IRQHandler+0x2d6>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80013d2:	f8d8 3000 	ldr.w	r3, [r8]
 80013d6:	6820      	ldr	r0, [r4, #0]
 80013d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80013dc:	fa5f f58a 	uxtb.w	r5, sl
 80013e0:	f000 8104 	beq.w	80015ec <HAL_HCD_IRQHandler+0x3dc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013e4:	016a      	lsls	r2, r5, #5
 80013e6:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 80013ea:	18d6      	adds	r6, r2, r3
 80013ec:	68b1      	ldr	r1, [r6, #8]
 80013ee:	0749      	lsls	r1, r1, #29
 80013f0:	d513      	bpl.n	800141a <HAL_HCD_IRQHandler+0x20a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013f2:	2104      	movs	r1, #4
 80013f4:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013f6:	68f1      	ldr	r1, [r6, #12]
 80013f8:	f041 0102 	orr.w	r1, r1, #2
 80013fc:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80013fe:	68b1      	ldr	r1, [r6, #8]
 8001400:	0589      	lsls	r1, r1, #22
 8001402:	d542      	bpl.n	800148a <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001404:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001406:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800140e:	4629      	mov	r1, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001410:	f001 fe88 	bl	8003124 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001418:	e0c7      	b.n	80015aa <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800141a:	68b1      	ldr	r1, [r6, #8]
 800141c:	0689      	lsls	r1, r1, #26
 800141e:	d502      	bpl.n	8001426 <HAL_HCD_IRQHandler+0x216>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001420:	2120      	movs	r1, #32
 8001422:	60b1      	str	r1, [r6, #8]
 8001424:	e7eb      	b.n	80013fe <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001426:	68b1      	ldr	r1, [r6, #8]
 8001428:	0709      	lsls	r1, r1, #28
 800142a:	d515      	bpl.n	8001458 <HAL_HCD_IRQHandler+0x248>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800142c:	68f1      	ldr	r1, [r6, #12]
 800142e:	9303      	str	r3, [sp, #12]
 8001430:	f041 0102 	orr.w	r1, r1, #2
 8001434:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001436:	fb07 4105 	mla	r1, r7, r5, r4
 800143a:	f04f 0e05 	mov.w	lr, #5
 800143e:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001442:	2110      	movs	r1, #16
 8001444:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001446:	2108      	movs	r1, #8
 8001448:	60b1      	str	r1, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800144a:	4629      	mov	r1, r5
 800144c:	9202      	str	r2, [sp, #8]
 800144e:	f001 fe69 	bl	8003124 <USB_HC_Halt>
 8001452:	9a02      	ldr	r2, [sp, #8]
 8001454:	9b03      	ldr	r3, [sp, #12]
 8001456:	e7d2      	b.n	80013fe <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001458:	68b1      	ldr	r1, [r6, #8]
 800145a:	0549      	lsls	r1, r1, #21
 800145c:	d5cf      	bpl.n	80013fe <HAL_HCD_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800145e:	68f1      	ldr	r1, [r6, #12]
 8001460:	9303      	str	r3, [sp, #12]
 8001462:	f041 0102 	orr.w	r1, r1, #2
 8001466:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001468:	4629      	mov	r1, r5
 800146a:	9202      	str	r2, [sp, #8]
 800146c:	f001 fe5a 	bl	8003124 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001470:	2110      	movs	r1, #16
 8001472:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001474:	fb07 4105 	mla	r1, r7, r5, r4
 8001478:	2008      	movs	r0, #8
 800147a:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800147e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001482:	60b1      	str	r1, [r6, #8]
 8001484:	9b03      	ldr	r3, [sp, #12]
 8001486:	9a02      	ldr	r2, [sp, #8]
 8001488:	e7b9      	b.n	80013fe <HAL_HCD_IRQHandler+0x1ee>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800148a:	68b1      	ldr	r1, [r6, #8]
 800148c:	07c8      	lsls	r0, r1, #31
 800148e:	d53d      	bpl.n	800150c <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 8001490:	6921      	ldr	r1, [r4, #16]
 8001492:	b149      	cbz	r1, 80014a8 <HAL_HCD_IRQHandler+0x298>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001494:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001498:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800149a:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800149e:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80014a2:	1a09      	subs	r1, r1, r0
 80014a4:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 80014a8:	fb07 4e05 	mla	lr, r7, r5, r4
 80014ac:	2001      	movs	r0, #1
 80014ae:	f88e 005d 	strb.w	r0, [lr, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014b2:	f8ce b058 	str.w	fp, [lr, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80014b6:	60b0      	str	r0, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80014b8:	f89e 103f 	ldrb.w	r1, [lr, #63]	; 0x3f
 80014bc:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80014c0:	d116      	bne.n	80014f0 <HAL_HCD_IRQHandler+0x2e0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014c2:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014c4:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014cc:	4629      	mov	r1, r5
 80014ce:	f001 fe29 	bl	8003124 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014d2:	2310      	movs	r3, #16
 80014d4:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80014d6:	fb07 4505 	mla	r5, r7, r5, r4
 80014da:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80014de:	f083 0301 	eor.w	r3, r3, #1
 80014e2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80014e6:	f10a 0a01 	add.w	sl, sl, #1
 80014ea:	f108 0820 	add.w	r8, r8, #32
 80014ee:	e741      	b.n	8001374 <HAL_HCD_IRQHandler+0x164>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80014f0:	2903      	cmp	r1, #3
 80014f2:	d1f0      	bne.n	80014d6 <HAL_HCD_IRQHandler+0x2c6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80014f4:	58d1      	ldr	r1, [r2, r3]
 80014f6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80014fa:	50d1      	str	r1, [r2, r3]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80014fc:	f88e 005c 	strb.w	r0, [lr, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001500:	4602      	mov	r2, r0
 8001502:	4629      	mov	r1, r5
 8001504:	4620      	mov	r0, r4
 8001506:	f003 f961 	bl	80047cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800150a:	e7e4      	b.n	80014d6 <HAL_HCD_IRQHandler+0x2c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800150c:	68b1      	ldr	r1, [r6, #8]
 800150e:	0789      	lsls	r1, r1, #30
 8001510:	d536      	bpl.n	8001580 <HAL_HCD_IRQHandler+0x370>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001512:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001514:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001518:	f021 0102 	bic.w	r1, r1, #2
 800151c:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800151e:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001522:	2901      	cmp	r1, #1
 8001524:	d10c      	bne.n	8001540 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001526:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800152a:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800152e:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001532:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001536:	4629      	mov	r1, r5
 8001538:	4620      	mov	r0, r4
 800153a:	f003 f947 	bl	80047cc <HAL_HCD_HC_NotifyURBChange_Callback>
 800153e:	e7d2      	b.n	80014e6 <HAL_HCD_IRQHandler+0x2d6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001540:	2905      	cmp	r1, #5
 8001542:	d0f0      	beq.n	8001526 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001544:	2906      	cmp	r1, #6
 8001546:	d001      	beq.n	800154c <HAL_HCD_IRQHandler+0x33c>
 8001548:	2908      	cmp	r1, #8
 800154a:	d114      	bne.n	8001576 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].ErrCnt++;
 800154c:	fb07 4105 	mla	r1, r7, r5, r4
 8001550:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001552:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001554:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001556:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001558:	bf83      	ittte	hi
 800155a:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 800155c:	f8c1 b058 	strhi.w	fp, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001560:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001564:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001568:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800156a:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800156e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001572:	50d1      	str	r1, [r2, r3]
 8001574:	e7d9      	b.n	800152a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001576:	2903      	cmp	r1, #3
 8001578:	d1d7      	bne.n	800152a <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800157a:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 800157e:	e7f3      	b.n	8001568 <HAL_HCD_IRQHandler+0x358>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001580:	68b1      	ldr	r1, [r6, #8]
 8001582:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8001586:	d012      	beq.n	80015ae <HAL_HCD_IRQHandler+0x39e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001588:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800158a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001592:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001596:	4629      	mov	r1, r5
    hhcd->hc[ch_num].ErrCnt++;
 8001598:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800159a:	3201      	adds	r2, #1
 800159c:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 800159e:	2206      	movs	r2, #6
 80015a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015a4:	f001 fdbe 	bl	8003124 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	60b3      	str	r3, [r6, #8]
 80015ac:	e79b      	b.n	80014e6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80015ae:	68b3      	ldr	r3, [r6, #8]
 80015b0:	06da      	lsls	r2, r3, #27
 80015b2:	d598      	bpl.n	80014e6 <HAL_HCD_IRQHandler+0x2d6>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80015b4:	fb07 4205 	mla	r2, r7, r5, r4
 80015b8:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d10a      	bne.n	80015d6 <HAL_HCD_IRQHandler+0x3c6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015c0:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015c2:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c4:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015c6:	f043 0302 	orr.w	r3, r3, #2
 80015ca:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015cc:	4629      	mov	r1, r5
 80015ce:	f001 fda9 	bl	8003124 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015d2:	2310      	movs	r3, #16
 80015d4:	e7e9      	b.n	80015aa <HAL_HCD_IRQHandler+0x39a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80015d6:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80015da:	d1fa      	bne.n	80015d2 <HAL_HCD_IRQHandler+0x3c2>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 80015de:	6923      	ldr	r3, [r4, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f6      	bne.n	80015d2 <HAL_HCD_IRQHandler+0x3c2>
        hhcd->hc[ch_num].state = HC_NAK;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 80015ea:	e7ea      	b.n	80015c2 <HAL_HCD_IRQHandler+0x3b2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80015ec:	0169      	lsls	r1, r5, #5
 80015ee:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 80015f2:	188e      	adds	r6, r1, r2
 80015f4:	68b3      	ldr	r3, [r6, #8]
 80015f6:	f013 0e04 	ands.w	lr, r3, #4
 80015fa:	d006      	beq.n	800160a <HAL_HCD_IRQHandler+0x3fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80015fc:	2304      	movs	r3, #4
 80015fe:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001600:	68f3      	ldr	r3, [r6, #12]
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	60f3      	str	r3, [r6, #12]
 8001608:	e76d      	b.n	80014e6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800160a:	68b3      	ldr	r3, [r6, #8]
 800160c:	f013 0320 	ands.w	r3, r3, #32
 8001610:	d014      	beq.n	800163c <HAL_HCD_IRQHandler+0x42c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001612:	2320      	movs	r3, #32
 8001614:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001616:	fb07 4305 	mla	r3, r7, r5, r4
 800161a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800161e:	2a01      	cmp	r2, #1
 8001620:	f47f af61 	bne.w	80014e6 <HAL_HCD_IRQHandler+0x2d6>
      hhcd->hc[ch_num].do_ping = 0U;
 8001624:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001628:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800162c:	68f3      	ldr	r3, [r6, #12]
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001634:	4629      	mov	r1, r5
 8001636:	f001 fd75 	bl	8003124 <USB_HC_Halt>
 800163a:	e754      	b.n	80014e6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800163c:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8001640:	f01e 0f40 	tst.w	lr, #64	; 0x40
 8001644:	d011      	beq.n	800166a <HAL_HCD_IRQHandler+0x45a>
    hhcd->hc[ch_num].state = HC_NYET;
 8001646:	fb07 4205 	mla	r2, r7, r5, r4
 800164a:	2104      	movs	r1, #4
 800164c:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8001650:	2101      	movs	r1, #1
 8001652:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001656:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001658:	68f3      	ldr	r3, [r6, #12]
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001660:	4629      	mov	r1, r5
 8001662:	f001 fd5f 	bl	8003124 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001666:	2340      	movs	r3, #64	; 0x40
 8001668:	e79f      	b.n	80015aa <HAL_HCD_IRQHandler+0x39a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800166a:	68b3      	ldr	r3, [r6, #8]
 800166c:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 8001670:	d005      	beq.n	800167e <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001672:	68f3      	ldr	r3, [r6, #12]
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800167a:	4629      	mov	r1, r5
 800167c:	e6c8      	b.n	8001410 <HAL_HCD_IRQHandler+0x200>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800167e:	68b3      	ldr	r3, [r6, #8]
 8001680:	07db      	lsls	r3, r3, #31
 8001682:	d511      	bpl.n	80016a8 <HAL_HCD_IRQHandler+0x498>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001684:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001686:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800168a:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800168e:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001692:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001694:	60f2      	str	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001696:	9302      	str	r3, [sp, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001698:	f001 fd44 	bl	8003124 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XFRC;
 800169c:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800169e:	2201      	movs	r2, #1
 80016a0:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80016a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80016a6:	e71e      	b.n	80014e6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80016a8:	68b3      	ldr	r3, [r6, #8]
 80016aa:	071b      	lsls	r3, r3, #28
 80016ac:	d50e      	bpl.n	80016cc <HAL_HCD_IRQHandler+0x4bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80016ae:	2308      	movs	r3, #8
 80016b0:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016b2:	68f3      	ldr	r3, [r6, #12]
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ba:	4629      	mov	r1, r5
 80016bc:	f001 fd32 	bl	8003124 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80016c0:	fb07 4505 	mla	r5, r7, r5, r4
 80016c4:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80016c6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80016ca:	e70c      	b.n	80014e6 <HAL_HCD_IRQHandler+0x2d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80016cc:	68b3      	ldr	r3, [r6, #8]
 80016ce:	06db      	lsls	r3, r3, #27
 80016d0:	d515      	bpl.n	80016fe <HAL_HCD_IRQHandler+0x4ee>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016d2:	fb07 4305 	mla	r3, r7, r5, r4
    hhcd->hc[ch_num].state = HC_NAK;
 80016d6:	2203      	movs	r2, #3
 80016d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80016dc:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016e0:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 80016e4:	b92a      	cbnz	r2, 80016f2 <HAL_HCD_IRQHandler+0x4e2>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80016e6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80016ea:	b912      	cbnz	r2, 80016f2 <HAL_HCD_IRQHandler+0x4e2>
        hhcd->hc[ch_num].do_ping = 1U;
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016f2:	68f3      	ldr	r3, [r6, #12]
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016fa:	4629      	mov	r1, r5
 80016fc:	e767      	b.n	80015ce <HAL_HCD_IRQHandler+0x3be>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80016fe:	68b3      	ldr	r3, [r6, #8]
 8001700:	061b      	lsls	r3, r3, #24
 8001702:	d50c      	bpl.n	800171e <HAL_HCD_IRQHandler+0x50e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001704:	68f3      	ldr	r3, [r6, #12]
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800170c:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 800170e:	fb07 4505 	mla	r5, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001712:	f001 fd07 	bl	8003124 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001716:	2306      	movs	r3, #6
 8001718:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800171c:	e744      	b.n	80015a8 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800171e:	68b3      	ldr	r3, [r6, #8]
 8001720:	055b      	lsls	r3, r3, #21
 8001722:	d50f      	bpl.n	8001744 <HAL_HCD_IRQHandler+0x534>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001724:	68f3      	ldr	r3, [r6, #12]
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800172c:	4629      	mov	r1, r5
 800172e:	f001 fcf9 	bl	8003124 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001732:	2310      	movs	r3, #16
 8001734:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173a:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800173c:	fb07 4505 	mla	r5, r7, r5, r4
 8001740:	2308      	movs	r3, #8
 8001742:	e7c0      	b.n	80016c6 <HAL_HCD_IRQHandler+0x4b6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001744:	68b3      	ldr	r3, [r6, #8]
 8001746:	0798      	lsls	r0, r3, #30
 8001748:	f57f aecd 	bpl.w	80014e6 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800174c:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800174e:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001752:	f023 0302 	bic.w	r3, r3, #2
 8001756:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001758:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10e      	bne.n	800177e <HAL_HCD_IRQHandler+0x56e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001760:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001764:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001768:	3b02      	subs	r3, #2
 800176a:	2b01      	cmp	r3, #1
 800176c:	f63f aedd 	bhi.w	800152a <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001770:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001774:	f083 0301 	eor.w	r3, r3, #1
 8001778:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 800177c:	e6d5      	b.n	800152a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800177e:	2b03      	cmp	r3, #3
 8001780:	d102      	bne.n	8001788 <HAL_HCD_IRQHandler+0x578>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001782:	f880 905c 	strb.w	r9, [r0, #92]	; 0x5c
 8001786:	e6d0      	b.n	800152a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001788:	2b04      	cmp	r3, #4
 800178a:	d0fa      	beq.n	8001782 <HAL_HCD_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800178c:	2b05      	cmp	r3, #5
 800178e:	d102      	bne.n	8001796 <HAL_HCD_IRQHandler+0x586>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001790:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001794:	e6c9      	b.n	800152a <HAL_HCD_IRQHandler+0x31a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001796:	2b06      	cmp	r3, #6
 8001798:	d002      	beq.n	80017a0 <HAL_HCD_IRQHandler+0x590>
 800179a:	2b08      	cmp	r3, #8
 800179c:	f47f aec5 	bne.w	800152a <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 80017a0:	fb07 4005 	mla	r0, r7, r5, r4
 80017a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80017a6:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80017a8:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 80017aa:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80017ac:	bf84      	itt	hi
 80017ae:	2304      	movhi	r3, #4
 80017b0:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80017b4:	588b      	ldr	r3, [r1, r2]
        hhcd->hc[ch_num].ErrCnt = 0U;
 80017b6:	bf88      	it	hi
 80017b8:	f8c0 b058 	strhi.w	fp, [r0, #88]	; 0x58
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80017bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80017c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80017c4:	bf98      	it	ls
 80017c6:	f880 905c 	strbls.w	r9, [r0, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80017ca:	508b      	str	r3, [r1, r2]
 80017cc:	e6ad      	b.n	800152a <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017ce:	6826      	ldr	r6, [r4, #0]
 80017d0:	69b3      	ldr	r3, [r6, #24]
 80017d2:	f023 0310 	bic.w	r3, r3, #16
 80017d6:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 80017d8:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80017da:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 80017de:	2a02      	cmp	r2, #2
 80017e0:	d129      	bne.n	8001836 <HAL_HCD_IRQHandler+0x626>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017e2:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80017e6:	f1b8 0f00 	cmp.w	r8, #0
 80017ea:	d024      	beq.n	8001836 <HAL_HCD_IRQHandler+0x626>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80017ec:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80017f0:	2728      	movs	r7, #40	; 0x28
 80017f2:	fb07 4705 	mla	r7, r7, r5, r4
 80017f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80017f8:	b1e9      	cbz	r1, 8001836 <HAL_HCD_IRQHandler+0x626>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80017fa:	4642      	mov	r2, r8
 80017fc:	4630      	mov	r0, r6
 80017fe:	f001 fb17 	bl	8002e30 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001804:	4443      	add	r3, r8
 8001806:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800180a:	4443      	add	r3, r8
 800180c:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800180e:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
 8001812:	016b      	lsls	r3, r5, #5
 8001814:	199a      	adds	r2, r3, r6
 8001816:	6911      	ldr	r1, [r2, #16]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_HCD_IRQHandler+0x634>)
 800181a:	400a      	ands	r2, r1
 800181c:	b15a      	cbz	r2, 8001836 <HAL_HCD_IRQHandler+0x626>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800181e:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001820:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001824:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001828:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800182a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	6993      	ldr	r3, [r2, #24]
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	e5a5      	b.n	800138e <HAL_HCD_IRQHandler+0x17e>
 8001842:	bf00      	nop
 8001844:	1ff80000 	.word	0x1ff80000

08001848 <HAL_HCD_Start>:
{
 8001848:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 800184a:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800184e:	2b01      	cmp	r3, #1
{
 8001850:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001852:	d00d      	beq.n	8001870 <HAL_HCD_Start+0x28>
 8001854:	2501      	movs	r5, #1
 8001856:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800185a:	6800      	ldr	r0, [r0, #0]
 800185c:	f001 fa8e 	bl	8002d7c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001860:	4629      	mov	r1, r5
 8001862:	6820      	ldr	r0, [r4, #0]
 8001864:	f001 fb34 	bl	8002ed0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001868:	2000      	movs	r0, #0
 800186a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 800186e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8001870:	2002      	movs	r0, #2
}
 8001872:	bd38      	pop	{r3, r4, r5, pc}

08001874 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001874:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001878:	2b01      	cmp	r3, #1
{
 800187a:	b510      	push	{r4, lr}
 800187c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 800187e:	d009      	beq.n	8001894 <HAL_HCD_Stop+0x20>
 8001880:	2301      	movs	r3, #1
 8001882:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001886:	6800      	ldr	r0, [r0, #0]
 8001888:	f001 fd62 	bl	8003350 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800188c:	2000      	movs	r0, #0
 800188e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 8001892:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001894:	2002      	movs	r0, #2
}
 8001896:	bd10      	pop	{r4, pc}

08001898 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001898:	6800      	ldr	r0, [r0, #0]
 800189a:	f001 bafb 	b.w	8002e94 <USB_ResetPort>

0800189e <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800189e:	2328      	movs	r3, #40	; 0x28
 80018a0:	fb03 0101 	mla	r1, r3, r1, r0
}
 80018a4:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80018a8:	4770      	bx	lr

080018aa <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80018aa:	2328      	movs	r3, #40	; 0x28
 80018ac:	fb03 0101 	mla	r1, r3, r1, r0
}
 80018b0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80018b2:	4770      	bx	lr

080018b4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018b4:	6800      	ldr	r0, [r0, #0]
 80018b6:	f001 bba6 	b.w	8003006 <USB_GetCurrentFrame>

080018ba <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80018ba:	6800      	ldr	r0, [r0, #0]
 80018bc:	f001 bb98 	b.w	8002ff0 <USB_GetHostSpeed>

080018c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018c2:	4604      	mov	r4, r0
 80018c4:	b908      	cbnz	r0, 80018ca <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80018c6:	2001      	movs	r0, #1
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018d2:	b91b      	cbnz	r3, 80018dc <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018d8:	f002 fd92 	bl	8004400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018dc:	2324      	movs	r3, #36	; 0x24
 80018de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018fc:	f000 fd34 	bl	8002368 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001900:	6865      	ldr	r5, [r4, #4]
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_I2C_Init+0x148>)
 8001904:	429d      	cmp	r5, r3
 8001906:	d84d      	bhi.n	80019a4 <HAL_I2C_Init+0xe4>
 8001908:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <HAL_I2C_Init+0x14c>)
 800190a:	4298      	cmp	r0, r3
 800190c:	d9db      	bls.n	80018c6 <HAL_I2C_Init+0x6>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800190e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001910:	493f      	ldr	r1, [pc, #252]	; (8001a10 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001912:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001914:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191c:	430b      	orrs	r3, r1
 800191e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001920:	6a13      	ldr	r3, [r2, #32]
 8001922:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001926:	3101      	adds	r1, #1
 8001928:	4319      	orrs	r1, r3
 800192a:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800192c:	69d1      	ldr	r1, [r2, #28]
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_I2C_Init+0x148>)
 8001930:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001934:	429d      	cmp	r5, r3
 8001936:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800193a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800193e:	d848      	bhi.n	80019d2 <HAL_I2C_Init+0x112>
 8001940:	006d      	lsls	r5, r5, #1
 8001942:	fbb0 f0f5 	udiv	r0, r0, r5
 8001946:	3001      	adds	r0, #1
 8001948:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800194c:	2b04      	cmp	r3, #4
 800194e:	bf38      	it	cc
 8001950:	2304      	movcc	r3, #4
 8001952:	430b      	orrs	r3, r1
 8001954:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001956:	6811      	ldr	r1, [r2, #0]
 8001958:	6a20      	ldr	r0, [r4, #32]
 800195a:	69e3      	ldr	r3, [r4, #28]
 800195c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001960:	4303      	orrs	r3, r0
 8001962:	430b      	orrs	r3, r1
 8001964:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001966:	6891      	ldr	r1, [r2, #8]
 8001968:	68e0      	ldr	r0, [r4, #12]
 800196a:	6923      	ldr	r3, [r4, #16]
 800196c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001970:	4303      	orrs	r3, r0
 8001972:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001976:	430b      	orrs	r3, r1
 8001978:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800197a:	68d1      	ldr	r1, [r2, #12]
 800197c:	69a0      	ldr	r0, [r4, #24]
 800197e:	6963      	ldr	r3, [r4, #20]
 8001980:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001984:	4303      	orrs	r3, r0
 8001986:	430b      	orrs	r3, r1
 8001988:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001992:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001994:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001996:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001998:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800199c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800199e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_I2C_Init+0x154>)
 80019a6:	4298      	cmp	r0, r3
 80019a8:	d98d      	bls.n	80018c6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019aa:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80019ac:	4e18      	ldr	r6, [pc, #96]	; (8001a10 <HAL_I2C_Init+0x150>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ae:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80019b0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b8:	4333      	orrs	r3, r6
 80019ba:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019bc:	6a13      	ldr	r3, [r2, #32]
 80019be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019c2:	4371      	muls	r1, r6
 80019c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80019cc:	fbb1 f1f6 	udiv	r1, r1, r6
 80019d0:	e7a9      	b.n	8001926 <HAL_I2C_Init+0x66>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019d2:	68a3      	ldr	r3, [r4, #8]
 80019d4:	b953      	cbnz	r3, 80019ec <HAL_I2C_Init+0x12c>
 80019d6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80019da:	fbb0 f0f3 	udiv	r0, r0, r3
 80019de:	1c43      	adds	r3, r0, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	b16b      	cbz	r3, 8001a02 <HAL_I2C_Init+0x142>
 80019e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ea:	e7b2      	b.n	8001952 <HAL_I2C_Init+0x92>
 80019ec:	2319      	movs	r3, #25
 80019ee:	436b      	muls	r3, r5
 80019f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fa:	b113      	cbz	r3, 8001a02 <HAL_I2C_Init+0x142>
 80019fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a00:	e7a7      	b.n	8001952 <HAL_I2C_Init+0x92>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e7a5      	b.n	8001952 <HAL_I2C_Init+0x92>
 8001a06:	bf00      	nop
 8001a08:	000186a0 	.word	0x000186a0
 8001a0c:	001e847f 	.word	0x001e847f
 8001a10:	000f4240 	.word	0x000f4240
 8001a14:	003d08ff 	.word	0x003d08ff

08001a18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d041      	beq.n	8001aa4 <HAL_I2S_Init+0x8c>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001a24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a28:	b92b      	cbnz	r3, 8001a36 <HAL_I2S_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a2a:	4b42      	ldr	r3, [pc, #264]	; (8001b34 <HAL_I2S_Init+0x11c>)
    hi2s->Lock = HAL_UNLOCKED;
 8001a2c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a30:	6343      	str	r3, [r0, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a32:	f002 fd1d 	bl	8004470 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a36:	2102      	movs	r1, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a38:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a3a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a3e:	69d3      	ldr	r3, [r2, #28]
 8001a40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a44:	f023 030f 	bic.w	r3, r3, #15
 8001a48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a4a:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001a4c:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a4e:	428b      	cmp	r3, r1
 8001a50:	d031      	beq.n	8001ab6 <HAL_I2S_Init+0x9e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a52:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a54:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a56:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8001a58:	bf0c      	ite	eq
 8001a5a:	2510      	moveq	r5, #16
 8001a5c:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a5e:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a60:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001a62:	bf98      	it	ls
 8001a64:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a66:	f000 fd37 	bl	80024d8 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a6a:	6923      	ldr	r3, [r4, #16]
 8001a6c:	6961      	ldr	r1, [r4, #20]
 8001a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a72:	d11b      	bne.n	8001aac <HAL_I2S_Init+0x94>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a74:	68e3      	ldr	r3, [r4, #12]
 8001a76:	220a      	movs	r2, #10
 8001a78:	b1b3      	cbz	r3, 8001aa8 <HAL_I2S_Init+0x90>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a7a:	00ab      	lsls	r3, r5, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a80:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001a82:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a84:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a88:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001a8a:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a8e:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a92:	0212      	lsls	r2, r2, #8
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a94:	085b      	lsrs	r3, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a96:	1e99      	subs	r1, r3, #2
 8001a98:	29fd      	cmp	r1, #253	; 0xfd
 8001a9a:	d90e      	bls.n	8001aba <HAL_I2S_Init+0xa2>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a9e:	f043 0310 	orr.w	r3, r3, #16
 8001aa2:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001aa8:	00eb      	lsls	r3, r5, #3
 8001aaa:	e7e7      	b.n	8001a7c <HAL_I2S_Init+0x64>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001aac:	230a      	movs	r3, #10
 8001aae:	fbb0 f0f5 	udiv	r0, r0, r5
 8001ab2:	4343      	muls	r3, r0
 8001ab4:	e7e5      	b.n	8001a82 <HAL_I2S_Init+0x6a>
    i2sodd = 0U;
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	e7ed      	b.n	8001a96 <HAL_I2S_Init+0x7e>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001aba:	4313      	orrs	r3, r2
 8001abc:	6922      	ldr	r2, [r4, #16]
 8001abe:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ac0:	6866      	ldr	r6, [r4, #4]
 8001ac2:	68e5      	ldr	r5, [r4, #12]
 8001ac4:	69a0      	ldr	r0, [r4, #24]
 8001ac6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8001b44 <HAL_I2S_Init+0x12c>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001aca:	4313      	orrs	r3, r2
 8001acc:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ace:	68a3      	ldr	r3, [r4, #8]
 8001ad0:	69cf      	ldr	r7, [r1, #28]
 8001ad2:	ea46 0203 	orr.w	r2, r6, r3
 8001ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ada:	432a      	orrs	r2, r5
 8001adc:	4302      	orrs	r2, r0
 8001ade:	ea07 070e 	and.w	r7, r7, lr
 8001ae2:	433a      	orrs	r2, r7
 8001ae4:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ae6:	6a22      	ldr	r2, [r4, #32]
 8001ae8:	2a01      	cmp	r2, #1
 8001aea:	d11d      	bne.n	8001b28 <HAL_I2S_Init+0x110>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001aec:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <HAL_I2S_Init+0x120>)
 8001aee:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001af0:	4f12      	ldr	r7, [pc, #72]	; (8001b3c <HAL_I2S_Init+0x124>)
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <HAL_I2S_Init+0x128>)
 8001af4:	42b9      	cmp	r1, r7
 8001af6:	bf18      	it	ne
 8001af8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001afc:	432b      	orrs	r3, r5
 8001afe:	69d1      	ldr	r1, [r2, #28]
 8001b00:	ea01 010e 	and.w	r1, r1, lr
 8001b04:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001b06:	2102      	movs	r1, #2
 8001b08:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001b0a:	69d7      	ldr	r7, [r2, #28]
 8001b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b10:	4303      	orrs	r3, r0
      tmp = I2S_MODE_SLAVE_TX;
 8001b12:	f436 7100 	bics.w	r1, r6, #512	; 0x200
 8001b16:	ea43 0307 	orr.w	r3, r3, r7
 8001b1a:	bf0c      	ite	eq
 8001b1c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8001b20:	2100      	movne	r1, #0
 8001b22:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b24:	430b      	orrs	r3, r1
 8001b26:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b28:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b2a:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b2c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8001b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b34:	08001b4f 	.word	0x08001b4f
 8001b38:	08001c4d 	.word	0x08001c4d
 8001b3c:	40003800 	.word	0x40003800
 8001b40:	40003400 	.word	0x40003400
 8001b44:	fffff040 	.word	0xfffff040

08001b48 <HAL_I2S_TxCpltCallback>:
 8001b48:	4770      	bx	lr

08001b4a <HAL_I2S_RxCpltCallback>:
 8001b4a:	4770      	bx	lr

08001b4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b4c:	4770      	bx	lr

08001b4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b50:	6803      	ldr	r3, [r0, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b56:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001b5a:	2a04      	cmp	r2, #4
{
 8001b5c:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b5e:	d136      	bne.n	8001bce <I2S_IRQHandler+0x80>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b60:	9a01      	ldr	r2, [sp, #4]
 8001b62:	07d1      	lsls	r1, r2, #31
 8001b64:	d517      	bpl.n	8001b96 <I2S_IRQHandler+0x48>
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	0652      	lsls	r2, r2, #25
 8001b6a:	d514      	bpl.n	8001b96 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b6c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001b6e:	68d9      	ldr	r1, [r3, #12]
 8001b70:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8001b74:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001b76:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001b78:	3a01      	subs	r2, #1
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001b7e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001b80:	b292      	uxth	r2, r2
 8001b82:	b942      	cbnz	r2, 8001b96 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b8a:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001b92:	f7ff ffda 	bl	8001b4a <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b96:	9b01      	ldr	r3, [sp, #4]
 8001b98:	0659      	lsls	r1, r3, #25
 8001b9a:	d518      	bpl.n	8001bce <I2S_IRQHandler+0x80>
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	0692      	lsls	r2, r2, #26
 8001ba2:	d514      	bpl.n	8001bce <I2S_IRQHandler+0x80>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001baa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001bac:	2200      	movs	r2, #0
 8001bae:	9202      	str	r2, [sp, #8]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	9202      	str	r2, [sp, #8]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bc0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff ffbf 	bl	8001b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001bce:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d136      	bne.n	8001c44 <I2S_IRQHandler+0xf6>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001bd6:	9b01      	ldr	r3, [sp, #4]
 8001bd8:	079b      	lsls	r3, r3, #30
 8001bda:	d519      	bpl.n	8001c10 <I2S_IRQHandler+0xc2>
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	6853      	ldr	r3, [r2, #4]
 8001be0:	0618      	lsls	r0, r3, #24
 8001be2:	d515      	bpl.n	8001c10 <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001be6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001bea:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 8001bec:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8001bee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001bf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b94b      	cbnz	r3, 8001c10 <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bfc:	6853      	ldr	r3, [r2, #4]
 8001bfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c02:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff ff9c 	bl	8001b48 <HAL_I2S_TxCpltCallback>
    {
      I2S_Transmit_IT(hi2s);
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c10:	9b01      	ldr	r3, [sp, #4]
 8001c12:	0719      	lsls	r1, r3, #28
 8001c14:	d516      	bpl.n	8001c44 <I2S_IRQHandler+0xf6>
 8001c16:	6823      	ldr	r3, [r4, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	0692      	lsls	r2, r2, #26
 8001c1c:	d512      	bpl.n	8001c44 <I2S_IRQHandler+0xf6>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c26:	2200      	movs	r2, #0
 8001c28:	9203      	str	r2, [sp, #12]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	9303      	str	r3, [sp, #12]
 8001c2e:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6463      	str	r3, [r4, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff ff84 	bl	8001b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c44:	b004      	add	sp, #16
 8001c46:	bd10      	pop	{r4, pc}

08001c48 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001c4c:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c4e:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c50:	498b      	ldr	r1, [pc, #556]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c52:	6893      	ldr	r3, [r2, #8]
{
 8001c54:	b086      	sub	sp, #24
 8001c56:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c58:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c5a:	4b8a      	ldr	r3, [pc, #552]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001c5c:	428a      	cmp	r2, r1
 8001c5e:	bf18      	it	ne
 8001c60:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001c64:	6899      	ldr	r1, [r3, #8]
 8001c66:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c68:	6851      	ldr	r1, [r2, #4]
 8001c6a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c70:	6841      	ldr	r1, [r0, #4]
 8001c72:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8001c76:	f040 8090 	bne.w	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x14e>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c7a:	9b00      	ldr	r3, [sp, #0]
 8001c7c:	0799      	lsls	r1, r3, #30
 8001c7e:	d51a      	bpl.n	8001cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 8001c80:	9b02      	ldr	r3, [sp, #8]
 8001c82:	061b      	lsls	r3, r3, #24
 8001c84:	d517      	bpl.n	8001cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001c86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c88:	1c99      	adds	r1, r3, #2
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	6241      	str	r1, [r0, #36]	; 0x24
 8001c8e:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001c90:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c98:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	b95b      	cbnz	r3, 8001cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c9e:	6853      	ldr	r3, [r2, #4]
 8001ca0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ca4:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8001ca6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b923      	cbnz	r3, 8001cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001cb2:	f7ff ffc9 	bl	8001c48 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001cb6:	9b01      	ldr	r3, [sp, #4]
 8001cb8:	07d8      	lsls	r0, r3, #31
 8001cba:	d522      	bpl.n	8001d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 8001cbc:	9b03      	ldr	r3, [sp, #12]
 8001cbe:	0659      	lsls	r1, r3, #25
 8001cc0:	d51f      	bpl.n	8001d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001cc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cc4:	6820      	ldr	r0, [r4, #0]
 8001cc6:	496e      	ldr	r1, [pc, #440]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001cc8:	1c93      	adds	r3, r2, #2
 8001cca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ccc:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001cce:	4288      	cmp	r0, r1
 8001cd0:	bf18      	it	ne
 8001cd2:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001cd6:	68d9      	ldr	r1, [r3, #12]
 8001cd8:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001cda:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ce2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8001ce4:	b292      	uxth	r2, r2
 8001ce6:	b962      	cbnz	r2, 8001d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001cf0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b92b      	cbnz	r3, 8001d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff ffa3 	bl	8001c48 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d02:	9b01      	ldr	r3, [sp, #4]
 8001d04:	065a      	lsls	r2, r3, #25
 8001d06:	d522      	bpl.n	8001d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 8001d08:	9b03      	ldr	r3, [sp, #12]
 8001d0a:	069b      	lsls	r3, r3, #26
 8001d0c:	d51f      	bpl.n	8001d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	495b      	ldr	r1, [pc, #364]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001d12:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001d14:	428b      	cmp	r3, r1
 8001d16:	bf18      	it	ne
 8001d18:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001d1c:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d1e:	6851      	ldr	r1, [r2, #4]
 8001d20:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001d24:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d2c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	9204      	str	r2, [sp, #16]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	9204      	str	r2, [sp, #16]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	9304      	str	r3, [sp, #16]
 8001d3a:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d4a:	f7ff feff 	bl	8001b4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d4e:	9b00      	ldr	r3, [sp, #0]
 8001d50:	0718      	lsls	r0, r3, #28
 8001d52:	d520      	bpl.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	0699      	lsls	r1, r3, #26
 8001d58:	d51d      	bpl.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d5a:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d5c:	4948      	ldr	r1, [pc, #288]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d64:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d66:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001d68:	428b      	cmp	r3, r1
 8001d6a:	bf18      	it	ne
 8001d6c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001d70:	6851      	ldr	r1, [r2, #4]
 8001d72:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001d76:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	9205      	str	r2, [sp, #20]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	9305      	str	r3, [sp, #20]
 8001d80:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001d90:	4620      	mov	r0, r4
 8001d92:	f7ff fedb 	bl	8001b4c <HAL_I2S_ErrorCallback>
}
 8001d96:	b006      	add	sp, #24
 8001d98:	bd10      	pop	{r4, pc}
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d9a:	9a01      	ldr	r2, [sp, #4]
 8001d9c:	0792      	lsls	r2, r2, #30
 8001d9e:	d51a      	bpl.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8001da0:	9a03      	ldr	r2, [sp, #12]
 8001da2:	0611      	lsls	r1, r2, #24
 8001da4:	d517      	bpl.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001da6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001da8:	1c91      	adds	r1, r2, #2
 8001daa:	8812      	ldrh	r2, [r2, #0]
 8001dac:	6241      	str	r1, [r0, #36]	; 0x24
 8001dae:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001db0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001db2:	3a01      	subs	r2, #1
 8001db4:	b292      	uxth	r2, r2
 8001db6:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001db8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	b95a      	cbnz	r2, 8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dc4:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 8001dc6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b923      	cbnz	r3, 8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
      hi2s->State = HAL_I2S_STATE_READY;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dd2:	f7ff ff39 	bl	8001c48 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001dd6:	9b00      	ldr	r3, [sp, #0]
 8001dd8:	07da      	lsls	r2, r3, #31
 8001dda:	d51c      	bpl.n	8001e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8001ddc:	9b02      	ldr	r3, [sp, #8]
 8001dde:	065b      	lsls	r3, r3, #25
 8001de0:	d519      	bpl.n	8001e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001de2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001de4:	1c9a      	adds	r2, r3, #2
 8001de6:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	68d1      	ldr	r1, [r2, #12]
 8001dec:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001dee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001df6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b963      	cbnz	r3, 8001e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dfc:	6853      	ldr	r3, [r2, #4]
 8001dfe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e02:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 8001e04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b92b      	cbnz	r3, 8001e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      hi2s->State = HAL_I2S_STATE_READY;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff ff19 	bl	8001c48 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e16:	9b00      	ldr	r3, [sp, #0]
 8001e18:	0658      	lsls	r0, r3, #25
 8001e1a:	d51b      	bpl.n	8001e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e1c:	9b02      	ldr	r3, [sp, #8]
 8001e1e:	0699      	lsls	r1, r3, #26
 8001e20:	d518      	bpl.n	8001e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e22:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e26:	6853      	ldr	r3, [r2, #4]
 8001e28:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e2c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001e30:	428a      	cmp	r2, r1
 8001e32:	bf18      	it	ne
 8001e34:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001e38:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e40:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e4a:	f043 0302 	orr.w	r3, r3, #2
 8001e4e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e50:	f7ff fe7c 	bl	8001b4c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e54:	9b01      	ldr	r3, [sp, #4]
 8001e56:	071a      	lsls	r2, r3, #28
 8001e58:	d59d      	bpl.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	069b      	lsls	r3, r3, #26
 8001e5e:	d59a      	bpl.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x14a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e60:	6822      	ldr	r2, [r4, #0]
 8001e62:	4907      	ldr	r1, [pc, #28]	; (8001e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x234>)
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x238>)
 8001e66:	428a      	cmp	r2, r1
 8001e68:	bf18      	it	ne
 8001e6a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001e74:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e76:	6853      	ldr	r3, [r2, #4]
 8001e78:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e7c:	6053      	str	r3, [r2, #4]
 8001e7e:	e780      	b.n	8001d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8001e80:	40003800 	.word	0x40003800
 8001e84:	40003400 	.word	0x40003400

08001e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	b908      	cbnz	r0, 8001e94 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001e90:	2001      	movs	r0, #1
 8001e92:	e03f      	b.n	8001f14 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e94:	6803      	ldr	r3, [r0, #0]
 8001e96:	07dd      	lsls	r5, r3, #31
 8001e98:	d410      	bmi.n	8001ebc <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	0798      	lsls	r0, r3, #30
 8001e9e:	d45a      	bmi.n	8001f56 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	071a      	lsls	r2, r3, #28
 8001ea4:	f100 809c 	bmi.w	8001fe0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	075b      	lsls	r3, r3, #29
 8001eac:	f100 80ba 	bmi.w	8002024 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb0:	69a0      	ldr	r0, [r4, #24]
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	f040 811b 	bne.w	80020ee <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e02b      	b.n	8001f14 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ebc:	4ba4      	ldr	r3, [pc, #656]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	f002 020c 	and.w	r2, r2, #12
 8001ec4:	2a04      	cmp	r2, #4
 8001ec6:	d007      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	2a08      	cmp	r2, #8
 8001ed0:	d10a      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	0259      	lsls	r1, r3, #9
 8001ed6:	d507      	bpl.n	8001ee8 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	4b9d      	ldr	r3, [pc, #628]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	039a      	lsls	r2, r3, #14
 8001ede:	d5dc      	bpl.n	8001e9a <HAL_RCC_OscConfig+0x12>
 8001ee0:	6863      	ldr	r3, [r4, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1d9      	bne.n	8001e9a <HAL_RCC_OscConfig+0x12>
 8001ee6:	e7d3      	b.n	8001e90 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	4d99      	ldr	r5, [pc, #612]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 8001eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef0:	d113      	bne.n	8001f1a <HAL_RCC_OscConfig+0x92>
 8001ef2:	682b      	ldr	r3, [r5, #0]
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001efa:	f7fe fe89 	bl	8000c10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4d94      	ldr	r5, [pc, #592]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001f00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	682b      	ldr	r3, [r5, #0]
 8001f04:	039b      	lsls	r3, r3, #14
 8001f06:	d4c8      	bmi.n	8001e9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7fe fe82 	bl	8000c10 <HAL_GetTick>
 8001f0c:	1b80      	subs	r0, r0, r6
 8001f0e:	2864      	cmp	r0, #100	; 0x64
 8001f10:	d9f7      	bls.n	8001f02 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8001f12:	2003      	movs	r0, #3
}
 8001f14:	b002      	add	sp, #8
 8001f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1e:	d104      	bne.n	8001f2a <HAL_RCC_OscConfig+0xa2>
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f26:	602b      	str	r3, [r5, #0]
 8001f28:	e7e3      	b.n	8001ef2 <HAL_RCC_OscConfig+0x6a>
 8001f2a:	682a      	ldr	r2, [r5, #0]
 8001f2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f30:	602a      	str	r2, [r5, #0]
 8001f32:	682a      	ldr	r2, [r5, #0]
 8001f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f38:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1dd      	bne.n	8001efa <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fe67 	bl	8000c10 <HAL_GetTick>
 8001f42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f44:	682b      	ldr	r3, [r5, #0]
 8001f46:	039f      	lsls	r7, r3, #14
 8001f48:	d5a7      	bpl.n	8001e9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fe61 	bl	8000c10 <HAL_GetTick>
 8001f4e:	1b80      	subs	r0, r0, r6
 8001f50:	2864      	cmp	r0, #100	; 0x64
 8001f52:	d9f7      	bls.n	8001f44 <HAL_RCC_OscConfig+0xbc>
 8001f54:	e7dd      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f56:	4b7e      	ldr	r3, [pc, #504]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	f012 0f0c 	tst.w	r2, #12
 8001f5e:	d007      	beq.n	8001f70 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f66:	2a08      	cmp	r2, #8
 8001f68:	d111      	bne.n	8001f8e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	025e      	lsls	r6, r3, #9
 8001f6e:	d40e      	bmi.n	8001f8e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f70:	4b77      	ldr	r3, [pc, #476]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	0795      	lsls	r5, r2, #30
 8001f76:	d502      	bpl.n	8001f7e <HAL_RCC_OscConfig+0xf6>
 8001f78:	68e2      	ldr	r2, [r4, #12]
 8001f7a:	2a01      	cmp	r2, #1
 8001f7c:	d188      	bne.n	8001e90 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	6921      	ldr	r1, [r4, #16]
 8001f82:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001f86:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001f8a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8c:	e788      	b.n	8001ea0 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f8e:	68e2      	ldr	r2, [r4, #12]
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_RCC_OscConfig+0x2cc>)
 8001f92:	b1b2      	cbz	r2, 8001fc2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f98:	f7fe fe3a 	bl	8000c10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4d6c      	ldr	r5, [pc, #432]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001f9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	0798      	lsls	r0, r3, #30
 8001fa4:	d507      	bpl.n	8001fb6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	682b      	ldr	r3, [r5, #0]
 8001fa8:	6922      	ldr	r2, [r4, #16]
 8001faa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fb2:	602b      	str	r3, [r5, #0]
 8001fb4:	e774      	b.n	8001ea0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb6:	f7fe fe2b 	bl	8000c10 <HAL_GetTick>
 8001fba:	1b80      	subs	r0, r0, r6
 8001fbc:	2802      	cmp	r0, #2
 8001fbe:	d9ef      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x118>
 8001fc0:	e7a7      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fe24 	bl	8000c10 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc8:	4d61      	ldr	r5, [pc, #388]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001fca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	0799      	lsls	r1, r3, #30
 8001fd0:	f57f af66 	bpl.w	8001ea0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fe1c 	bl	8000c10 <HAL_GetTick>
 8001fd8:	1b80      	subs	r0, r0, r6
 8001fda:	2802      	cmp	r0, #2
 8001fdc:	d9f6      	bls.n	8001fcc <HAL_RCC_OscConfig+0x144>
 8001fde:	e798      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe0:	6962      	ldr	r2, [r4, #20]
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	; (8002158 <HAL_RCC_OscConfig+0x2d0>)
 8001fe4:	b17a      	cbz	r2, 8002006 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fea:	f7fe fe11 	bl	8000c10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	4d58      	ldr	r5, [pc, #352]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001ff0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ff4:	079f      	lsls	r7, r3, #30
 8001ff6:	f53f af57 	bmi.w	8001ea8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffa:	f7fe fe09 	bl	8000c10 <HAL_GetTick>
 8001ffe:	1b80      	subs	r0, r0, r6
 8002000:	2802      	cmp	r0, #2
 8002002:	d9f6      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x16a>
 8002004:	e785      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8002006:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002008:	f7fe fe02 	bl	8000c10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800200c:	4d50      	ldr	r5, [pc, #320]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800200e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002012:	0798      	lsls	r0, r3, #30
 8002014:	f57f af48 	bpl.w	8001ea8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002018:	f7fe fdfa 	bl	8000c10 <HAL_GetTick>
 800201c:	1b80      	subs	r0, r0, r6
 800201e:	2802      	cmp	r0, #2
 8002020:	d9f6      	bls.n	8002010 <HAL_RCC_OscConfig+0x188>
 8002022:	e776      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002024:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 8002026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002028:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800202c:	d128      	bne.n	8002080 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	9201      	str	r2, [sp, #4]
 8002030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002032:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002042:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	4d45      	ldr	r5, [pc, #276]	; (800215c <HAL_RCC_OscConfig+0x2d4>)
 8002046:	682b      	ldr	r3, [r5, #0]
 8002048:	05d9      	lsls	r1, r3, #23
 800204a:	d51b      	bpl.n	8002084 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	68a3      	ldr	r3, [r4, #8]
 800204e:	4d40      	ldr	r5, [pc, #256]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 8002050:	2b01      	cmp	r3, #1
 8002052:	d127      	bne.n	80020a4 <HAL_RCC_OscConfig+0x21c>
 8002054:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800205c:	f7fe fdd8 	bl	8000c10 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4d3b      	ldr	r5, [pc, #236]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8002062:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800206a:	079b      	lsls	r3, r3, #30
 800206c:	d539      	bpl.n	80020e2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800206e:	2e00      	cmp	r6, #0
 8002070:	f43f af1e 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002074:	4a36      	ldr	r2, [pc, #216]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 8002076:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	e717      	b.n	8001eb0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002080:	2600      	movs	r6, #0
 8002082:	e7df      	b.n	8002044 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002084:	682b      	ldr	r3, [r5, #0]
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800208c:	f7fe fdc0 	bl	8000c10 <HAL_GetTick>
 8002090:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	682b      	ldr	r3, [r5, #0]
 8002094:	05da      	lsls	r2, r3, #23
 8002096:	d4d9      	bmi.n	800204c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002098:	f7fe fdba 	bl	8000c10 <HAL_GetTick>
 800209c:	1bc0      	subs	r0, r0, r7
 800209e:	2802      	cmp	r0, #2
 80020a0:	d9f7      	bls.n	8002092 <HAL_RCC_OscConfig+0x20a>
 80020a2:	e736      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d104      	bne.n	80020b2 <HAL_RCC_OscConfig+0x22a>
 80020a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	672b      	str	r3, [r5, #112]	; 0x70
 80020b0:	e7d0      	b.n	8002054 <HAL_RCC_OscConfig+0x1cc>
 80020b2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80020b4:	f022 0201 	bic.w	r2, r2, #1
 80020b8:	672a      	str	r2, [r5, #112]	; 0x70
 80020ba:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80020bc:	f022 0204 	bic.w	r2, r2, #4
 80020c0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ca      	bne.n	800205c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80020c6:	f7fe fda3 	bl	8000c10 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020ce:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020d2:	0798      	lsls	r0, r3, #30
 80020d4:	d5cb      	bpl.n	800206e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe fd9b 	bl	8000c10 <HAL_GetTick>
 80020da:	1bc0      	subs	r0, r0, r7
 80020dc:	4540      	cmp	r0, r8
 80020de:	d9f7      	bls.n	80020d0 <HAL_RCC_OscConfig+0x248>
 80020e0:	e717      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe fd95 	bl	8000c10 <HAL_GetTick>
 80020e6:	1bc0      	subs	r0, r0, r7
 80020e8:	4540      	cmp	r0, r8
 80020ea:	d9bd      	bls.n	8002068 <HAL_RCC_OscConfig+0x1e0>
 80020ec:	e711      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ee:	4d18      	ldr	r5, [pc, #96]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
 80020f0:	68ab      	ldr	r3, [r5, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d047      	beq.n	800218a <HAL_RCC_OscConfig+0x302>
 80020fa:	4e19      	ldr	r6, [pc, #100]	; (8002160 <HAL_RCC_OscConfig+0x2d8>)
 80020fc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002100:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	d135      	bne.n	8002170 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8002104:	f7fe fd84 	bl	8000c10 <HAL_GetTick>
 8002108:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	682b      	ldr	r3, [r5, #0]
 800210c:	0199      	lsls	r1, r3, #6
 800210e:	d429      	bmi.n	8002164 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002110:	6a22      	ldr	r2, [r4, #32]
 8002112:	69e3      	ldr	r3, [r4, #28]
 8002114:	4313      	orrs	r3, r2
 8002116:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002118:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800211c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800211e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002122:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	4c0a      	ldr	r4, [pc, #40]	; (8002150 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002126:	0852      	lsrs	r2, r2, #1
 8002128:	3a01      	subs	r2, #1
 800212a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800212e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002130:	2301      	movs	r3, #1
 8002132:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002134:	f7fe fd6c 	bl	8000c10 <HAL_GetTick>
 8002138:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	019a      	lsls	r2, r3, #6
 800213e:	f53f aebb 	bmi.w	8001eb8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fd65 	bl	8000c10 <HAL_GetTick>
 8002146:	1b40      	subs	r0, r0, r5
 8002148:	2802      	cmp	r0, #2
 800214a:	d9f6      	bls.n	800213a <HAL_RCC_OscConfig+0x2b2>
 800214c:	e6e1      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	42470000 	.word	0x42470000
 8002158:	42470e80 	.word	0x42470e80
 800215c:	40007000 	.word	0x40007000
 8002160:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fd54 	bl	8000c10 <HAL_GetTick>
 8002168:	1bc0      	subs	r0, r0, r7
 800216a:	2802      	cmp	r0, #2
 800216c:	d9cd      	bls.n	800210a <HAL_RCC_OscConfig+0x282>
 800216e:	e6d0      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8002170:	f7fe fd4e 	bl	8000c10 <HAL_GetTick>
 8002174:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002176:	682b      	ldr	r3, [r5, #0]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	f57f ae9d 	bpl.w	8001eb8 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217e:	f7fe fd47 	bl	8000c10 <HAL_GetTick>
 8002182:	1b00      	subs	r0, r0, r4
 8002184:	2802      	cmp	r0, #2
 8002186:	d9f6      	bls.n	8002176 <HAL_RCC_OscConfig+0x2ee>
 8002188:	e6c3      	b.n	8001f12 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218a:	2801      	cmp	r0, #1
 800218c:	f43f aec2 	beq.w	8001f14 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8002190:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	69e3      	ldr	r3, [r4, #28]
 8002194:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8002198:	429a      	cmp	r2, r3
 800219a:	f47f ae79 	bne.w	8001e90 <HAL_RCC_OscConfig+0x8>
 800219e:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021a0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	4293      	cmp	r3, r2
 80021a6:	f47f ae73 	bne.w	8001e90 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021b0:	4003      	ands	r3, r0
 80021b2:	4293      	cmp	r3, r2
 80021b4:	f47f ae6c 	bne.w	8001e90 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021ba:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021be:	4293      	cmp	r3, r2
 80021c0:	f47f ae66 	bne.w	8001e90 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021c6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 80021ca:	1ac0      	subs	r0, r0, r3
 80021cc:	bf18      	it	ne
 80021ce:	2001      	movne	r0, #1
 80021d0:	e6a0      	b.n	8001f14 <HAL_RCC_OscConfig+0x8c>
 80021d2:	bf00      	nop

080021d4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d4:	4913      	ldr	r1, [pc, #76]	; (8002224 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80021d6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d8:	688b      	ldr	r3, [r1, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d003      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x16>
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e6:	4810      	ldr	r0, [pc, #64]	; (8002228 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021e8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80021ea:	4810      	ldr	r0, [pc, #64]	; (800222c <HAL_RCC_GetSysClockFreq+0x58>)
 80021ec:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f8:	bf14      	ite	ne
 80021fa:	480c      	ldrne	r0, [pc, #48]	; (800222c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fc:	480a      	ldreq	r0, [pc, #40]	; (8002228 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002202:	bf18      	it	ne
 8002204:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002206:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	fba1 0100 	umull	r0, r1, r1, r0
 800220e:	f7fd ffdb 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <HAL_RCC_GetSysClockFreq+0x50>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800221a:	3301      	adds	r3, #1
 800221c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800221e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002222:	bd08      	pop	{r3, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	00f42400 	.word	0x00f42400
 800222c:	007a1200 	.word	0x007a1200

08002230 <HAL_RCC_ClockConfig>:
{
 8002230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002234:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002236:	4604      	mov	r4, r0
 8002238:	b910      	cbnz	r0, 8002240 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800223a:	2001      	movs	r0, #1
 800223c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b44      	ldr	r3, [pc, #272]	; (8002354 <HAL_RCC_ClockConfig+0x124>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	f002 020f 	and.w	r2, r2, #15
 8002248:	428a      	cmp	r2, r1
 800224a:	d329      	bcc.n	80022a0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	6821      	ldr	r1, [r4, #0]
 800224e:	078f      	lsls	r7, r1, #30
 8002250:	d42e      	bmi.n	80022b0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	07c8      	lsls	r0, r1, #31
 8002254:	d441      	bmi.n	80022da <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002256:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <HAL_RCC_ClockConfig+0x124>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	f002 020f 	and.w	r2, r2, #15
 800225e:	4295      	cmp	r5, r2
 8002260:	d367      	bcc.n	8002332 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002262:	6822      	ldr	r2, [r4, #0]
 8002264:	0751      	lsls	r1, r2, #29
 8002266:	d46d      	bmi.n	8002344 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	0713      	lsls	r3, r2, #28
 800226a:	d507      	bpl.n	800227c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226c:	4a3a      	ldr	r2, [pc, #232]	; (8002358 <HAL_RCC_ClockConfig+0x128>)
 800226e:	6921      	ldr	r1, [r4, #16]
 8002270:	6893      	ldr	r3, [r2, #8]
 8002272:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002276:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800227a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800227c:	f7ff ffaa 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <HAL_RCC_ClockConfig+0x128>)
 8002282:	4a36      	ldr	r2, [pc, #216]	; (800235c <HAL_RCC_ClockConfig+0x12c>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800228a:	5cd3      	ldrb	r3, [r2, r3]
 800228c:	40d8      	lsrs	r0, r3
 800228e:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HAL_RCC_ClockConfig+0x130>)
 8002290:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_ClockConfig+0x134>)
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	f7fe fc71 	bl	8000b7c <HAL_InitTick>
  return HAL_OK;
 800229a:	2000      	movs	r0, #0
 800229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	4299      	cmp	r1, r3
 80022ac:	d1c5      	bne.n	800223a <HAL_RCC_ClockConfig+0xa>
 80022ae:	e7cd      	b.n	800224c <HAL_RCC_ClockConfig+0x1c>
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b6:	bf1e      	ittt	ne
 80022b8:	689a      	ldrne	r2, [r3, #8]
 80022ba:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80022be:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c2:	bf42      	ittt	mi
 80022c4:	689a      	ldrmi	r2, [r3, #8]
 80022c6:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80022ca:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	68a0      	ldr	r0, [r4, #8]
 80022d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80022d4:	4302      	orrs	r2, r0
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	e7bb      	b.n	8002252 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	6862      	ldr	r2, [r4, #4]
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_RCC_ClockConfig+0x128>)
 80022de:	2a01      	cmp	r2, #1
 80022e0:	d11d      	bne.n	800231e <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e8:	d0a7      	beq.n	800223a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ea:	4e1b      	ldr	r6, [pc, #108]	; (8002358 <HAL_RCC_ClockConfig+0x128>)
 80022ec:	68b3      	ldr	r3, [r6, #8]
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80022f6:	f7fe fc8b 	bl	8000c10 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80022fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002300:	68b3      	ldr	r3, [r6, #8]
 8002302:	6862      	ldr	r2, [r4, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800230c:	d0a3      	beq.n	8002256 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230e:	f7fe fc7f 	bl	8000c10 <HAL_GetTick>
 8002312:	1bc0      	subs	r0, r0, r7
 8002314:	4540      	cmp	r0, r8
 8002316:	d9f3      	bls.n	8002300 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002318:	2003      	movs	r0, #3
}
 800231a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231e:	1e91      	subs	r1, r2, #2
 8002320:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002324:	d802      	bhi.n	800232c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800232a:	e7dd      	b.n	80022e8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	f013 0f02 	tst.w	r3, #2
 8002330:	e7da      	b.n	80022e8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	b2ea      	uxtb	r2, r5
 8002334:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	429d      	cmp	r5, r3
 800233e:	f47f af7c 	bne.w	800223a <HAL_RCC_ClockConfig+0xa>
 8002342:	e78e      	b.n	8002262 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <HAL_RCC_ClockConfig+0x128>)
 8002346:	68e0      	ldr	r0, [r4, #12]
 8002348:	688b      	ldr	r3, [r1, #8]
 800234a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800234e:	4303      	orrs	r3, r0
 8002350:	608b      	str	r3, [r1, #8]
 8002352:	e789      	b.n	8002268 <HAL_RCC_ClockConfig+0x38>
 8002354:	40023c00 	.word	0x40023c00
 8002358:	40023800 	.word	0x40023800
 800235c:	08004c50 	.word	0x08004c50
 8002360:	20000084 	.word	0x20000084
 8002364:	20000060 	.word	0x20000060

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_RCC_GetPCLK1Freq+0x14>)
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x18>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	4a03      	ldr	r2, [pc, #12]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002376:	6810      	ldr	r0, [r2, #0]
}
 8002378:	40d8      	lsrs	r0, r3
 800237a:	4770      	bx	lr
 800237c:	40023800 	.word	0x40023800
 8002380:	08004c60 	.word	0x08004c60
 8002384:	20000084 	.word	0x20000084

08002388 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_RCC_GetPCLK2Freq+0x14>)
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002392:	5cd3      	ldrb	r3, [r2, r3]
 8002394:	4a03      	ldr	r2, [pc, #12]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002396:	6810      	ldr	r0, [r2, #0]
}
 8002398:	40d8      	lsrs	r0, r3
 800239a:	4770      	bx	lr
 800239c:	40023800 	.word	0x40023800
 80023a0:	08004c60 	.word	0x08004c60
 80023a4:	20000084 	.word	0x20000084

080023a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023a8:	6803      	ldr	r3, [r0, #0]
 80023aa:	f013 0f05 	tst.w	r3, #5
{
 80023ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023b0:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023b2:	d105      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023b4:	6828      	ldr	r0, [r5, #0]
 80023b6:	f010 0002 	ands.w	r0, r0, #2
 80023ba:	d128      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80023bc:	b003      	add	sp, #12
 80023be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80023c0:	4c41      	ldr	r4, [pc, #260]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023c2:	4e42      	ldr	r6, [pc, #264]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80023c8:	f7fe fc22 	bl	8000c10 <HAL_GetTick>
 80023cc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023ce:	6833      	ldr	r3, [r6, #0]
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	d415      	bmi.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80023d4:	68ab      	ldr	r3, [r5, #8]
 80023d6:	686a      	ldr	r2, [r5, #4]
 80023d8:	071b      	lsls	r3, r3, #28
 80023da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023de:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80023e2:	2301      	movs	r3, #1
 80023e4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80023e6:	f7fe fc13 	bl	8000c10 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023ea:	4c38      	ldr	r4, [pc, #224]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 80023ec:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	0118      	lsls	r0, r3, #4
 80023f2:	d4df      	bmi.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023f4:	f7fe fc0c 	bl	8000c10 <HAL_GetTick>
 80023f8:	1b80      	subs	r0, r0, r6
 80023fa:	2802      	cmp	r0, #2
 80023fc:	d9f7      	bls.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x46>
 80023fe:	e004      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002400:	f7fe fc06 	bl	8000c10 <HAL_GetTick>
 8002404:	1bc0      	subs	r0, r0, r7
 8002406:	2802      	cmp	r0, #2
 8002408:	d9e1      	bls.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 800240a:	2003      	movs	r0, #3
 800240c:	e7d6      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002414:	4c2e      	ldr	r4, [pc, #184]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002418:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002430:	f7fe fbee 	bl	8000c10 <HAL_GetTick>
 8002434:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	05d9      	lsls	r1, r3, #23
 800243a:	d51b      	bpl.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800243c:	4c23      	ldr	r4, [pc, #140]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800243e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002440:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002444:	d11c      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002446:	68eb      	ldr	r3, [r5, #12]
 8002448:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800244c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002450:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8002452:	d134      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002454:	6891      	ldr	r1, [r2, #8]
 8002456:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800245a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800245e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002462:	4301      	orrs	r1, r0
 8002464:	6091      	str	r1, [r2, #8]
 8002466:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246c:	430b      	orrs	r3, r1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 8002470:	2000      	movs	r0, #0
 8002472:	e7a3      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fbcc 	bl	8000c10 <HAL_GetTick>
 8002478:	1b80      	subs	r0, r0, r6
 800247a:	2802      	cmp	r0, #2
 800247c:	d9db      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800247e:	e7c4      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002480:	68ea      	ldr	r2, [r5, #12]
 8002482:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002486:	4293      	cmp	r3, r2
 8002488:	d0dd      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800248a:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800248c:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800248e:	2101      	movs	r1, #1
 8002490:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002496:	2100      	movs	r1, #0
 8002498:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800249a:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800249c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800249e:	07da      	lsls	r2, r3, #31
 80024a0:	d5d1      	bpl.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 80024a2:	f7fe fbb5 	bl	8000c10 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80024aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80024ae:	079b      	lsls	r3, r3, #30
 80024b0:	d4c9      	bmi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fbad 	bl	8000c10 <HAL_GetTick>
 80024b6:	1b80      	subs	r0, r0, r6
 80024b8:	42b8      	cmp	r0, r7
 80024ba:	d9f7      	bls.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x104>
 80024bc:	e7a5      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024be:	6891      	ldr	r1, [r2, #8]
 80024c0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80024c4:	e7ce      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80024c6:	bf00      	nop
 80024c8:	42470068 	.word	0x42470068
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40007000 	.word	0x40007000
 80024d4:	42470e40 	.word	0x42470e40

080024d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80024d8:	2801      	cmp	r0, #1
 80024da:	d120      	bne.n	800251e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80024de:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80024e0:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 80024e4:	d004      	beq.n	80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80024e6:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80024e8:	480f      	ldr	r0, [pc, #60]	; (8002528 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80024ea:	bf18      	it	ne
 80024ec:	2000      	movne	r0, #0
 80024ee:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024f0:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80024f2:	490c      	ldr	r1, [pc, #48]	; (8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024f4:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024f6:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80024f8:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80024fc:	bf4c      	ite	mi
 80024fe:	4b0b      	ldrmi	r3, [pc, #44]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002500:	4b0b      	ldrpl	r3, [pc, #44]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002502:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002506:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800250a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800250e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002512:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002514:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8002518:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 800251c:	4770      	bx	lr
  uint32_t frequency = 0U;
 800251e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	00bb8000 	.word	0x00bb8000
 800252c:	007a1200 	.word	0x007a1200
 8002530:	00f42400 	.word	0x00f42400

08002534 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	4604      	mov	r4, r0
 8002538:	460e      	mov	r6, r1
 800253a:	4615      	mov	r5, r2
 800253c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800253e:	6821      	ldr	r1, [r4, #0]
 8002540:	688a      	ldr	r2, [r1, #8]
 8002542:	ea36 0302 	bics.w	r3, r6, r2
 8002546:	d001      	beq.n	800254c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002548:	2000      	movs	r0, #0
}
 800254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800254c:	1c6b      	adds	r3, r5, #1
 800254e:	d0f7      	beq.n	8002540 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002550:	f7fe fb5e 	bl	8000c10 <HAL_GetTick>
 8002554:	1bc0      	subs	r0, r0, r7
 8002556:	4285      	cmp	r5, r0
 8002558:	d8f1      	bhi.n	800253e <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002562:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002564:	6862      	ldr	r2, [r4, #4]
 8002566:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800256a:	d10a      	bne.n	8002582 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 800256c:	68a2      	ldr	r2, [r4, #8]
 800256e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002572:	d002      	beq.n	800257a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002574:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002578:	d103      	bne.n	8002582 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002580:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002582:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002584:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002588:	d107      	bne.n	800259a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002598:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800259a:	2301      	movs	r3, #1
 800259c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80025a0:	2300      	movs	r3, #0
 80025a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80025a6:	2003      	movs	r0, #3
 80025a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025ae:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025b0:	4a13      	ldr	r2, [pc, #76]	; (8002600 <SPI_EndRxTxTransaction+0x54>)
 80025b2:	4e14      	ldr	r6, [pc, #80]	; (8002604 <SPI_EndRxTxTransaction+0x58>)
 80025b4:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025b6:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025b8:	fbb5 f6f6 	udiv	r6, r5, r6
 80025bc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80025c0:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025c2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80025c6:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025c8:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ca:	d10d      	bne.n	80025e8 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025cc:	460a      	mov	r2, r1
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	f7ff ffb0 	bl	8002534 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80025d4:	b910      	cbnz	r0, 80025dc <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 80025d6:	2000      	movs	r0, #0
}
 80025d8:	b002      	add	sp, #8
 80025da:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025de:	f043 0320 	orr.w	r3, r3, #32
 80025e2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80025e4:	2003      	movs	r0, #3
 80025e6:	e7f7      	b.n	80025d8 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 80025e8:	9b01      	ldr	r3, [sp, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f3      	beq.n	80025d6 <SPI_EndRxTxTransaction+0x2a>
      count--;
 80025ee:	9b01      	ldr	r3, [sp, #4]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	061b      	lsls	r3, r3, #24
 80025fa:	d4f5      	bmi.n	80025e8 <SPI_EndRxTxTransaction+0x3c>
 80025fc:	e7eb      	b.n	80025d6 <SPI_EndRxTxTransaction+0x2a>
 80025fe:	bf00      	nop
 8002600:	20000084 	.word	0x20000084
 8002604:	016e3600 	.word	0x016e3600

08002608 <HAL_SPI_Init>:
{
 8002608:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800260a:	4604      	mov	r4, r0
 800260c:	2800      	cmp	r0, #0
 800260e:	d036      	beq.n	800267e <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002614:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002618:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800261c:	b91b      	cbnz	r3, 8002626 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800261e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002622:	f001 ff6f 	bl	8004504 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002626:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002628:	68a0      	ldr	r0, [r4, #8]
 800262a:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800262c:	2302      	movs	r3, #2
 800262e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002632:	680b      	ldr	r3, [r1, #0]
 8002634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002638:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800263a:	6863      	ldr	r3, [r4, #4]
 800263c:	4303      	orrs	r3, r0
 800263e:	68e0      	ldr	r0, [r4, #12]
 8002640:	4303      	orrs	r3, r0
 8002642:	6920      	ldr	r0, [r4, #16]
 8002644:	4303      	orrs	r3, r0
 8002646:	6960      	ldr	r0, [r4, #20]
 8002648:	4303      	orrs	r3, r0
 800264a:	69e0      	ldr	r0, [r4, #28]
 800264c:	4303      	orrs	r3, r0
 800264e:	6a20      	ldr	r0, [r4, #32]
 8002650:	4303      	orrs	r3, r0
 8002652:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002654:	4303      	orrs	r3, r0
 8002656:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800265a:	4303      	orrs	r3, r0
 800265c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800265e:	0c12      	lsrs	r2, r2, #16
 8002660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002662:	f002 0204 	and.w	r2, r2, #4
 8002666:	431a      	orrs	r2, r3
 8002668:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800266a:	69cb      	ldr	r3, [r1, #28]
 800266c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002670:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002672:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002674:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002676:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002678:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800267c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800267e:	2001      	movs	r0, #1
}
 8002680:	bd10      	pop	{r4, pc}

08002682 <HAL_SPI_DeInit>:
{
 8002682:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002684:	4604      	mov	r4, r0
 8002686:	b180      	cbz	r0, 80026aa <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8002688:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800268a:	2302      	movs	r3, #2
 800268c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002696:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002698:	f001 ff68 	bl	800456c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800269c:	2000      	movs	r0, #0
 800269e:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 80026a0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 80026a4:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 80026a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
}
 80026ac:	bd10      	pop	{r4, pc}

080026ae <HAL_SPI_TransmitReceive>:
{
 80026ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026b2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80026b4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80026b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80026ba:	2b01      	cmp	r3, #1
{
 80026bc:	4604      	mov	r4, r0
 80026be:	460d      	mov	r5, r1
 80026c0:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80026c2:	f000 80e2 	beq.w	800288a <HAL_SPI_TransmitReceive+0x1dc>
 80026c6:	2301      	movs	r3, #1
 80026c8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80026cc:	f7fe faa0 	bl	8000c10 <HAL_GetTick>
  tmp_state           = hspi->State;
 80026d0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80026d4:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80026d6:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026d8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80026da:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026dc:	d00a      	beq.n	80026f4 <HAL_SPI_TransmitReceive+0x46>
 80026de:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80026e2:	f040 80d0 	bne.w	8002886 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026e6:	68a0      	ldr	r0, [r4, #8]
 80026e8:	2800      	cmp	r0, #0
 80026ea:	f040 80cc 	bne.w	8002886 <HAL_SPI_TransmitReceive+0x1d8>
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	f040 80c9 	bne.w	8002886 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026f4:	2d00      	cmp	r5, #0
 80026f6:	f000 80c4 	beq.w	8002882 <HAL_SPI_TransmitReceive+0x1d4>
 80026fa:	f1b9 0f00 	cmp.w	r9, #0
 80026fe:	f000 80c0 	beq.w	8002882 <HAL_SPI_TransmitReceive+0x1d4>
 8002702:	2e00      	cmp	r6, #0
 8002704:	f000 80bd 	beq.w	8002882 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002708:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800270c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002710:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002712:	bf1c      	itt	ne
 8002714:	2305      	movne	r3, #5
 8002716:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800271a:	2300      	movs	r3, #0
 800271c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800271e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002720:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002722:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002724:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002726:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002728:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800272a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800272c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800272e:	bf58      	it	pl
 8002730:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002732:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002734:	bf58      	it	pl
 8002736:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800273a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800273c:	bf58      	it	pl
 800273e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002740:	68e2      	ldr	r2, [r4, #12]
 8002742:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002746:	d158      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002748:	b109      	cbz	r1, 800274e <HAL_SPI_TransmitReceive+0xa0>
 800274a:	2e01      	cmp	r6, #1
 800274c:	d107      	bne.n	800275e <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800274e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002752:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002754:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002756:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002758:	3b01      	subs	r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800275e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002760:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	b9ab      	cbnz	r3, 8002792 <HAL_SPI_TransmitReceive+0xe4>
 8002766:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002768:	b29b      	uxth	r3, r3
 800276a:	b993      	cbnz	r3, 8002792 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800276c:	4642      	mov	r2, r8
 800276e:	4639      	mov	r1, r7
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff ff1b 	bl	80025ac <SPI_EndRxTxTransaction>
 8002776:	2800      	cmp	r0, #0
 8002778:	f040 8081 	bne.w	800287e <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800277c:	68a3      	ldr	r3, [r4, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d132      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	9001      	str	r0, [sp, #4]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	9201      	str	r2, [sp, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	e02a      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002792:	6822      	ldr	r2, [r4, #0]
 8002794:	6893      	ldr	r3, [r2, #8]
 8002796:	0799      	lsls	r1, r3, #30
 8002798:	d50d      	bpl.n	80027b6 <HAL_SPI_TransmitReceive+0x108>
 800279a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800279c:	b29b      	uxth	r3, r3
 800279e:	b153      	cbz	r3, 80027b6 <HAL_SPI_TransmitReceive+0x108>
 80027a0:	b14d      	cbz	r5, 80027b6 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80027a4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80027a8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027aa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80027ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80027b4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027b6:	6893      	ldr	r3, [r2, #8]
 80027b8:	07db      	lsls	r3, r3, #31
 80027ba:	d50c      	bpl.n	80027d6 <HAL_SPI_TransmitReceive+0x128>
 80027bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b14b      	cbz	r3, 80027d6 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80027cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80027d4:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027d6:	f7fe fa1b 	bl	8000c10 <HAL_GetTick>
 80027da:	eba0 0008 	sub.w	r0, r0, r8
 80027de:	4287      	cmp	r7, r0
 80027e0:	d8be      	bhi.n	8002760 <HAL_SPI_TransmitReceive+0xb2>
 80027e2:	1c7e      	adds	r6, r7, #1
 80027e4:	d0bc      	beq.n	8002760 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80027e6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027ee:	2300      	movs	r3, #0
 80027f0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80027f4:	b003      	add	sp, #12
 80027f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027fa:	b109      	cbz	r1, 8002800 <HAL_SPI_TransmitReceive+0x152>
 80027fc:	2e01      	cmp	r6, #1
 80027fe:	d108      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002800:	782a      	ldrb	r2, [r5, #0]
 8002802:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002804:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002806:	3301      	adds	r3, #1
 8002808:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800280a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800280c:	3b01      	subs	r3, #1
 800280e:	b29b      	uxth	r3, r3
 8002810:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002812:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002814:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	b91b      	cbnz	r3, 8002822 <HAL_SPI_TransmitReceive+0x174>
 800281a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0a4      	beq.n	800276c <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	6893      	ldr	r3, [r2, #8]
 8002826:	0798      	lsls	r0, r3, #30
 8002828:	d50e      	bpl.n	8002848 <HAL_SPI_TransmitReceive+0x19a>
 800282a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800282c:	b29b      	uxth	r3, r3
 800282e:	b15b      	cbz	r3, 8002848 <HAL_SPI_TransmitReceive+0x19a>
 8002830:	b155      	cbz	r5, 8002848 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002832:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002838:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800283a:	3301      	adds	r3, #1
 800283c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800283e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002840:	3b01      	subs	r3, #1
 8002842:	b29b      	uxth	r3, r3
 8002844:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002846:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	6893      	ldr	r3, [r2, #8]
 800284c:	07d9      	lsls	r1, r3, #31
 800284e:	d50d      	bpl.n	800286c <HAL_SPI_TransmitReceive+0x1be>
 8002850:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002852:	b29b      	uxth	r3, r3
 8002854:	b153      	cbz	r3, 800286c <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002856:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800285c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800285e:	3301      	adds	r3, #1
 8002860:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002862:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002864:	3b01      	subs	r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800286a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800286c:	f7fe f9d0 	bl	8000c10 <HAL_GetTick>
 8002870:	eba0 0008 	sub.w	r0, r0, r8
 8002874:	4287      	cmp	r7, r0
 8002876:	d8cd      	bhi.n	8002814 <HAL_SPI_TransmitReceive+0x166>
 8002878:	1c7b      	adds	r3, r7, #1
 800287a:	d0cb      	beq.n	8002814 <HAL_SPI_TransmitReceive+0x166>
 800287c:	e7b3      	b.n	80027e6 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800287e:	2320      	movs	r3, #32
 8002880:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002882:	2001      	movs	r0, #1
 8002884:	e7b0      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8002886:	2002      	movs	r0, #2
 8002888:	e7ae      	b.n	80027e8 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800288a:	2002      	movs	r0, #2
 800288c:	e7b2      	b.n	80027f4 <HAL_SPI_TransmitReceive+0x146>

0800288e <HAL_SPI_GetState>:
  return hspi->State;
 800288e:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002892:	4770      	bx	lr

08002894 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002894:	6803      	ldr	r3, [r0, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800289c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028a6:	2320      	movs	r3, #32
 80028a8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80028ac:	4770      	bx	lr
	...

080028b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b2:	6803      	ldr	r3, [r0, #0]
 80028b4:	68c1      	ldr	r1, [r0, #12]
 80028b6:	691a      	ldr	r2, [r3, #16]
{
 80028b8:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028be:	430a      	orrs	r2, r1
 80028c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c2:	6925      	ldr	r5, [r4, #16]
 80028c4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028c6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c8:	69c0      	ldr	r0, [r0, #28]
 80028ca:	432a      	orrs	r2, r5
 80028cc:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80028ce:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028d2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80028d4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028d8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80028da:	430a      	orrs	r2, r1
 80028dc:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	69a1      	ldr	r1, [r4, #24]
 80028e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028e6:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ec:	615a      	str	r2, [r3, #20]
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f0:	d129      	bne.n	8002946 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d003      	beq.n	80028fe <UART_SetConfig+0x4e>
 80028f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d120      	bne.n	8002940 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028fe:	f7ff fd43 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002902:	6862      	ldr	r2, [r4, #4]
 8002904:	6825      	ldr	r5, [r4, #0]
 8002906:	1892      	adds	r2, r2, r2
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f04f 0119 	mov.w	r1, #25
 8002910:	415b      	adcs	r3, r3
 8002912:	fba0 0101 	umull	r0, r1, r0, r1
 8002916:	f7fd fc57 	bl	80001c8 <__aeabi_uldivmod>
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	fbb0 f4f1 	udiv	r4, r0, r1
 8002920:	fb01 0314 	mls	r3, r1, r4, r0
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	3332      	adds	r3, #50	; 0x32
 8002928:	fbb3 f3f1 	udiv	r3, r3, r1
 800292c:	f003 0207 	and.w	r2, r3, #7
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8002936:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800293a:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800293c:	60ab      	str	r3, [r5, #8]
 800293e:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002940:	f7ff fd12 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8002944:	e7dd      	b.n	8002902 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002946:	4293      	cmp	r3, r2
 8002948:	d002      	beq.n	8002950 <UART_SetConfig+0xa0>
 800294a:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <UART_SetConfig+0xd8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d116      	bne.n	800297e <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002950:	f7ff fd1a 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002954:	6863      	ldr	r3, [r4, #4]
 8002956:	6825      	ldr	r5, [r4, #0]
 8002958:	2119      	movs	r1, #25
 800295a:	009a      	lsls	r2, r3, #2
 800295c:	fba0 0101 	umull	r0, r1, r0, r1
 8002960:	0f9b      	lsrs	r3, r3, #30
 8002962:	f7fd fc31 	bl	80001c8 <__aeabi_uldivmod>
 8002966:	2264      	movs	r2, #100	; 0x64
 8002968:	fbb0 f1f2 	udiv	r1, r0, r2
 800296c:	fb02 0311 	mls	r3, r2, r1, r0
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	3332      	adds	r3, #50	; 0x32
 8002974:	fbb3 f3f2 	udiv	r3, r3, r2
 8002978:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800297c:	e7de      	b.n	800293c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800297e:	f7ff fcf3 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8002982:	e7e7      	b.n	8002954 <UART_SetConfig+0xa4>
 8002984:	40011000 	.word	0x40011000
 8002988:	40011400 	.word	0x40011400

0800298c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	4604      	mov	r4, r0
 8002990:	460e      	mov	r6, r1
 8002992:	4617      	mov	r7, r2
 8002994:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002996:	6821      	ldr	r1, [r4, #0]
 8002998:	680b      	ldr	r3, [r1, #0]
 800299a:	ea36 0303 	bics.w	r3, r6, r3
 800299e:	d101      	bne.n	80029a4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80029a0:	2000      	movs	r0, #0
}
 80029a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80029a4:	1c6b      	adds	r3, r5, #1
 80029a6:	d0f7      	beq.n	8002998 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029a8:	b995      	cbnz	r5, 80029d0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80029bc:	2320      	movs	r3, #32
 80029be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029c2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80029c6:	2300      	movs	r3, #0
 80029c8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80029cc:	2003      	movs	r0, #3
 80029ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029d0:	f7fe f91e 	bl	8000c10 <HAL_GetTick>
 80029d4:	1bc0      	subs	r0, r0, r7
 80029d6:	4285      	cmp	r5, r0
 80029d8:	d2dd      	bcs.n	8002996 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80029da:	e7e6      	b.n	80029aa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080029dc <HAL_UART_Init>:
{
 80029dc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80029de:	4604      	mov	r4, r0
 80029e0:	b340      	cbz	r0, 8002a34 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80029e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029ea:	b91b      	cbnz	r3, 80029f4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80029ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80029f0:	f001 fdd0 	bl	8004594 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80029f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029f6:	2324      	movs	r3, #36	; 0x24
 80029f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80029fc:	68d3      	ldr	r3, [r2, #12]
 80029fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a02:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff ff53 	bl	80028b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a1a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a22:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002a26:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002a32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
}
 8002a36:	bd10      	pop	{r4, pc}

08002a38 <HAL_UART_Transmit>:
{
 8002a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a3c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002a3e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a42:	2b20      	cmp	r3, #32
{
 8002a44:	4604      	mov	r4, r0
 8002a46:	460d      	mov	r5, r1
 8002a48:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002a4a:	d151      	bne.n	8002af0 <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	d04c      	beq.n	8002aea <HAL_UART_Transmit+0xb2>
 8002a50:	2a00      	cmp	r2, #0
 8002a52:	d04a      	beq.n	8002aea <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8002a54:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d049      	beq.n	8002af0 <HAL_UART_Transmit+0xb8>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a62:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a66:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a68:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002a70:	f7fe f8ce 	bl	8000c10 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002a74:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002a78:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002a7a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002a7e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8002a82:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b95b      	cbnz	r3, 8002aa0 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a88:	463b      	mov	r3, r7
 8002a8a:	4632      	mov	r2, r6
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff ff7c 	bl	800298c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a94:	b9a0      	cbnz	r0, 8002ac0 <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8002a96:	2320      	movs	r3, #32
 8002a98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8002aa0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aa8:	68a3      	ldr	r3, [r4, #8]
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aae:	4632      	mov	r2, r6
 8002ab0:	463b      	mov	r3, r7
 8002ab2:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002ab6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aba:	f7ff ff67 	bl	800298c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002abe:	b110      	cbz	r0, 8002ac6 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ac6:	882b      	ldrh	r3, [r5, #0]
 8002ac8:	6822      	ldr	r2, [r4, #0]
 8002aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ace:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ad0:	6923      	ldr	r3, [r4, #16]
 8002ad2:	b943      	cbnz	r3, 8002ae6 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8002ad4:	3502      	adds	r5, #2
 8002ad6:	e7d4      	b.n	8002a82 <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ad8:	f7ff ff58 	bl	800298c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	d1ef      	bne.n	8002ac0 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	782a      	ldrb	r2, [r5, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	3501      	adds	r5, #1
 8002ae8:	e7cb      	b.n	8002a82 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8002aea:	2001      	movs	r0, #1
 8002aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8002af0:	2002      	movs	r0, #2
}
 8002af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002af6 <HAL_UART_TxCpltCallback>:
 8002af6:	4770      	bx	lr

08002af8 <HAL_UART_RxCpltCallback>:
 8002af8:	4770      	bx	lr

08002afa <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002afa:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002afe:	2b22      	cmp	r3, #34	; 0x22
{
 8002b00:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b02:	d136      	bne.n	8002b72 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002b04:	6883      	ldr	r3, [r0, #8]
 8002b06:	6901      	ldr	r1, [r0, #16]
 8002b08:	6802      	ldr	r2, [r0, #0]
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b10:	d123      	bne.n	8002b5a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b12:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b14:	b9e9      	cbnz	r1, 8002b52 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002b1e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002b20:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002b22:	3c01      	subs	r4, #1
 8002b24:	b2a4      	uxth	r4, r4
 8002b26:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002b28:	b98c      	cbnz	r4, 8002b4e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b2a:	6803      	ldr	r3, [r0, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	f022 0220 	bic.w	r2, r2, #32
 8002b32:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b3a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002b44:	2320      	movs	r3, #32
 8002b46:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002b4a:	f7ff ffd5 	bl	8002af8 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002b4e:	2000      	movs	r0, #0
}
 8002b50:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f823 2b01 	strh.w	r2, [r3], #1
 8002b58:	e7e1      	b.n	8002b1e <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b5a:	b921      	cbnz	r1, 8002b66 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b5c:	1c59      	adds	r1, r3, #1
 8002b5e:	6852      	ldr	r2, [r2, #4]
 8002b60:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e7dc      	b.n	8002b20 <UART_Receive_IT+0x26>
 8002b66:	6852      	ldr	r2, [r2, #4]
 8002b68:	1c59      	adds	r1, r3, #1
 8002b6a:	6281      	str	r1, [r0, #40]	; 0x28
 8002b6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b70:	e7f7      	b.n	8002b62 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002b72:	2002      	movs	r0, #2
 8002b74:	bd10      	pop	{r4, pc}

08002b76 <HAL_UART_ErrorCallback>:
 8002b76:	4770      	bx	lr

08002b78 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b78:	6803      	ldr	r3, [r0, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b7c:	68d9      	ldr	r1, [r3, #12]
{
 8002b7e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002b80:	0716      	lsls	r6, r2, #28
{
 8002b82:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b84:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002b86:	d107      	bne.n	8002b98 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b88:	0696      	lsls	r6, r2, #26
 8002b8a:	d55c      	bpl.n	8002c46 <HAL_UART_IRQHandler+0xce>
 8002b8c:	068d      	lsls	r5, r1, #26
 8002b8e:	d55a      	bpl.n	8002c46 <HAL_UART_IRQHandler+0xce>
}
 8002b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002b94:	f7ff bfb1 	b.w	8002afa <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b98:	f015 0501 	ands.w	r5, r5, #1
 8002b9c:	d102      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x2c>
 8002b9e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002ba2:	d050      	beq.n	8002c46 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ba4:	07d0      	lsls	r0, r2, #31
 8002ba6:	d505      	bpl.n	8002bb4 <HAL_UART_IRQHandler+0x3c>
 8002ba8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002baa:	bf42      	ittt	mi
 8002bac:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002bae:	f043 0301 	orrmi.w	r3, r3, #1
 8002bb2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb4:	0756      	lsls	r6, r2, #29
 8002bb6:	d504      	bpl.n	8002bc2 <HAL_UART_IRQHandler+0x4a>
 8002bb8:	b11d      	cbz	r5, 8002bc2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc2:	0790      	lsls	r0, r2, #30
 8002bc4:	d504      	bpl.n	8002bd0 <HAL_UART_IRQHandler+0x58>
 8002bc6:	b11d      	cbz	r5, 8002bd0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bd0:	0713      	lsls	r3, r2, #28
 8002bd2:	d506      	bpl.n	8002be2 <HAL_UART_IRQHandler+0x6a>
 8002bd4:	068e      	lsls	r6, r1, #26
 8002bd6:	d400      	bmi.n	8002bda <HAL_UART_IRQHandler+0x62>
 8002bd8:	b11d      	cbz	r5, 8002be2 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d066      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002be8:	0695      	lsls	r5, r2, #26
 8002bea:	d504      	bpl.n	8002bf6 <HAL_UART_IRQHandler+0x7e>
 8002bec:	0688      	lsls	r0, r1, #26
 8002bee:	d502      	bpl.n	8002bf6 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7ff ff82 	bl	8002afa <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bfa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002bfc:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8002bfe:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c00:	d402      	bmi.n	8002c08 <HAL_UART_IRQHandler+0x90>
 8002c02:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002c06:	d01a      	beq.n	8002c3e <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8002c08:	f7ff fe44 	bl	8002894 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	0652      	lsls	r2, r2, #25
 8002c12:	d510      	bpl.n	8002c36 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c14:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002c16:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c1c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002c1e:	b150      	cbz	r0, 8002c36 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c20:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_UART_IRQHandler+0x140>)
 8002c22:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c24:	f7fe f878 	bl	8000d18 <HAL_DMA_Abort_IT>
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d044      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c32:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002c34:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7ff ff9d 	bl	8002b76 <HAL_UART_ErrorCallback>
 8002c3c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002c3e:	f7ff ff9a 	bl	8002b76 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c42:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002c44:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c46:	0616      	lsls	r6, r2, #24
 8002c48:	d527      	bpl.n	8002c9a <HAL_UART_IRQHandler+0x122>
 8002c4a:	060d      	lsls	r5, r1, #24
 8002c4c:	d525      	bpl.n	8002c9a <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c4e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002c52:	2a21      	cmp	r2, #33	; 0x21
 8002c54:	d12f      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c56:	68a2      	ldr	r2, [r4, #8]
 8002c58:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002c5c:	6a22      	ldr	r2, [r4, #32]
 8002c5e:	d117      	bne.n	8002c90 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c60:	8811      	ldrh	r1, [r2, #0]
 8002c62:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002c66:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002c68:	6921      	ldr	r1, [r4, #16]
 8002c6a:	b979      	cbnz	r1, 8002c8c <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8002c6c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002c6e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002c70:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002c72:	3a01      	subs	r2, #1
 8002c74:	b292      	uxth	r2, r2
 8002c76:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002c78:	b9ea      	cbnz	r2, 8002cb6 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c80:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002c8c:	3201      	adds	r2, #1
 8002c8e:	e7ee      	b.n	8002c6e <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c90:	1c51      	adds	r1, r2, #1
 8002c92:	6221      	str	r1, [r4, #32]
 8002c94:	7812      	ldrb	r2, [r2, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	e7ea      	b.n	8002c70 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c9a:	0650      	lsls	r0, r2, #25
 8002c9c:	d50b      	bpl.n	8002cb6 <HAL_UART_IRQHandler+0x13e>
 8002c9e:	064a      	lsls	r2, r1, #25
 8002ca0:	d509      	bpl.n	8002cb6 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ca8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002caa:	2320      	movs	r3, #32
 8002cac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7ff ff20 	bl	8002af6 <HAL_UART_TxCpltCallback>
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	08002cbd 	.word	0x08002cbd

08002cbc <UART_DMAAbortOnError>:
{
 8002cbc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cc4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002cc6:	f7ff ff56 	bl	8002b76 <HAL_UART_ErrorCallback>
 8002cca:	bd08      	pop	{r3, pc}

08002ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002cd2:	2003      	movs	r0, #3
 8002cd4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cd6:	6902      	ldr	r2, [r0, #16]
 8002cd8:	2a00      	cmp	r2, #0
 8002cda:	daf8      	bge.n	8002cce <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002cdc:	6903      	ldr	r3, [r0, #16]
 8002cde:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <USB_CoreReset+0x2c>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002ce6:	3a01      	subs	r2, #1
 8002ce8:	d0f3      	beq.n	8002cd2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002cea:	6903      	ldr	r3, [r0, #16]
 8002cec:	f013 0301 	ands.w	r3, r3, #1
 8002cf0:	d1f9      	bne.n	8002ce6 <USB_CoreReset+0x1a>

  return HAL_OK;
 8002cf2:	4618      	mov	r0, r3
}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	00030d41 	.word	0x00030d41

08002cfc <USB_CoreInit>:
{
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	b538      	push	{r3, r4, r5, lr}
 8002d00:	ad05      	add	r5, sp, #20
 8002d02:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d08:	2b01      	cmp	r3, #1
{
 8002d0a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d0c:	d125      	bne.n	8002d5a <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d14:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d16:	68c3      	ldr	r3, [r0, #12]
 8002d18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d20:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d22:	68c3      	ldr	r3, [r0, #12]
 8002d24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002d28:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002d2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d2c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d2e:	bf02      	ittt	eq
 8002d30:	68c3      	ldreq	r3, [r0, #12]
 8002d32:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002d36:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002d38:	f7ff ffc8 	bl	8002ccc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002d3c:	9b08      	ldr	r3, [sp, #32]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d42:	68a3      	ldr	r3, [r4, #8]
 8002d44:	f043 0306 	orr.w	r3, r3, #6
 8002d48:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d4a:	68a3      	ldr	r3, [r4, #8]
 8002d4c:	f043 0320 	orr.w	r3, r3, #32
 8002d50:	60a3      	str	r3, [r4, #8]
}
 8002d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d56:	b004      	add	sp, #16
 8002d58:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d5a:	68c3      	ldr	r3, [r0, #12]
 8002d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d60:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002d62:	f7ff ffb3 	bl	8002ccc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d68:	b923      	cbnz	r3, 8002d74 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d70:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d72:	e7e3      	b.n	8002d3c <USB_CoreInit+0x40>
 8002d74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	e7f9      	b.n	8002d70 <USB_CoreInit+0x74>

08002d7c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d7c:	6883      	ldr	r3, [r0, #8]
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	6083      	str	r3, [r0, #8]
}
 8002d84:	2000      	movs	r0, #0
 8002d86:	4770      	bx	lr

08002d88 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d88:	6883      	ldr	r3, [r0, #8]
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6083      	str	r3, [r0, #8]
}
 8002d90:	2000      	movs	r0, #0
 8002d92:	4770      	bx	lr

08002d94 <USB_SetCurrentMode>:
{
 8002d94:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d96:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002d98:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d9a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002d9e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002da0:	d108      	bne.n	8002db4 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002da2:	68c3      	ldr	r3, [r0, #12]
 8002da4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002da8:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002daa:	2032      	movs	r0, #50	; 0x32
 8002dac:	f7fd ff36 	bl	8000c1c <HAL_Delay>
  return HAL_OK;
 8002db0:	2000      	movs	r0, #0
 8002db2:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002db4:	b919      	cbnz	r1, 8002dbe <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002db6:	68c3      	ldr	r3, [r0, #12]
 8002db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dbc:	e7f4      	b.n	8002da8 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002dbe:	2001      	movs	r0, #1
}
 8002dc0:	bd08      	pop	{r3, pc}
	...

08002dc4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002dc4:	0189      	lsls	r1, r1, #6
 8002dc6:	f041 0120 	orr.w	r1, r1, #32
 8002dca:	4a06      	ldr	r2, [pc, #24]	; (8002de4 <USB_FlushTxFifo+0x20>)
 8002dcc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002dce:	3a01      	subs	r2, #1
 8002dd0:	d005      	beq.n	8002dde <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002dd2:	6903      	ldr	r3, [r0, #16]
 8002dd4:	f013 0320 	ands.w	r3, r3, #32
 8002dd8:	d1f9      	bne.n	8002dce <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002dde:	2003      	movs	r0, #3
}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	00030d41 	.word	0x00030d41

08002de8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002de8:	2310      	movs	r3, #16
 8002dea:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <USB_FlushRxFifo+0x1c>)
 8002dec:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002dee:	3a01      	subs	r2, #1
 8002df0:	d005      	beq.n	8002dfe <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002df2:	6903      	ldr	r3, [r0, #16]
 8002df4:	f013 0310 	ands.w	r3, r3, #16
 8002df8:	d1f9      	bne.n	8002dee <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002dfe:	2003      	movs	r0, #3
}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	00030d41 	.word	0x00030d41

08002e08 <USB_WritePacket>:
{
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002e0e:	b94c      	cbnz	r4, 8002e24 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8002e10:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002e12:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002e16:	f023 0303 	bic.w	r3, r3, #3
 8002e1a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002e1e:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 8002e20:	4299      	cmp	r1, r3
 8002e22:	d101      	bne.n	8002e28 <USB_WritePacket+0x20>
}
 8002e24:	2000      	movs	r0, #0
 8002e26:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002e28:	f851 2b04 	ldr.w	r2, [r1], #4
 8002e2c:	6002      	str	r2, [r0, #0]
 8002e2e:	e7f7      	b.n	8002e20 <USB_WritePacket+0x18>

08002e30 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002e30:	3203      	adds	r2, #3
 8002e32:	f022 0203 	bic.w	r2, r2, #3
 8002e36:	440a      	add	r2, r1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002e38:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002e3c:	4291      	cmp	r1, r2
 8002e3e:	d101      	bne.n	8002e44 <USB_ReadPacket+0x14>
}
 8002e40:	4608      	mov	r0, r1
 8002e42:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002e44:	6803      	ldr	r3, [r0, #0]
 8002e46:	f841 3b04 	str.w	r3, [r1], #4
 8002e4a:	e7f7      	b.n	8002e3c <USB_ReadPacket+0xc>

08002e4c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002e4c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002e4e:	6980      	ldr	r0, [r0, #24]
}
 8002e50:	4010      	ands	r0, r2
 8002e52:	4770      	bx	lr

08002e54 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8002e54:	6940      	ldr	r0, [r0, #20]
}
 8002e56:	f000 0001 	and.w	r0, r0, #1
 8002e5a:	4770      	bx	lr

08002e5c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002e5c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8002e60:	f023 0303 	bic.w	r3, r3, #3
{
 8002e64:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002e66:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002e6a:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8002e6e:	f001 0303 	and.w	r3, r1, #3
 8002e72:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8002e74:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002e76:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002e7a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8002e7e:	d104      	bne.n	8002e8a <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8002e80:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8002e84:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8002e86:	2000      	movs	r0, #0
 8002e88:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8002e8a:	2902      	cmp	r1, #2
 8002e8c:	d1fb      	bne.n	8002e86 <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8002e8e:	f241 7370 	movw	r3, #6000	; 0x1770
 8002e92:	e7f7      	b.n	8002e84 <USB_InitFSLSPClkSel+0x28>

08002e94 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8002e96:	2500      	movs	r5, #0
 8002e98:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002e9a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002e9e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002ea0:	9b01      	ldr	r3, [sp, #4]
 8002ea2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ea6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002ea8:	9b01      	ldr	r3, [sp, #4]
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002eae:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002eb0:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002eb4:	2064      	movs	r0, #100	; 0x64
 8002eb6:	f7fd feb1 	bl	8000c1c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002eba:	9b01      	ldr	r3, [sp, #4]
 8002ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002ec4:	200a      	movs	r0, #10
 8002ec6:	f7fd fea9 	bl	8000c1c <HAL_Delay>

  return HAL_OK;
}
 8002eca:	4628      	mov	r0, r5
 8002ecc:	b003      	add	sp, #12
 8002ece:	bd30      	pop	{r4, r5, pc}

08002ed0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002ed0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002ed6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002eda:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002edc:	9b01      	ldr	r3, [sp, #4]
 8002ede:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ee2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002ee4:	9b01      	ldr	r3, [sp, #4]
 8002ee6:	04da      	lsls	r2, r3, #19
 8002ee8:	d406      	bmi.n	8002ef8 <USB_DriveVbus+0x28>
 8002eea:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002eec:	bf02      	ittt	eq
 8002eee:	9b01      	ldreq	r3, [sp, #4]
 8002ef0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002ef4:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002ef8:	9b01      	ldr	r3, [sp, #4]
 8002efa:	04db      	lsls	r3, r3, #19
 8002efc:	d505      	bpl.n	8002f0a <USB_DriveVbus+0x3a>
 8002efe:	b921      	cbnz	r1, 8002f0a <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002f00:	9b01      	ldr	r3, [sp, #4]
 8002f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f06:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	b002      	add	sp, #8
 8002f0e:	4770      	bx	lr

08002f10 <USB_HostInit>:
{
 8002f10:	b084      	sub	sp, #16
 8002f12:	b538      	push	{r3, r4, r5, lr}
 8002f14:	4604      	mov	r4, r0
 8002f16:	a805      	add	r0, sp, #20
 8002f18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f28:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f2c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002f30:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f38:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002f3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f3c:	05da      	lsls	r2, r3, #23
 8002f3e:	d53f      	bpl.n	8002fc0 <USB_HostInit+0xb0>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002f40:	9b07      	ldr	r3, [sp, #28]
 8002f42:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002f44:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8002f48:	d13c      	bne.n	8002fc4 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002f4e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002f52:	2110      	movs	r1, #16
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff ff35 	bl	8002dc4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f7ff ff44 	bl	8002de8 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	9906      	ldr	r1, [sp, #24]
 8002f64:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8002f6c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8002f6e:	428b      	cmp	r3, r1
 8002f70:	d12b      	bne.n	8002fca <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 8002f72:	2101      	movs	r1, #1
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7ff ffab 	bl	8002ed0 <USB_DriveVbus>
  HAL_Delay(200U);
 8002f7a:	20c8      	movs	r0, #200	; 0xc8
 8002f7c:	f7fd fe4e 	bl	8000c1c <HAL_Delay>
  USBx->GINTMSK = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f88:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8002f8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f8c:	05db      	lsls	r3, r3, #23
 8002f8e:	d521      	bpl.n	8002fd4 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8002f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f94:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8002f96:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002f9e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8002fa2:	9b08      	ldr	r3, [sp, #32]
 8002fa4:	b91b      	cbnz	r3, 8002fae <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002fa6:	69a3      	ldr	r3, [r4, #24]
 8002fa8:	f043 0310 	orr.w	r3, r3, #16
 8002fac:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8002fae:	69a2      	ldr	r2, [r4, #24]
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <USB_HostInit+0xd8>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61a3      	str	r3, [r4, #24]
}
 8002fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fba:	2000      	movs	r0, #0
 8002fbc:	b004      	add	sp, #16
 8002fbe:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002fc0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002fc4:	f023 0304 	bic.w	r3, r3, #4
 8002fc8:	e7c1      	b.n	8002f4e <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002fca:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002fcc:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8002fce:	60d5      	str	r5, [r2, #12]
 8002fd0:	3220      	adds	r2, #32
 8002fd2:	e7cc      	b.n	8002f6e <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002fd8:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002fdc:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002fde:	4b03      	ldr	r3, [pc, #12]	; (8002fec <USB_HostInit+0xdc>)
 8002fe0:	e7dd      	b.n	8002f9e <USB_HostInit+0x8e>
 8002fe2:	bf00      	nop
 8002fe4:	00e00300 	.word	0x00e00300
 8002fe8:	a3200008 	.word	0xa3200008
 8002fec:	004000e0 	.word	0x004000e0

08002ff0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002ff0:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002ff6:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002ffa:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002ffc:	9801      	ldr	r0, [sp, #4]
}
 8002ffe:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003002:	b002      	add	sp, #8
 8003004:	4770      	bx	lr

08003006 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003006:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800300a:	6880      	ldr	r0, [r0, #8]
}
 800300c:	b280      	uxth	r0, r0
 800300e:	4770      	bx	lr

08003010 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003014:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8003018:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
{
 800301c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003020:	4605      	mov	r5, r0
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003026:	60a0      	str	r0, [r4, #8]
 8003028:	fa4f f882 	sxtb.w	r8, r2
 800302c:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8003030:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003034:	2e03      	cmp	r6, #3
 8003036:	d86c      	bhi.n	8003112 <USB_HC_Init+0x102>
 8003038:	e8df f006 	tbb	[pc, r6]
 800303c:	4c026102 	.word	0x4c026102
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003040:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003044:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003048:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 800304a:	da03      	bge.n	8003054 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800304c:	68e1      	ldr	r1, [r4, #12]
 800304e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003052:	e005      	b.n	8003060 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003054:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003056:	05c9      	lsls	r1, r1, #23
 8003058:	d542      	bpl.n	80030e0 <USB_HC_Init+0xd0>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800305a:	68e1      	ldr	r1, [r4, #12]
 800305c:	f041 0160 	orr.w	r1, r1, #96	; 0x60
 8003060:	60e1      	str	r1, [r4, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003062:	2000      	movs	r0, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003064:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8003068:	2101      	movs	r1, #1
 800306a:	fa01 f10e 	lsl.w	r1, r1, lr
 800306e:	4321      	orrs	r1, r4
 8003070:	f8cc 1018 	str.w	r1, [ip, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003074:	69a9      	ldr	r1, [r5, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8003076:	f1b8 0f00 	cmp.w	r8, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800307a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800307e:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 8003080:	bfb4      	ite	lt
 8003082:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8003086:	2400      	movge	r4, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003088:	f8bd 5020 	ldrh.w	r5, [sp, #32]
    HCcharLowSpeed = 0U;
 800308c:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003090:	059b      	lsls	r3, r3, #22
 8003092:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003096:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800309a:	02d2      	lsls	r2, r2, #11
 800309c:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80030a0:	432b      	orrs	r3, r5
 80030a2:	4313      	orrs	r3, r2
 80030a4:	04b2      	lsls	r2, r6, #18
 80030a6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
    HCcharLowSpeed = 0U;
 80030aa:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80030ac:	ea43 0302 	orr.w	r3, r3, r2
    HCcharLowSpeed = 0U;
 80030b0:	bf0c      	ite	eq
 80030b2:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 80030b6:	2100      	movne	r1, #0
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80030b8:	4323      	orrs	r3, r4
 80030ba:	430b      	orrs	r3, r1

  if (ep_type == EP_TYPE_INTR)
 80030bc:	2e03      	cmp	r6, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80030be:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 80030c2:	d128      	bne.n	8003116 <USB_HC_Init+0x106>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80030c4:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80030c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030cc:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 80030d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80030d4:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 80030d8:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80030dc:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 80030de:	dbb5      	blt.n	800304c <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80030e0:	f8dc 0018 	ldr.w	r0, [ip, #24]
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f10e 	lsl.w	r1, r1, lr
 80030ea:	4301      	orrs	r1, r0
 80030ec:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80030f0:	69a9      	ldr	r1, [r5, #24]
  HAL_StatusTypeDef ret = HAL_OK;
 80030f2:	2000      	movs	r0, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80030f4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80030f8:	61a9      	str	r1, [r5, #24]
    HCcharEpDir = 0U;
 80030fa:	4604      	mov	r4, r0
 80030fc:	e7c4      	b.n	8003088 <USB_HC_Init+0x78>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80030fe:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8003102:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003106:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003108:	daea      	bge.n	80030e0 <USB_HC_Init+0xd0>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800310a:	68e1      	ldr	r1, [r4, #12]
 800310c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003110:	e7a6      	b.n	8003060 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8003112:	2001      	movs	r0, #1
 8003114:	e7a6      	b.n	8003064 <USB_HC_Init+0x54>
}
 8003116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800311a <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800311a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800311e:	6940      	ldr	r0, [r0, #20]
}
 8003120:	b280      	uxth	r0, r0
 8003122:	4770      	bx	lr

08003124 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003124:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003128:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 800312c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003130:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003134:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800313c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003140:	d11e      	bne.n	8003180 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003142:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003144:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003148:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800314c:	d137      	bne.n	80031be <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800314e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003152:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003156:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800315a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800315e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003162:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003166:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800316a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800316e:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8003172:	3b01      	subs	r3, #1
 8003174:	d002      	beq.n	800317c <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003176:	6811      	ldr	r1, [r2, #0]
 8003178:	2900      	cmp	r1, #0
 800317a:	dbfa      	blt.n	8003172 <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800317c:	2000      	movs	r0, #0
 800317e:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003180:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8003184:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003188:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800318c:	d117      	bne.n	80031be <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800318e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003192:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003196:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800319a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800319e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80031a2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80031a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80031aa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80031ae:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 80031b2:	3b01      	subs	r3, #1
 80031b4:	d0e2      	beq.n	800317c <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80031b6:	6811      	ldr	r1, [r2, #0]
 80031b8:	2900      	cmp	r1, #0
 80031ba:	dbfa      	blt.n	80031b2 <USB_HC_Halt+0x8e>
 80031bc:	e7de      	b.n	800317c <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80031be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031c2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80031c6:	e7d9      	b.n	800317c <USB_HC_Halt+0x58>

080031c8 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80031c8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80031cc:	4a06      	ldr	r2, [pc, #24]	; (80031e8 <USB_DoPing+0x20>)
 80031ce:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80031d2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80031de:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 80031e2:	2000      	movs	r0, #0
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	80080000 	.word	0x80080000

080031ec <USB_HC_StartXfer>:
{
 80031ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80031f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80031f2:	05db      	lsls	r3, r3, #23
{
 80031f4:	4616      	mov	r6, r2
 80031f6:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80031f8:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80031fa:	d517      	bpl.n	800322c <USB_HC_StartXfer+0x40>
 80031fc:	790d      	ldrb	r5, [r1, #4]
 80031fe:	b9ad      	cbnz	r5, 800322c <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003200:	b94e      	cbnz	r6, 8003216 <USB_HC_StartXfer+0x2a>
 8003202:	794b      	ldrb	r3, [r1, #5]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d111      	bne.n	800322c <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8003208:	4611      	mov	r1, r2
 800320a:	f7ff ffdd 	bl	80031c8 <USB_DoPing>
}
 800320e:	2000      	movs	r0, #0
 8003210:	b002      	add	sp, #8
 8003212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8003216:	2e01      	cmp	r6, #1
 8003218:	d108      	bne.n	800322c <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800321a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 800321e:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8003222:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8003226:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 800322a:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 800322c:	6908      	ldr	r0, [r1, #16]
 800322e:	2800      	cmp	r0, #0
 8003230:	d066      	beq.n	8003300 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003232:	890b      	ldrh	r3, [r1, #8]
 8003234:	3801      	subs	r0, #1
 8003236:	4418      	add	r0, r3
 8003238:	fbb0 f0f3 	udiv	r0, r0, r3
 800323c:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 800323e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003242:	d903      	bls.n	800324c <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	610b      	str	r3, [r1, #16]
      num_packets = max_hc_pkt_count;
 8003248:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 800324c:	78cf      	ldrb	r7, [r1, #3]
 800324e:	b117      	cbz	r7, 8003256 <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003250:	890b      	ldrh	r3, [r1, #8]
 8003252:	4343      	muls	r3, r0
 8003254:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003256:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800325a:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800325c:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003260:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003264:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003268:	ea4e 0e08 	orr.w	lr, lr, r8
 800326c:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800334c <USB_HC_StartXfer+0x160>
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003270:	eb04 1542 	add.w	r5, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003274:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8003278:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800327c:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8003280:	b116      	cbz	r6, 8003288 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003282:	68c8      	ldr	r0, [r1, #12]
 8003284:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003288:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 800328c:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003290:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8003294:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
 8003298:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800329c:	43c0      	mvns	r0, r0
 800329e:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80032a2:	0740      	lsls	r0, r0, #29
 80032a4:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 80032a8:	ea40 000c 	orr.w	r0, r0, ip
 80032ac:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032b0:	4825      	ldr	r0, [pc, #148]	; (8003348 <USB_HC_StartXfer+0x15c>)
 80032b2:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 80032b6:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032ba:	f8d0 c000 	ldr.w	ip, [r0]
 80032be:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 80032c2:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80032c6:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 80032ca:	b1df      	cbz	r7, 8003304 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80032cc:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80032d0:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d4:	f8d0 c000 	ldr.w	ip, [r0]
 80032d8:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 80032dc:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032e0:	6800      	ldr	r0, [r0, #0]
 80032e2:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 80032e6:	2e00      	cmp	r6, #0
 80032e8:	d191      	bne.n	800320e <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d18f      	bne.n	800320e <USB_HC_StartXfer+0x22>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d08d      	beq.n	800320e <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 80032f2:	79c8      	ldrb	r0, [r1, #7]
 80032f4:	2803      	cmp	r0, #3
 80032f6:	d813      	bhi.n	8003320 <USB_HC_StartXfer+0x134>
 80032f8:	e8df f000 	tbb	[pc, r0]
 80032fc:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8003300:	2001      	movs	r0, #1
 8003302:	e7a3      	b.n	800324c <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003304:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8003308:	e7e2      	b.n	80032d0 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800330a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800330c:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800330e:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8003312:	b280      	uxth	r0, r0
 8003314:	4285      	cmp	r5, r0
 8003316:	d903      	bls.n	8003320 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003318:	69a0      	ldr	r0, [r4, #24]
 800331a:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800331e:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003320:	2000      	movs	r0, #0
 8003322:	9000      	str	r0, [sp, #0]
 8003324:	b29b      	uxth	r3, r3
 8003326:	68c9      	ldr	r1, [r1, #12]
 8003328:	4620      	mov	r0, r4
 800332a:	f7ff fd6d 	bl	8002e08 <USB_WritePacket>
 800332e:	e76e      	b.n	800320e <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003330:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003334:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003336:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800333a:	b280      	uxth	r0, r0
 800333c:	4285      	cmp	r5, r0
 800333e:	d9ef      	bls.n	8003320 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003340:	69a0      	ldr	r0, [r4, #24]
 8003342:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8003346:	e7ea      	b.n	800331e <USB_HC_StartXfer+0x132>
 8003348:	20000164 	.word	0x20000164
 800334c:	1ff80000 	.word	0x1ff80000

08003350 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003350:	6883      	ldr	r3, [r0, #8]
 8003352:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003356:	b510      	push	{r4, lr}


  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003358:	2110      	movs	r1, #16
{
 800335a:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800335c:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800335e:	f7ff fd31 	bl	8002dc4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003362:	4620      	mov	r0, r4
 8003364:	f7ff fd40 	bl	8002de8 <USB_FlushRxFifo>
 8003368:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800336c:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8003370:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003372:	6811      	ldr	r1, [r2, #0]
 8003374:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003378:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800337c:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8003380:	4290      	cmp	r0, r2
 8003382:	d1f6      	bne.n	8003372 <USB_StopHost+0x22>
 8003384:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800338c:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8003390:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8003392:	3001      	adds	r0, #1
 8003394:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003398:	d802      	bhi.n	80033a0 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800339a:	6819      	ldr	r1, [r3, #0]
 800339c:	2900      	cmp	r1, #0
 800339e:	dbf8      	blt.n	8003392 <USB_StopHost+0x42>
 80033a0:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d1ef      	bne.n	8003386 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033aa:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80033ae:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80033b0:	68a3      	ldr	r3, [r4, #8]
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	60a3      	str	r3, [r4, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80033b8:	2000      	movs	r0, #0
 80033ba:	bd10      	pop	{r4, pc}

080033bc <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 80033bc:	2000      	movs	r0, #0
 80033be:	4770      	bx	lr

080033c0 <USBH_CDC_InterfaceDeInit>:
{
 80033c0:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80033c2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80033c6:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 80033c8:	7821      	ldrb	r1, [r4, #0]
{
 80033ca:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 80033cc:	b139      	cbz	r1, 80033de <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80033ce:	f000 fe17 	bl	8004000 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80033d2:	7821      	ldrb	r1, [r4, #0]
 80033d4:	4628      	mov	r0, r5
 80033d6:	f000 fe2f 	bl	8004038 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80033da:	2300      	movs	r3, #0
 80033dc:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 80033de:	7b21      	ldrb	r1, [r4, #12]
 80033e0:	b141      	cbz	r1, 80033f4 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80033e2:	4628      	mov	r0, r5
 80033e4:	f000 fe0c 	bl	8004000 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80033e8:	7b21      	ldrb	r1, [r4, #12]
 80033ea:	4628      	mov	r0, r5
 80033ec:	f000 fe24 	bl	8004038 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80033f0:	2300      	movs	r3, #0
 80033f2:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 80033f4:	7b61      	ldrb	r1, [r4, #13]
 80033f6:	b141      	cbz	r1, 800340a <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80033f8:	4628      	mov	r0, r5
 80033fa:	f000 fe01 	bl	8004000 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80033fe:	7b61      	ldrb	r1, [r4, #13]
 8003400:	4628      	mov	r0, r5
 8003402:	f000 fe19 	bl	8004038 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8003406:	2300      	movs	r3, #0
 8003408:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 800340a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800340e:	69d8      	ldr	r0, [r3, #28]
 8003410:	b128      	cbz	r0, 800341e <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8003412:	f001 fb0f 	bl	8004a34 <free>
    phost->pActiveClass->pData = 0U;
 8003416:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800341a:	2200      	movs	r2, #0
 800341c:	61da      	str	r2, [r3, #28]
}
 800341e:	2000      	movs	r0, #0
 8003420:	bd38      	pop	{r3, r4, r5, pc}

08003422 <USBH_CDC_InterfaceInit>:
{
 8003422:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8003424:	2202      	movs	r2, #2
{
 8003426:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8003428:	2301      	movs	r3, #1
 800342a:	4611      	mov	r1, r2
{
 800342c:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 800342e:	f000 f9b2 	bl	8003796 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8003432:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost,
 8003434:	4606      	mov	r6, r0
  if(interface == 0xFFU) /* No Valid Interface */
 8003436:	d102      	bne.n	800343e <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8003438:	2002      	movs	r0, #2
}
 800343a:	b005      	add	sp, #20
 800343c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800343e:	4601      	mov	r1, r0
 8003440:	4628      	mov	r0, r5
 8003442:	f000 f99f 	bl	8003784 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003446:	2050      	movs	r0, #80	; 0x50
 8003448:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 800344c:	f001 faea 	bl	8004a24 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003450:	231a      	movs	r3, #26
 8003452:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003456:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003458:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
 800345c:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800345e:	bf42      	ittt	mi
 8003460:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003462:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8003466:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003468:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800346a:	7841      	ldrb	r1, [r0, #1]
 800346c:	4628      	mov	r0, r5
 800346e:	f000 fdcc 	bl	800400a <USBH_AllocPipe>
 8003472:	4601      	mov	r1, r0
 8003474:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8003476:	8960      	ldrh	r0, [r4, #10]
 8003478:	9002      	str	r0, [sp, #8]
 800347a:	2003      	movs	r0, #3
 800347c:	9001      	str	r0, [sp, #4]
 800347e:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003482:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003486:	7862      	ldrb	r2, [r4, #1]
 8003488:	9000      	str	r0, [sp, #0]
 800348a:	4628      	mov	r0, r5
 800348c:	f000 fda9 	bl	8003fe2 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8003490:	2200      	movs	r2, #0
 8003492:	7821      	ldrb	r1, [r4, #0]
 8003494:	4628      	mov	r0, r5
 8003496:	f001 fa56 	bl	8004946 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 800349a:	2300      	movs	r3, #0
 800349c:	461a      	mov	r2, r3
 800349e:	210a      	movs	r1, #10
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 f978 	bl	8003796 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 80034a6:	28ff      	cmp	r0, #255	; 0xff
 80034a8:	d0c6      	beq.n	8003438 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80034aa:	231a      	movs	r3, #26
 80034ac:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80034b0:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80034b4:	f891 234a 	ldrb.w	r2, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80034b8:	f890 3352 	ldrb.w	r3, [r0, #850]	; 0x352
 80034bc:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80034c0:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80034c4:	bf0d      	iteet	eq
 80034c6:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80034c8:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80034ca:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80034cc:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80034ce:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80034d2:	bf08      	it	eq
 80034d4:	73a3      	strbeq	r3, [r4, #14]
 80034d6:	f8b0 2354 	ldrh.w	r2, [r0, #852]	; 0x354
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80034da:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80034dc:	bf18      	it	ne
 80034de:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80034e0:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80034e2:	bf14      	ite	ne
 80034e4:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80034e6:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80034e8:	f000 fd8f 	bl	800400a <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80034ec:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80034ee:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80034f0:	4628      	mov	r0, r5
 80034f2:	f000 fd8a 	bl	800400a <USBH_AllocPipe>
 80034f6:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 80034f8:	8b20      	ldrh	r0, [r4, #24]
 80034fa:	9002      	str	r0, [sp, #8]
 80034fc:	2602      	movs	r6, #2
 80034fe:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003502:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003506:	7ba2      	ldrb	r2, [r4, #14]
 8003508:	7b61      	ldrb	r1, [r4, #13]
 800350a:	9601      	str	r6, [sp, #4]
 800350c:	9000      	str	r0, [sp, #0]
 800350e:	4628      	mov	r0, r5
 8003510:	f000 fd67 	bl	8003fe2 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8003514:	8b60      	ldrh	r0, [r4, #26]
 8003516:	9002      	str	r0, [sp, #8]
 8003518:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800351c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003520:	7be2      	ldrb	r2, [r4, #15]
 8003522:	7b21      	ldrb	r1, [r4, #12]
 8003524:	9601      	str	r6, [sp, #4]
 8003526:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003528:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800352a:	4628      	mov	r0, r5
 800352c:	f000 fd59 	bl	8003fe2 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003530:	4632      	mov	r2, r6
 8003532:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003534:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003538:	4628      	mov	r0, r5
 800353a:	f001 fa04 	bl	8004946 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800353e:	4632      	mov	r2, r6
 8003540:	7b21      	ldrb	r1, [r4, #12]
 8003542:	4628      	mov	r0, r5
 8003544:	f001 f9ff 	bl	8004946 <USBH_LL_SetToggle>
      status = USBH_OK;
 8003548:	4630      	mov	r0, r6
 800354a:	e776      	b.n	800343a <USBH_CDC_InterfaceInit+0x18>

0800354c <USBH_CDC_ClassRequest>:
{
 800354c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800354e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003552:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003554:	23a1      	movs	r3, #161	; 0xa1
 8003556:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003558:	2321      	movs	r3, #33	; 0x21
 800355a:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800355c:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8003562:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8003564:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003566:	3140      	adds	r1, #64	; 0x40
{
 8003568:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800356a:	f000 fac9 	bl	8003b00 <USBH_CtlReq>
  if(status == USBH_OK)
 800356e:	4605      	mov	r5, r0
 8003570:	b920      	cbnz	r0, 800357c <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003572:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003576:	2102      	movs	r1, #2
 8003578:	4620      	mov	r0, r4
 800357a:	4798      	blx	r3
}
 800357c:	4628      	mov	r0, r5
 800357e:	bd38      	pop	{r3, r4, r5, pc}

08003580 <USBH_CDC_TransmitCallback>:
 8003580:	4770      	bx	lr

08003582 <USBH_CDC_ReceiveCallback>:
 8003582:	4770      	bx	lr

08003584 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8003584:	4770      	bx	lr

08003586 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003586:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 800358a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800358c:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 800358e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8003592:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8003594:	2b04      	cmp	r3, #4
 8003596:	d83d      	bhi.n	8003614 <USBH_CDC_Process+0x8e>
 8003598:	e8df f003 	tbb	[pc, r3]
 800359c:	42170603 	.word	0x42170603
 80035a0:	a6          	.byte	0xa6
 80035a1:	00          	.byte	0x00
    status = USBH_OK;
 80035a2:	2000      	movs	r0, #0
}
 80035a4:	b002      	add	sp, #8
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80035a8:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80035aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80035ac:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80035ae:	2320      	movs	r3, #32
 80035b0:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80035b2:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80035b8:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80035ba:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80035bc:	f000 faa0 	bl	8003b00 <USBH_CtlReq>
    if(req_status == USBH_OK)
 80035c0:	bb50      	cbnz	r0, 8003618 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80035c2:	2302      	movs	r3, #2
        CDC_Handle->state = CDC_ERROR_STATE;
 80035c4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80035c8:	e024      	b.n	8003614 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80035ca:	23a1      	movs	r3, #161	; 0xa1
 80035cc:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80035ce:	2321      	movs	r3, #33	; 0x21
 80035d0:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80035d2:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80035d8:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80035da:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80035dc:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80035e0:	f000 fa8e 	bl	8003b00 <USBH_CtlReq>
    if(req_status == USBH_OK)
 80035e4:	b9c0      	cbnz	r0, 8003618 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80035e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80035e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE;
 80035ea:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80035ee:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80035f8:	4291      	cmp	r1, r2
 80035fa:	d10b      	bne.n	8003614 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80035fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003600:	795a      	ldrb	r2, [r3, #5]
 8003602:	4291      	cmp	r1, r2
 8003604:	d106      	bne.n	8003614 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003606:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d102      	bne.n	8003614 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 800360e:	4628      	mov	r0, r5
 8003610:	f7ff ffb8 	bl	8003584 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003614:	2001      	movs	r0, #1
 8003616:	e7c5      	b.n	80035a4 <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8003618:	2801      	cmp	r0, #1
 800361a:	d0fb      	beq.n	8003614 <USBH_CDC_Process+0x8e>
        CDC_Handle->state = CDC_ERROR_STATE;
 800361c:	2304      	movs	r3, #4
 800361e:	e7d1      	b.n	80035c4 <USBH_CDC_Process+0x3e>
  switch (CDC_Handle->data_tx_state)
 8003620:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8003624:	2901      	cmp	r1, #1
 8003626:	d021      	beq.n	800366c <USBH_CDC_Process+0xe6>
 8003628:	2902      	cmp	r1, #2
 800362a:	d02e      	beq.n	800368a <USBH_CDC_Process+0x104>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800362c:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003630:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8003632:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8003636:	2b03      	cmp	r3, #3
 8003638:	d045      	beq.n	80036c6 <USBH_CDC_Process+0x140>
 800363a:	2b04      	cmp	r3, #4
 800363c:	d1ea      	bne.n	8003614 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800363e:	7b31      	ldrb	r1, [r6, #12]
 8003640:	4628      	mov	r0, r5
 8003642:	f001 f96f 	bl	8004924 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003646:	2801      	cmp	r0, #1
 8003648:	d1e4      	bne.n	8003614 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800364a:	7b31      	ldrb	r1, [r6, #12]
 800364c:	4628      	mov	r0, r5
 800364e:	f001 f925 	bl	800489c <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8003652:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003654:	4298      	cmp	r0, r3
 8003656:	d040      	beq.n	80036da <USBH_CDC_Process+0x154>
 8003658:	8b72      	ldrh	r2, [r6, #26]
 800365a:	4290      	cmp	r0, r2
 800365c:	d93d      	bls.n	80036da <USBH_CDC_Process+0x154>
        CDC_Handle->RxDataLength -= length ;
 800365e:	1a1b      	subs	r3, r3, r0
 8003660:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8003662:	6a33      	ldr	r3, [r6, #32]
 8003664:	4418      	add	r0, r3
 8003666:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003668:	2303      	movs	r3, #3
 800366a:	e033      	b.n	80036d4 <USBH_CDC_Process+0x14e>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800366c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800366e:	8b22      	ldrh	r2, [r4, #24]
 8003670:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8003672:	9100      	str	r1, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003674:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8003676:	bf98      	it	ls
 8003678:	b282      	uxthls	r2, r0
 800367a:	69e1      	ldr	r1, [r4, #28]
 800367c:	4628      	mov	r0, r5
 800367e:	f000 fc89 	bl	8003f94 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8003682:	2302      	movs	r3, #2
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8003684:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8003688:	e7d0      	b.n	800362c <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800368a:	7b61      	ldrb	r1, [r4, #13]
 800368c:	f001 f94a 	bl	8004924 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8003690:	2801      	cmp	r0, #1
 8003692:	d115      	bne.n	80036c0 <USBH_CDC_Process+0x13a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003696:	8b22      	ldrh	r2, [r4, #24]
 8003698:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800369a:	bf83      	ittte	hi
 800369c:	1a9b      	subhi	r3, r3, r2
 800369e:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80036a0:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0U;
 80036a2:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80036a4:	bf8a      	itet	hi
 80036a6:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0U;
 80036a8:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80036aa:	61e3      	strhi	r3, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 80036ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036ae:	b10b      	cbz	r3, 80036b4 <USBH_CDC_Process+0x12e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e7e7      	b.n	8003684 <USBH_CDC_Process+0xfe>
        CDC_Handle->data_tx_state = CDC_IDLE;
 80036b4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80036b8:	4628      	mov	r0, r5
 80036ba:	f7ff ff61 	bl	8003580 <USBH_CDC_TransmitCallback>
 80036be:	e7b5      	b.n	800362c <USBH_CDC_Process+0xa6>
      if (URB_Status == USBH_URB_NOTREADY)
 80036c0:	2802      	cmp	r0, #2
 80036c2:	d1b3      	bne.n	800362c <USBH_CDC_Process+0xa6>
 80036c4:	e7f4      	b.n	80036b0 <USBH_CDC_Process+0x12a>
    USBH_BulkReceiveData (phost,
 80036c6:	7b33      	ldrb	r3, [r6, #12]
 80036c8:	8b72      	ldrh	r2, [r6, #26]
 80036ca:	6a31      	ldr	r1, [r6, #32]
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 fc78 	bl	8003fc2 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80036d2:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80036d4:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 80036d8:	e79c      	b.n	8003614 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80036da:	2300      	movs	r3, #0
 80036dc:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80036e0:	4628      	mov	r0, r5
 80036e2:	f7ff ff4e 	bl	8003582 <USBH_CDC_ReceiveCallback>
 80036e6:	e795      	b.n	8003614 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00U);
 80036e8:	2100      	movs	r1, #0
 80036ea:	f000 fc0d 	bl	8003f08 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d190      	bne.n	8003614 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 80036f2:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 80036f6:	e78d      	b.n	8003614 <USBH_CDC_Process+0x8e>

080036f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80036f8:	f500 7360 	add.w	r3, r0, #896	; 0x380
 80036fc:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8003700:	2100      	movs	r1, #0
 8003702:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003706:	4293      	cmp	r3, r2
 8003708:	d1fb      	bne.n	8003702 <DeInitStateMachine+0xa>
 800370a:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800370e:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8003718:	4291      	cmp	r1, r2
 800371a:	d1fb      	bne.n	8003714 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800371c:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800371e:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003720:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003722:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8003724:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 8003726:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
  phost->Control.state = CTRL_SETUP;
 800372a:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800372c:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 800372e:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003730:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8003734:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d

  return USBH_OK;
}
 8003738:	2000      	movs	r0, #0
 800373a:	4770      	bx	lr

0800373c <USBH_Init>:
{
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	460d      	mov	r5, r1
  if(phost == NULL)
 8003740:	4604      	mov	r4, r0
 8003742:	b180      	cbz	r0, 8003766 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8003744:	2300      	movs	r3, #0
  phost->id = id;
 8003746:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 800374a:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 800374e:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  DeInitStateMachine(phost);
 8003752:	f7ff ffd1 	bl	80036f8 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003756:	b10d      	cbz	r5, 800375c <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8003758:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  USBH_LL_Init(phost);
 800375c:	4620      	mov	r0, r4
 800375e:	f001 f83f 	bl	80047e0 <USBH_LL_Init>
  return USBH_OK;
 8003762:	2000      	movs	r0, #0
 8003764:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8003766:	2002      	movs	r0, #2
}
 8003768:	bd38      	pop	{r3, r4, r5, pc}

0800376a <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800376a:	b149      	cbz	r1, 8003780 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800376c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003770:	b933      	cbnz	r3, 8003780 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003772:	2201      	movs	r2, #1
 8003774:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
 8003778:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
      status = USBH_OK;
 800377c:	4618      	mov	r0, r3
 800377e:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8003780:	2002      	movs	r0, #2
  }

  return status;
}
 8003782:	4770      	bx	lr

08003784 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003784:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8003788:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800378a:	bf86      	itte	hi
 800378c:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8003790:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8003792:	2002      	movls	r0, #2
  }
  return status;
}
 8003794:	4770      	bx	lr

08003796 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003796:	b570      	push	{r4, r5, r6, lr}
 8003798:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800379a:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 800379e:	428e      	cmp	r6, r1
 80037a0:	b2e5      	uxtb	r5, r4
 80037a2:	d001      	beq.n	80037a8 <USBH_FindInterface+0x12>
 80037a4:	29ff      	cmp	r1, #255	; 0xff
 80037a6:	d10b      	bne.n	80037c0 <USBH_FindInterface+0x2a>
 80037a8:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 80037ac:	4296      	cmp	r6, r2
 80037ae:	d001      	beq.n	80037b4 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80037b0:	2aff      	cmp	r2, #255	; 0xff
 80037b2:	d105      	bne.n	80037c0 <USBH_FindInterface+0x2a>
 80037b4:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 80037b8:	429e      	cmp	r6, r3
 80037ba:	d007      	beq.n	80037cc <USBH_FindInterface+0x36>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80037bc:	2bff      	cmp	r3, #255	; 0xff
 80037be:	d005      	beq.n	80037cc <USBH_FindInterface+0x36>
 80037c0:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80037c2:	2c02      	cmp	r4, #2
 80037c4:	f100 001a 	add.w	r0, r0, #26
 80037c8:	d1e7      	bne.n	800379a <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80037ca:	25ff      	movs	r5, #255	; 0xff
}
 80037cc:	4628      	mov	r0, r5
 80037ce:	bd70      	pop	{r4, r5, r6, pc}

080037d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80037d0:	b510      	push	{r4, lr}
 80037d2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80037d4:	f001 f82a 	bl	800482c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80037d8:	2101      	movs	r1, #1
 80037da:	4620      	mov	r0, r4
 80037dc:	f001 f8a6 	bl	800492c <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 80037e0:	2000      	movs	r0, #0
 80037e2:	bd10      	pop	{r4, pc}

080037e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80037e4:	b530      	push	{r4, r5, lr}
 80037e6:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80037e8:	2302      	movs	r3, #2
 80037ea:	f88d 3017 	strb.w	r3, [sp, #23]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 80037ee:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
{
 80037f2:	4604      	mov	r4, r0
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80037f4:	b933      	cbnz	r3, 8003804 <USBH_Process+0x20>
 80037f6:	7802      	ldrb	r2, [r0, #0]
 80037f8:	b122      	cbz	r2, 8003804 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80037fa:	7802      	ldrb	r2, [r0, #0]
 80037fc:	2a03      	cmp	r2, #3
      phost->gState = HOST_DEV_DISCONNECTED;
 80037fe:	bf1c      	itt	ne
 8003800:	2203      	movne	r2, #3
 8003802:	7002      	strbne	r2, [r0, #0]
  switch (phost->gState)
 8003804:	7822      	ldrb	r2, [r4, #0]
 8003806:	2a0b      	cmp	r2, #11
 8003808:	d818      	bhi.n	800383c <USBH_Process+0x58>
 800380a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800380e:	000c      	.short	0x000c
 8003810:	001f001a 	.word	0x001f001a
 8003814:	00170121 	.word	0x00170121
 8003818:	0107004f 	.word	0x0107004f
 800381c:	00d000c6 	.word	0x00d000c6
 8003820:	00e700da 	.word	0x00e700da
 8003824:	0118      	.short	0x0118
    if (phost->device.is_connected)
 8003826:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800382a:	b13b      	cbz	r3, 800383c <USBH_Process+0x58>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800382c:	2301      	movs	r3, #1
      USBH_Delay(200U);
 800382e:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003830:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8003832:	f001 f897 	bl	8004964 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003836:	4620      	mov	r0, r4
 8003838:	f001 f822 	bl	8004880 <USBH_LL_ResetPort>
}
 800383c:	2000      	movs	r0, #0
 800383e:	b007      	add	sp, #28
 8003840:	bd30      	pop	{r4, r5, pc}
    if (phost->device.PortEnabled == 1U)
 8003842:	2b01      	cmp	r3, #1
 8003844:	d1fa      	bne.n	800383c <USBH_Process+0x58>
      phost->gState = HOST_DEV_ATTACHED;
 8003846:	2302      	movs	r3, #2
        phost->gState  = HOST_SET_CONFIGURATION;
 8003848:	7023      	strb	r3, [r4, #0]
 800384a:	e7f7      	b.n	800383c <USBH_Process+0x58>
    USBH_Delay(100U);
 800384c:	2064      	movs	r0, #100	; 0x64
 800384e:	f001 f889 	bl	8004964 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003852:	4620      	mov	r0, r4
 8003854:	f001 f806 	bl	8004864 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8003858:	2305      	movs	r3, #5
 800385a:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800385c:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003860:	2100      	movs	r1, #0
 8003862:	4620      	mov	r0, r4
 8003864:	f000 fbd1 	bl	800400a <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003868:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800386a:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800386c:	4620      	mov	r0, r4
 800386e:	f000 fbcc 	bl	800400a <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8003872:	79a2      	ldrb	r2, [r4, #6]
 8003874:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003878:	7120      	strb	r0, [r4, #4]
 800387a:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 800387c:	9202      	str	r2, [sp, #8]
 800387e:	2500      	movs	r5, #0
      USBH_OpenPipe (phost,
 8003880:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003884:	9200      	str	r2, [sp, #0]
 8003886:	9501      	str	r5, [sp, #4]
 8003888:	2280      	movs	r2, #128	; 0x80
 800388a:	4620      	mov	r0, r4
 800388c:	f000 fba9 	bl	8003fe2 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8003890:	79a2      	ldrb	r2, [r4, #6]
 8003892:	9202      	str	r2, [sp, #8]
 8003894:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003898:	9200      	str	r2, [sp, #0]
 800389a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800389e:	7961      	ldrb	r1, [r4, #5]
 80038a0:	9501      	str	r5, [sp, #4]
 80038a2:	462a      	mov	r2, r5
 80038a4:	4620      	mov	r0, r4
 80038a6:	f000 fb9c 	bl	8003fe2 <USBH_OpenPipe>
 80038aa:	e7c7      	b.n	800383c <USBH_Process+0x58>
  switch (phost->EnumState)
 80038ac:	7863      	ldrb	r3, [r4, #1]
 80038ae:	2b07      	cmp	r3, #7
 80038b0:	d8c4      	bhi.n	800383c <USBH_Process+0x58>
 80038b2:	e8df f003 	tbb	[pc, r3]
 80038b6:	1504      	.short	0x1504
 80038b8:	4138301e 	.word	0x4138301e
 80038bc:	5d4f      	.short	0x5d4f
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80038be:	2108      	movs	r1, #8
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 f9fa 	bl	8003cba <USBH_Get_DevDesc>
 80038c6:	4605      	mov	r5, r0
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d1b7      	bne.n	800383c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80038cc:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80038ce:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80038d2:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 80038d4:	7921      	ldrb	r1, [r4, #4]
 80038d6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80038da:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 80038dc:	9202      	str	r2, [sp, #8]
 80038de:	e7cf      	b.n	8003880 <USBH_Process+0x9c>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80038e0:	2112      	movs	r1, #18
 80038e2:	4620      	mov	r0, r4
 80038e4:	f000 f9e9 	bl	8003cba <USBH_Get_DevDesc>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d1a7      	bne.n	800383c <USBH_Process+0x58>
      phost->EnumState = ENUM_SET_ADDR;
 80038ec:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80038ee:	7063      	strb	r3, [r4, #1]
 80038f0:	e7a4      	b.n	800383c <USBH_Process+0x58>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80038f2:	2101      	movs	r1, #1
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 fadd 	bl	8003eb4 <USBH_SetAddress>
 80038fa:	4605      	mov	r5, r0
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d19d      	bne.n	800383c <USBH_Process+0x58>
      USBH_Delay(2U);
 8003900:	2002      	movs	r0, #2
 8003902:	f001 f82f 	bl	8004964 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8003906:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8003908:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800390a:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 800390c:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8003910:	7921      	ldrb	r1, [r4, #4]
 8003912:	79a2      	ldrb	r2, [r4, #6]
 8003914:	e7e2      	b.n	80038dc <USBH_Process+0xf8>
    if ( USBH_Get_CfgDesc(phost,
 8003916:	2109      	movs	r1, #9
 8003918:	4620      	mov	r0, r4
 800391a:	f000 fa16 	bl	8003d4a <USBH_Get_CfgDesc>
 800391e:	2800      	cmp	r0, #0
 8003920:	d18c      	bne.n	800383c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003922:	2304      	movs	r3, #4
 8003924:	e7e3      	b.n	80038ee <USBH_Process+0x10a>
    if (USBH_Get_CfgDesc(phost,
 8003926:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800392a:	4620      	mov	r0, r4
 800392c:	f000 fa0d 	bl	8003d4a <USBH_Get_CfgDesc>
 8003930:	2800      	cmp	r0, #0
 8003932:	d183      	bne.n	800383c <USBH_Process+0x58>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003934:	2305      	movs	r3, #5
 8003936:	e7da      	b.n	80038ee <USBH_Process+0x10a>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8003938:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 800393c:	b141      	cbz	r1, 8003950 <USBH_Process+0x16c>
      if ( USBH_Get_StringDesc(phost,
 800393e:	23ff      	movs	r3, #255	; 0xff
 8003940:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003944:	4620      	mov	r0, r4
 8003946:	f000 fa8e 	bl	8003e66 <USBH_Get_StringDesc>
 800394a:	2800      	cmp	r0, #0
 800394c:	f47f af76 	bne.w	800383c <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8003950:	2306      	movs	r3, #6
 8003952:	e7cc      	b.n	80038ee <USBH_Process+0x10a>
    if (phost->device.DevDesc.iProduct != 0U)
 8003954:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8003958:	b141      	cbz	r1, 800396c <USBH_Process+0x188>
      if ( USBH_Get_StringDesc(phost,
 800395a:	23ff      	movs	r3, #255	; 0xff
 800395c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8003960:	4620      	mov	r0, r4
 8003962:	f000 fa80 	bl	8003e66 <USBH_Get_StringDesc>
 8003966:	2800      	cmp	r0, #0
 8003968:	f47f af68 	bne.w	800383c <USBH_Process+0x58>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800396c:	2307      	movs	r3, #7
 800396e:	e7be      	b.n	80038ee <USBH_Process+0x10a>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8003970:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 8003974:	b141      	cbz	r1, 8003988 <USBH_Process+0x1a4>
      if ( USBH_Get_StringDesc(phost,
 8003976:	23ff      	movs	r3, #255	; 0xff
 8003978:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800397c:	4620      	mov	r0, r4
 800397e:	f000 fa72 	bl	8003e66 <USBH_Get_StringDesc>
 8003982:	2800      	cmp	r0, #0
 8003984:	f47f af5a 	bne.w	800383c <USBH_Process+0x58>
      phost->device.current_interface = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800398e:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 8003992:	2b01      	cmp	r3, #1
 8003994:	d009      	beq.n	80039aa <USBH_Process+0x1c6>
        phost->gState  = HOST_INPUT;
 8003996:	2307      	movs	r3, #7
 8003998:	e756      	b.n	8003848 <USBH_Process+0x64>
      if(phost->pUser != NULL)
 800399a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f43f af4c 	beq.w	800383c <USBH_Process+0x58>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80039a4:	2101      	movs	r1, #1
 80039a6:	4620      	mov	r0, r4
 80039a8:	4798      	blx	r3
        phost->gState  = HOST_SET_CONFIGURATION;
 80039aa:	2308      	movs	r3, #8
 80039ac:	e74c      	b.n	8003848 <USBH_Process+0x64>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80039ae:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80039b2:	4620      	mov	r0, r4
 80039b4:	f000 fa8c 	bl	8003ed0 <USBH_SetCfg>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	f47f af3f 	bne.w	800383c <USBH_Process+0x58>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80039be:	2309      	movs	r3, #9
 80039c0:	e742      	b.n	8003848 <USBH_Process+0x64>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80039c2:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80039c6:	069b      	lsls	r3, r3, #26
 80039c8:	d506      	bpl.n	80039d8 <USBH_Process+0x1f4>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80039ca:	2101      	movs	r1, #1
 80039cc:	4620      	mov	r0, r4
 80039ce:	f000 fa8d 	bl	8003eec <USBH_SetFeature>
 80039d2:	2800      	cmp	r0, #0
 80039d4:	f47f af32 	bne.w	800383c <USBH_Process+0x58>
      phost->gState  = HOST_CHECK_CLASS;
 80039d8:	230a      	movs	r3, #10
 80039da:	e735      	b.n	8003848 <USBH_Process+0x64>
    if(phost->ClassNumber == 0U)
 80039dc:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f43f af2b 	beq.w	800383c <USBH_Process+0x58>
      phost->pActiveClass = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80039ec:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 80039f0:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 80039f4:	7919      	ldrb	r1, [r3, #4]
 80039f6:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 80039f8:	bf08      	it	eq
 80039fa:	f8c4 3378 	streq.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 80039fe:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003a02:	b1d3      	cbz	r3, 8003a3a <USBH_Process+0x256>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4620      	mov	r0, r4
 8003a08:	4798      	blx	r3
 8003a0a:	b9b0      	cbnz	r0, 8003a3a <USBH_Process+0x256>
          phost->gState  = HOST_CLASS_REQUEST;
 8003a0c:	2306      	movs	r3, #6
 8003a0e:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8003a10:	2103      	movs	r1, #3
 8003a12:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003a16:	4620      	mov	r0, r4
 8003a18:	4798      	blx	r3
 8003a1a:	e70f      	b.n	800383c <USBH_Process+0x58>
    if(phost->pActiveClass != NULL)
 8003a1c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003a20:	b15b      	cbz	r3, 8003a3a <USBH_Process+0x256>
      status = phost->pActiveClass->Requests(phost);
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4620      	mov	r0, r4
 8003a26:	4798      	blx	r3
 8003a28:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8003a2c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f47f af03 	bne.w	800383c <USBH_Process+0x58>
        phost->gState  = HOST_CLASS;
 8003a36:	230b      	movs	r3, #11
 8003a38:	e706      	b.n	8003848 <USBH_Process+0x64>
      phost->gState  = HOST_ABORT_STATE;
 8003a3a:	230d      	movs	r3, #13
 8003a3c:	e704      	b.n	8003848 <USBH_Process+0x64>
    if(phost->pActiveClass != NULL)
 8003a3e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f43f aefa 	beq.w	800383c <USBH_Process+0x58>
      phost->pActiveClass->BgndProcess(phost);
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	4798      	blx	r3
 8003a4e:	e6f5      	b.n	800383c <USBH_Process+0x58>
    DeInitStateMachine(phost);
 8003a50:	4620      	mov	r0, r4
 8003a52:	f7ff fe51 	bl	80036f8 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8003a56:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f43f aeee 	beq.w	800383c <USBH_Process+0x58>
      phost->pActiveClass->DeInit(phost);
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	4620      	mov	r0, r4
 8003a64:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 return USBH_OK;
 8003a6c:	e6e6      	b.n	800383c <USBH_Process+0x58>

08003a6e <USBH_LL_SetTimer>:
  phost->Timer = time;
 8003a6e:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
 8003a72:	4770      	bx	lr

08003a74 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8003a74:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8003a78:	3201      	adds	r2, #1
 8003a7a:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8003a7e:	7802      	ldrb	r2, [r0, #0]
 8003a80:	2a0b      	cmp	r2, #11
 8003a82:	d104      	bne.n	8003a8e <USBH_LL_IncTimer+0x1a>
 8003a84:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003a88:	b10b      	cbz	r3, 8003a8e <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	4718      	bx	r3
 8003a8e:	4770      	bx	lr

08003a90 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8003a96:	4770      	bx	lr

08003a98 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
 8003a9e:	4770      	bx	lr

08003aa0 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8003aa0:	7802      	ldrb	r2, [r0, #0]
{
 8003aa2:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8003aa4:	b94a      	cbnz	r2, 8003aba <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 8003aa6:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8003ab0:	b10b      	cbz	r3, 8003ab6 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	4798      	blx	r3
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8003aba:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8003abe:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8003ac0:	bf04      	itt	eq
 8003ac2:	2202      	moveq	r2, #2
 8003ac4:	7002      	strbeq	r2, [r0, #0]
 8003ac6:	e7f6      	b.n	8003ab6 <USBH_LL_Connect+0x16>

08003ac8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8003acc:	f000 febc 	bl	8004848 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8003ad0:	7921      	ldrb	r1, [r4, #4]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f000 fab0 	bl	8004038 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8003ad8:	7961      	ldrb	r1, [r4, #5]
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 faac 	bl	8004038 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e

  if(phost->pUser != NULL)
 8003ae6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003aea:	b113      	cbz	r3, 8003af2 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003aec:	2105      	movs	r1, #5
 8003aee:	4620      	mov	r0, r4
 8003af0:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003af2:	4620      	mov	r0, r4
 8003af4:	f000 fe9a 	bl	800482c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8003af8:	2303      	movs	r3, #3
 8003afa:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8003afc:	2000      	movs	r0, #0
 8003afe:	bd10      	pop	{r4, pc}

08003b00 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8003b00:	b513      	push	{r0, r1, r4, lr}
 8003b02:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8003b04:	7880      	ldrb	r0, [r0, #2]
 8003b06:	2801      	cmp	r0, #1
 8003b08:	d003      	beq.n	8003b12 <USBH_CtlReq+0x12>
 8003b0a:	2802      	cmp	r0, #2
 8003b0c:	d008      	beq.n	8003b20 <USBH_CtlReq+0x20>
    {
      if (status == USBH_FAIL)
      {
        /* Failure Mode */
        phost->RequestState = CMD_SEND;
        status = USBH_FAIL;
 8003b0e:	2001      	movs	r0, #1
    break;

  default:
    break;
  }
  return status;
 8003b10:	e004      	b.n	8003b1c <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8003b12:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 8003b14:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8003b16:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8003b18:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8003b1a:	70a3      	strb	r3, [r4, #2]
}
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd10      	pop	{r4, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8003b20:	7e23      	ldrb	r3, [r4, #24]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	2101      	movs	r1, #1
 8003b26:	2b0a      	cmp	r3, #10
 8003b28:	d8f1      	bhi.n	8003b0e <USBH_CtlReq+0xe>
 8003b2a:	e8df f003 	tbb	[pc, r3]
 8003b2e:	0f06      	.short	0x0f06
 8003b30:	4c40362b 	.word	0x4c40362b
 8003b34:	8c806f64 	.word	0x8c806f64
 8003b38:	95          	.byte	0x95
 8003b39:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8003b3a:	7962      	ldrb	r2, [r4, #5]
 8003b3c:	f104 0110 	add.w	r1, r4, #16
 8003b40:	4620      	mov	r0, r4
 8003b42:	f000 f9ef 	bl	8003f24 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8003b46:	2302      	movs	r3, #2
      if (phost->Control.setup.b.wLength.w != 0U)
      {
        if (direction == USB_D2H)
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8003b48:	7623      	strb	r3, [r4, #24]
 8003b4a:	e7e0      	b.n	8003b0e <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8003b4c:	7961      	ldrb	r1, [r4, #5]
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f000 fee8 	bl	8004924 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003b54:	2801      	cmp	r0, #1
 8003b56:	d10f      	bne.n	8003b78 <USBH_CtlReq+0x78>
      if (phost->Control.setup.b.wLength.w != 0U)
 8003b58:	8ae2      	ldrh	r2, [r4, #22]
 8003b5a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003b5e:	b12a      	cbz	r2, 8003b6c <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	da01      	bge.n	8003b68 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e7ef      	b.n	8003b48 <USBH_CtlReq+0x48>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8003b68:	2305      	movs	r3, #5
 8003b6a:	e7ed      	b.n	8003b48 <USBH_CtlReq+0x48>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da01      	bge.n	8003b74 <USBH_CtlReq+0x74>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8003b70:	2309      	movs	r3, #9
 8003b72:	e7e9      	b.n	8003b48 <USBH_CtlReq+0x48>
          phost->Control.state = CTRL_STATUS_IN;
 8003b74:	2307      	movs	r3, #7
 8003b76:	e7e7      	b.n	8003b48 <USBH_CtlReq+0x48>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8003b78:	2804      	cmp	r0, #4
 8003b7a:	d001      	beq.n	8003b80 <USBH_CtlReq+0x80>
 8003b7c:	2802      	cmp	r0, #2
 8003b7e:	d1c6      	bne.n	8003b0e <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8003b80:	230b      	movs	r3, #11
 8003b82:	e7e1      	b.n	8003b48 <USBH_CtlReq+0x48>
    phost->Control.timer = (uint16_t)phost->Timer;
 8003b84:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003b88:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8003b8a:	89a2      	ldrh	r2, [r4, #12]
 8003b8c:	7923      	ldrb	r3, [r4, #4]
 8003b8e:	68a1      	ldr	r1, [r4, #8]
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 f9ef 	bl	8003f74 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8003b96:	2304      	movs	r3, #4
 8003b98:	e7d6      	b.n	8003b48 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8003b9a:	7921      	ldrb	r1, [r4, #4]
 8003b9c:	4620      	mov	r0, r4
 8003b9e:	f000 fec1 	bl	8004924 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003ba2:	2801      	cmp	r0, #1
 8003ba4:	d0e4      	beq.n	8003b70 <USBH_CtlReq+0x70>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8003ba6:	2805      	cmp	r0, #5
 8003ba8:	d015      	beq.n	8003bd6 <USBH_CtlReq+0xd6>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8003baa:	2804      	cmp	r0, #4
 8003bac:	e7e7      	b.n	8003b7e <USBH_CtlReq+0x7e>
    USBH_CtlSendData (phost,
 8003bae:	7963      	ldrb	r3, [r4, #5]
 8003bb0:	9100      	str	r1, [sp, #0]
 8003bb2:	89a2      	ldrh	r2, [r4, #12]
 8003bb4:	68a1      	ldr	r1, [r4, #8]
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f000 f9c5 	bl	8003f46 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003bbc:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003bc0:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8003bc2:	2306      	movs	r3, #6
 8003bc4:	e7c0      	b.n	8003b48 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8003bc6:	7961      	ldrb	r1, [r4, #5]
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 feab 	bl	8004924 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003bce:	2801      	cmp	r0, #1
 8003bd0:	d0d0      	beq.n	8003b74 <USBH_CtlReq+0x74>
    else if  (URB_Status == USBH_URB_STALL)
 8003bd2:	2805      	cmp	r0, #5
 8003bd4:	d105      	bne.n	8003be2 <USBH_CtlReq+0xe2>
      phost->RequestState = CMD_SEND;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 8003bde:	2003      	movs	r0, #3
 8003be0:	e79c      	b.n	8003b1c <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003be2:	2802      	cmp	r0, #2
 8003be4:	d0c0      	beq.n	8003b68 <USBH_CtlReq+0x68>
      if (URB_Status == USBH_URB_ERROR)
 8003be6:	2804      	cmp	r0, #4
 8003be8:	d191      	bne.n	8003b0e <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8003bea:	230b      	movs	r3, #11
 8003bec:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8003bf2:	2002      	movs	r0, #2
 8003bf4:	e792      	b.n	8003b1c <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	7923      	ldrb	r3, [r4, #4]
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f000 f9b9 	bl	8003f74 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8003c02:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003c06:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003c08:	2308      	movs	r3, #8
 8003c0a:	e79d      	b.n	8003b48 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8003c0c:	7921      	ldrb	r1, [r4, #4]
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f000 fe88 	bl	8004924 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8003c14:	2801      	cmp	r0, #1
 8003c16:	d104      	bne.n	8003c22 <USBH_CtlReq+0x122>
      phost->RequestState = CMD_SEND;
 8003c18:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 8003c1a:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8003c1c:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8003c1e:	7620      	strb	r0, [r4, #24]
 8003c20:	e77c      	b.n	8003b1c <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8003c22:	2804      	cmp	r0, #4
 8003c24:	d0ac      	beq.n	8003b80 <USBH_CtlReq+0x80>
      if(URB_Status == USBH_URB_STALL)
 8003c26:	2805      	cmp	r0, #5
 8003c28:	f47f af71 	bne.w	8003b0e <USBH_CtlReq+0xe>
 8003c2c:	e7d3      	b.n	8003bd6 <USBH_CtlReq+0xd6>
    USBH_CtlSendData (phost,
 8003c2e:	2200      	movs	r2, #0
 8003c30:	7963      	ldrb	r3, [r4, #5]
 8003c32:	9100      	str	r1, [sp, #0]
 8003c34:	4620      	mov	r0, r4
 8003c36:	4611      	mov	r1, r2
 8003c38:	f000 f985 	bl	8003f46 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8003c3c:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003c40:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003c42:	230a      	movs	r3, #10
 8003c44:	e780      	b.n	8003b48 <USBH_CtlReq+0x48>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8003c46:	7961      	ldrb	r1, [r4, #5]
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f000 fe6b 	bl	8004924 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8003c4e:	2801      	cmp	r0, #1
 8003c50:	d0e2      	beq.n	8003c18 <USBH_CtlReq+0x118>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8003c52:	2802      	cmp	r0, #2
 8003c54:	d1a9      	bne.n	8003baa <USBH_CtlReq+0xaa>
 8003c56:	e78b      	b.n	8003b70 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003c58:	7e63      	ldrb	r3, [r4, #25]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	7663      	strb	r3, [r4, #25]
 8003c62:	d806      	bhi.n	8003c72 <USBH_CtlReq+0x172>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8003c64:	4620      	mov	r0, r4
 8003c66:	f000 fdef 	bl	8004848 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 8003c6e:	70a3      	strb	r3, [r4, #2]
 8003c70:	e74d      	b.n	8003b0e <USBH_CtlReq+0xe>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8003c72:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003c76:	2106      	movs	r1, #6
 8003c78:	4620      	mov	r0, r4
 8003c7a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	7663      	strb	r3, [r4, #25]
 8003c80:	e7b5      	b.n	8003bee <USBH_CtlReq+0xee>

08003c82 <USBH_GetDescriptor>:
{
 8003c82:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8003c84:	7884      	ldrb	r4, [r0, #2]
{
 8003c86:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8003c8a:	2c01      	cmp	r4, #1
 8003c8c:	d110      	bne.n	8003cb0 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003c8e:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8003c92:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8003c94:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8003c98:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8003c9c:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003c9e:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8003ca2:	bf0c      	ite	eq
 8003ca4:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8003ca8:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003caa:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8003cac:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8003cae:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8003cb0:	462a      	mov	r2, r5
 8003cb2:	4619      	mov	r1, r3
}
 8003cb4:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8003cb6:	f7ff bf23 	b.w	8003b00 <USBH_CtlReq>

08003cba <USBH_Get_DevDesc>:
{
 8003cba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8003cbc:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003cc0:	460d      	mov	r5, r1
 8003cc2:	9100      	str	r1, [sp, #0]
 8003cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cc8:	2100      	movs	r1, #0
{
 8003cca:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003ccc:	f7ff ffd9 	bl	8003c82 <USBH_GetDescriptor>
 8003cd0:	bbc8      	cbnz	r0, 8003d46 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8003cd2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8003cd6:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8003cda:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003cde:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8003ce2:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8003ce6:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8003cea:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8003cee:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8003cf2:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8003cf6:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8003cfa:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8003cfe:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  if (length > 8U)
 8003d02:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8003d04:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8003d08:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8003d0c:	d91b      	bls.n	8003d46 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8003d0e:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8003d12:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8003d16:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8003d1a:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8003d1e:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003d22:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8003d26:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8003d2a:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8003d2e:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8003d32:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8003d36:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003d3a:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8003d3e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8003d42:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8003d46:	b003      	add	sp, #12
 8003d48:	bd30      	pop	{r4, r5, pc}

08003d4a <USBH_Get_CfgDesc>:
{
 8003d4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 8003d4e:	f100 051c 	add.w	r5, r0, #28
{
 8003d52:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8003d54:	9100      	str	r1, [sp, #0]
 8003d56:	462b      	mov	r3, r5
 8003d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d5c:	2100      	movs	r1, #0
{
 8003d5e:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8003d60:	f7ff ff8f 	bl	8003c82 <USBH_GetDescriptor>
 8003d64:	bb48      	cbnz	r0, 8003dba <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8003d66:	7f23      	ldrb	r3, [r4, #28]
 8003d68:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8003d6c:	7f63      	ldrb	r3, [r4, #29]
 8003d6e:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8003d72:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003d76:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8003d7a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003d7e:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8003d82:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003d86:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003d8a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003d8e:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8003d92:	f884 333b 	strb.w	r3, [r4, #827]	; 0x33b
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003d96:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8003d98:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8003d9c:	f8a4 e336 	strh.w	lr, [r4, #822]	; 0x336
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8003da0:	f884 333c 	strb.w	r3, [r4, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003da4:	d909      	bls.n	8003dba <USBH_Get_CfgDesc+0x70>
 8003da6:	4627      	mov	r7, r4
 8003da8:	462b      	mov	r3, r5
 8003daa:	4606      	mov	r6, r0
 8003dac:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003dae:	f04f 0c1a 	mov.w	ip, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8003db2:	2e02      	cmp	r6, #2
 8003db4:	d001      	beq.n	8003dba <USBH_Get_CfgDesc+0x70>
 8003db6:	4596      	cmp	lr, r2
 8003db8:	d802      	bhi.n	8003dc0 <USBH_Get_CfgDesc+0x76>
}
 8003dba:	b003      	add	sp, #12
 8003dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003dc0:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003dc2:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003dc4:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003dc6:	7859      	ldrb	r1, [r3, #1]
 8003dc8:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003dca:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8003dcc:	d1f1      	bne.n	8003db2 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8003dce:	7819      	ldrb	r1, [r3, #0]
 8003dd0:	f887 133e 	strb.w	r1, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8003dd4:	7859      	ldrb	r1, [r3, #1]
 8003dd6:	f887 133f 	strb.w	r1, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8003dda:	7899      	ldrb	r1, [r3, #2]
 8003ddc:	f887 1340 	strb.w	r1, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8003de0:	78d9      	ldrb	r1, [r3, #3]
 8003de2:	f887 1341 	strb.w	r1, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8003de6:	7919      	ldrb	r1, [r3, #4]
 8003de8:	f887 1342 	strb.w	r1, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8003dec:	7959      	ldrb	r1, [r3, #5]
 8003dee:	f887 1343 	strb.w	r1, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8003df2:	7999      	ldrb	r1, [r3, #6]
 8003df4:	f887 1344 	strb.w	r1, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8003df8:	79d9      	ldrb	r1, [r3, #7]
 8003dfa:	f887 1345 	strb.w	r1, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8003dfe:	7a19      	ldrb	r1, [r3, #8]
 8003e00:	f887 1346 	strb.w	r1, [r7, #838]	; 0x346
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003e04:	fb0c f806 	mul.w	r8, ip, r6
        ep_ix = 0U;
 8003e08:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8003e0a:	f897 5342 	ldrb.w	r5, [r7, #834]	; 0x342
 8003e0e:	428d      	cmp	r5, r1
 8003e10:	d802      	bhi.n	8003e18 <USBH_Get_CfgDesc+0xce>
 8003e12:	3601      	adds	r6, #1
 8003e14:	371a      	adds	r7, #26
 8003e16:	e7cc      	b.n	8003db2 <USBH_Get_CfgDesc+0x68>
 8003e18:	4596      	cmp	lr, r2
 8003e1a:	d9fa      	bls.n	8003e12 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003e1c:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8003e1e:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003e20:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003e22:	785d      	ldrb	r5, [r3, #1]
 8003e24:	2d05      	cmp	r5, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003e26:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8003e28:	d1ef      	bne.n	8003e0a <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8003e2a:	1c4d      	adds	r5, r1, #1
 8003e2c:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 8003e30:	4421      	add	r1, r4
 8003e32:	f893 9000 	ldrb.w	r9, [r3]
 8003e36:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8003e3a:	f893 9001 	ldrb.w	r9, [r3, #1]
 8003e3e:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8003e42:	f893 9002 	ldrb.w	r9, [r3, #2]
 8003e46:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8003e4a:	f893 9003 	ldrb.w	r9, [r3, #3]
 8003e4e:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8003e52:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8003e56:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8003e5a:	f893 9006 	ldrb.w	r9, [r3, #6]
 8003e5e:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 8003e62:	b2e9      	uxtb	r1, r5
 8003e64:	e7d1      	b.n	8003e0a <USBH_Get_CfgDesc+0xc0>

08003e66 <USBH_Get_StringDesc>:
{
 8003e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8003e68:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8003e76:	462b      	mov	r3, r5
 8003e78:	2100      	movs	r1, #0
{
 8003e7a:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8003e7c:	f7ff ff01 	bl	8003c82 <USBH_GetDescriptor>
 8003e80:	b978      	cbnz	r0, 8003ea2 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8003e82:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d10b      	bne.n	8003ea2 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8003e8a:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8003e8e:	3b02      	subs	r3, #2
 8003e90:	42bb      	cmp	r3, r7
 8003e92:	bf28      	it	cs
 8003e94:	463b      	movcs	r3, r7
 8003e96:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d803      	bhi.n	8003ea6 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	7023      	strb	r3, [r4, #0]
}
 8003ea2:	b003      	add	sp, #12
 8003ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8003ea6:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8003ea8:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8003eaa:	7889      	ldrb	r1, [r1, #2]
 8003eac:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8003eb0:	b292      	uxth	r2, r2
 8003eb2:	e7f2      	b.n	8003e9a <USBH_Get_StringDesc+0x34>

08003eb4 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8003eb4:	7883      	ldrb	r3, [r0, #2]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d106      	bne.n	8003ec8 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003eba:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003ebc:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8003ebe:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8003ec0:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8003ec2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003ec4:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003ec6:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4611      	mov	r1, r2
 8003ecc:	f7ff be18 	b.w	8003b00 <USBH_CtlReq>

08003ed0 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8003ed0:	7883      	ldrb	r3, [r0, #2]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d106      	bne.n	8003ee4 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003ed6:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003ed8:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003eda:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8003edc:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8003ede:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003ee0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003ee2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	f7ff be0a 	b.w	8003b00 <USBH_CtlReq>

08003eec <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8003eec:	7883      	ldrb	r3, [r0, #2]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d106      	bne.n	8003f00 <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003ef2:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003ef4:	2203      	movs	r2, #3
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8003ef6:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8003ef8:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8003efa:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8003efc:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003efe:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8003f00:	2200      	movs	r2, #0
 8003f02:	4611      	mov	r1, r2
 8003f04:	f7ff bdfc 	b.w	8003b00 <USBH_CtlReq>

08003f08 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8003f08:	7883      	ldrb	r3, [r0, #2]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d106      	bne.n	8003f1c <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003f0e:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8003f10:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003f12:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8003f14:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8003f16:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8003f18:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8003f1a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4611      	mov	r1, r2
 8003f20:	f7ff bdee 	b.w	8003b00 <USBH_CtlReq>

08003f24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8003f24:	b530      	push	{r4, r5, lr}
 8003f26:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003f28:	2400      	movs	r4, #0
{
 8003f2a:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	9302      	str	r3, [sp, #8]
 8003f30:	9101      	str	r1, [sp, #4]
 8003f32:	9403      	str	r4, [sp, #12]
 8003f34:	9400      	str	r4, [sp, #0]
 8003f36:	4623      	mov	r3, r4
 8003f38:	4622      	mov	r2, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f000 fcd8 	bl	80048f0 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8003f40:	4620      	mov	r0, r4
 8003f42:	b005      	add	sp, #20
 8003f44:	bd30      	pop	{r4, r5, pc}

08003f46 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8003f46:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003f48:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003f4c:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003f4e:	2d00      	cmp	r5, #0
{
 8003f50:	461c      	mov	r4, r3
 8003f52:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003f56:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003f58:	bf18      	it	ne
 8003f5a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003f5c:	9303      	str	r3, [sp, #12]
 8003f5e:	2301      	movs	r3, #1
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9101      	str	r1, [sp, #4]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4621      	mov	r1, r4
 8003f6a:	f000 fcc1 	bl	80048f0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8003f6e:	2000      	movs	r0, #0
 8003f70:	b005      	add	sp, #20
 8003f72:	bd30      	pop	{r4, r5, pc}

08003f74 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003f74:	b530      	push	{r4, r5, lr}
 8003f76:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003f78:	2400      	movs	r4, #0
{
 8003f7a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003f7c:	9202      	str	r2, [sp, #8]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	9101      	str	r1, [sp, #4]
 8003f82:	9403      	str	r4, [sp, #12]
 8003f84:	9200      	str	r2, [sp, #0]
 8003f86:	4623      	mov	r3, r4
 8003f88:	4629      	mov	r1, r5
 8003f8a:	f000 fcb1 	bl	80048f0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8003f8e:	4620      	mov	r0, r4
 8003f90:	b005      	add	sp, #20
 8003f92:	bd30      	pop	{r4, r5, pc}

08003f94 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8003f94:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003f96:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8003f9a:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8003f9c:	2d00      	cmp	r5, #0
{
 8003f9e:	461c      	mov	r4, r3
 8003fa0:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003fa4:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8003fa6:	bf18      	it	ne
 8003fa8:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003faa:	9303      	str	r3, [sp, #12]
 8003fac:	2301      	movs	r3, #1
 8003fae:	9101      	str	r1, [sp, #4]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	4621      	mov	r1, r4
 8003fb8:	f000 fc9a 	bl	80048f0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	b005      	add	sp, #20
 8003fc0:	bd30      	pop	{r4, r5, pc}

08003fc2 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8003fc2:	b530      	push	{r4, r5, lr}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8003fc8:	2400      	movs	r4, #0
 8003fca:	9202      	str	r2, [sp, #8]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	9101      	str	r1, [sp, #4]
 8003fd0:	9403      	str	r4, [sp, #12]
 8003fd2:	9200      	str	r2, [sp, #0]
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	f000 fc8a 	bl	80048f0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8003fdc:	4620      	mov	r0, r4
 8003fde:	b005      	add	sp, #20
 8003fe0:	bd30      	pop	{r4, r5, pc}

08003fe2 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8003fe2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8003fe4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8003fe8:	9402      	str	r4, [sp, #8]
 8003fea:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8003fee:	9401      	str	r4, [sp, #4]
 8003ff0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8003ff4:	9400      	str	r4, [sp, #0]
 8003ff6:	f000 fc55 	bl	80048a4 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	b004      	add	sp, #16
 8003ffe:	bd10      	pop	{r4, pc}

08004000 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004000:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004002:	f000 fc67 	bl	80048d4 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8004006:	2000      	movs	r0, #0
 8004008:	bd08      	pop	{r3, pc}

0800400a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800400a:	b530      	push	{r4, r5, lr}
 800400c:	2300      	movs	r3, #0
 800400e:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004012:	f854 5b04 	ldr.w	r5, [r4], #4
 8004016:	042d      	lsls	r5, r5, #16
 8004018:	b2da      	uxtb	r2, r3
 800401a:	d407      	bmi.n	800402c <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800401c:	33e0      	adds	r3, #224	; 0xe0
 800401e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004022:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	{
	   return (uint16_t)idx;
 8004026:	b292      	uxth	r2, r2
}
 8004028:	b2d0      	uxtb	r0, r2
 800402a:	bd30      	pop	{r4, r5, pc}
 800402c:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 800402e:	2b0b      	cmp	r3, #11
 8004030:	d1ef      	bne.n	8004012 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8004032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004036:	e7f7      	b.n	8004028 <USBH_AllocPipe+0x1e>

08004038 <USBH_FreePipe>:
   if(idx < 11U)
 8004038:	290a      	cmp	r1, #10
 800403a:	bf9f      	itttt	ls
 800403c:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8004040:	f8d0 3380 	ldrls.w	r3, [r0, #896]	; 0x380
 8004044:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004048:	f8c0 3380 	strls.w	r3, [r0, #896]	; 0x380
}
 800404c:	2000      	movs	r0, #0
 800404e:	4770      	bx	lr

08004050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004050:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004052:	2230      	movs	r2, #48	; 0x30
{
 8004054:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004056:	eb0d 0002 	add.w	r0, sp, r2
 800405a:	2100      	movs	r1, #0
 800405c:	f000 fcf2 	bl	8004a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004060:	2214      	movs	r2, #20
 8004062:	2100      	movs	r1, #0
 8004064:	a807      	add	r0, sp, #28
 8004066:	f000 fced 	bl	8004a44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800406a:	2100      	movs	r1, #0
 800406c:	2210      	movs	r2, #16
 800406e:	a803      	add	r0, sp, #12
 8004070:	f000 fce8 	bl	8004a44 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	2500      	movs	r5, #0
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <SystemClock_Config+0xac>)
 8004078:	9501      	str	r5, [sp, #4]
 800407a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800407c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <SystemClock_Config+0xb0>)
 800408e:	9502      	str	r5, [sp, #8]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409e:	9302      	str	r3, [sp, #8]
 80040a0:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040a6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040ac:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80040ae:	2308      	movs	r3, #8
 80040b0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80040b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040b6:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040b8:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 80040ba:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040bc:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80040be:	2307      	movs	r3, #7
 80040c0:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040c2:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040c4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040c6:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040c8:	f7fd fede 	bl	8001e88 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040cc:	230f      	movs	r3, #15
 80040ce:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040d4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040d6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040dc:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040de:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040e0:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040e2:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040e4:	f7fe f8a4 	bl	8002230 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80040e8:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040ea:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80040ec:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80040ee:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80040f0:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040f2:	f7fe f959 	bl	80023a8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80040f6:	b018      	add	sp, #96	; 0x60
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800
 8004100:	40007000 	.word	0x40007000

08004104 <main>:
{
 8004104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004108:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 800410a:	f7fc fd5b 	bl	8000bc4 <HAL_Init>
  SystemClock_Config();
 800410e:	f7ff ff9f 	bl	8004050 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004112:	2214      	movs	r2, #20
 8004114:	2100      	movs	r1, #0
 8004116:	a807      	add	r0, sp, #28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004118:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800411a:	f000 fc93 	bl	8004a44 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800411e:	4b98      	ldr	r3, [pc, #608]	; (8004380 <main+0x27c>)
 8004120:	9401      	str	r4, [sp, #4]
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004124:	4897      	ldr	r0, [pc, #604]	; (8004384 <main+0x280>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004126:	4f98      	ldr	r7, [pc, #608]	; (8004388 <main+0x284>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004128:	f042 0210 	orr.w	r2, r2, #16
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
 800412e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004130:	f002 0210 	and.w	r2, r2, #16
 8004134:	9201      	str	r2, [sp, #4]
 8004136:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004138:	9402      	str	r4, [sp, #8]
 800413a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413c:	f042 0204 	orr.w	r2, r2, #4
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
 8004142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004144:	f002 0204 	and.w	r2, r2, #4
 8004148:	9202      	str	r2, [sp, #8]
 800414a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800414c:	9403      	str	r4, [sp, #12]
 800414e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
 8004156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004158:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800415c:	9203      	str	r2, [sp, #12]
 800415e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004160:	9404      	str	r4, [sp, #16]
 8004162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
 800416a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416c:	f002 0201 	and.w	r2, r2, #1
 8004170:	9204      	str	r2, [sp, #16]
 8004172:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004174:	9405      	str	r4, [sp, #20]
 8004176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004178:	f042 0202 	orr.w	r2, r2, #2
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
 800417e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004180:	f002 0202 	and.w	r2, r2, #2
 8004184:	9205      	str	r2, [sp, #20]
 8004186:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004188:	9406      	str	r4, [sp, #24]
 800418a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418c:	f042 0208 	orr.w	r2, r2, #8
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800419a:	4622      	mov	r2, r4
 800419c:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800419e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80041a0:	f7fc ff3a 	bl	8001018 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80041a4:	2201      	movs	r2, #1
 80041a6:	4611      	mov	r1, r2
 80041a8:	4878      	ldr	r0, [pc, #480]	; (800438c <main+0x288>)
 80041aa:	f7fc ff35 	bl	8001018 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80041ae:	4622      	mov	r2, r4
 80041b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80041b4:	4876      	ldr	r0, [pc, #472]	; (8004390 <main+0x28c>)
 80041b6:	f7fc ff2f 	bl	8001018 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ba:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80041bc:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80041be:	a907      	add	r1, sp, #28
 80041c0:	4870      	ldr	r0, [pc, #448]	; (8004384 <main+0x280>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80041c2:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80041ca:	f7fc fdb7 	bl	8000d3c <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80041ce:	a907      	add	r1, sp, #28
 80041d0:	486e      	ldr	r0, [pc, #440]	; (800438c <main+0x288>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80041d2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041d4:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041d6:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041dc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80041de:	f7fc fdad 	bl	8000d3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80041e2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80041e4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e6:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80041e8:	4868      	ldr	r0, [pc, #416]	; (800438c <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ea:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ee:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041f0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80041f4:	f7fc fda2 	bl	8000d3c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80041f8:	a907      	add	r1, sp, #28
 80041fa:	4866      	ldr	r0, [pc, #408]	; (8004394 <main+0x290>)
  GPIO_InitStruct.Pin = B1_Pin;
 80041fc:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80041fe:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004202:	f7fc fd9b 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004206:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004208:	a907      	add	r1, sp, #28
 800420a:	4863      	ldr	r0, [pc, #396]	; (8004398 <main+0x294>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800420c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800420e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004212:	f7fc fd93 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004216:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800421a:	a907      	add	r1, sp, #28
 800421c:	485e      	ldr	r0, [pc, #376]	; (8004398 <main+0x294>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800421e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004220:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004224:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004226:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800422a:	f7fc fd87 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800422e:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004232:	a907      	add	r1, sp, #28
 8004234:	4856      	ldr	r0, [pc, #344]	; (8004390 <main+0x28c>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8004236:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004238:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800423e:	f7fc fd7d 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004242:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004244:	a907      	add	r1, sp, #28
 8004246:	4852      	ldr	r0, [pc, #328]	; (8004390 <main+0x28c>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004248:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800424a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800424e:	f7fc fd75 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004252:	a907      	add	r1, sp, #28
 8004254:	484b      	ldr	r0, [pc, #300]	; (8004384 <main+0x280>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004256:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004258:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800425c:	f7fc fd6e 	bl	8000d3c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8004260:	484e      	ldr	r0, [pc, #312]	; (800439c <main+0x298>)
  hi2c1.Init.ClockSpeed = 100000;
 8004262:	4a4f      	ldr	r2, [pc, #316]	; (80043a0 <main+0x29c>)
 8004264:	4b4f      	ldr	r3, [pc, #316]	; (80043a4 <main+0x2a0>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004266:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8004268:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800426c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004270:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8004272:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004274:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004276:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004278:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800427a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800427c:	f7fd fb20 	bl	80018c0 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 8004280:	4849      	ldr	r0, [pc, #292]	; (80043a8 <main+0x2a4>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004282:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <main+0x2a8>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8004284:	6084      	str	r4, [r0, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004286:	f44f 7500 	mov.w	r5, #512	; 0x200
 800428a:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800428e:	4b48      	ldr	r3, [pc, #288]	; (80043b0 <main+0x2ac>)
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004290:	6105      	str	r5, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8004292:	6143      	str	r3, [r0, #20]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004294:	60c4      	str	r4, [r0, #12]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8004296:	6184      	str	r4, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8004298:	61c4      	str	r4, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800429a:	6204      	str	r4, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800429c:	f7fd fbbc 	bl	8001a18 <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 80042a0:	4844      	ldr	r0, [pc, #272]	; (80043b4 <main+0x2b0>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042a2:	4945      	ldr	r1, [pc, #276]	; (80043b8 <main+0x2b4>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042a4:	6185      	str	r5, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80042a6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80042aa:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.CRCPolynomial = 10;
 80042ae:	230a      	movs	r3, #10
  huart3.Instance = USART3;
 80042b0:	4d42      	ldr	r5, [pc, #264]	; (80043bc <main+0x2b8>)
  hspi1.Init.CRCPolynomial = 10;
 80042b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80042b4:	6084      	str	r4, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042b6:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042b8:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042ba:	6144      	str	r4, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042bc:	61c4      	str	r4, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042be:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c0:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042c2:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042c4:	f7fe f9a0 	bl	8002608 <HAL_SPI_Init>
  huart3.Init.BaudRate = 115200;
 80042c8:	483d      	ldr	r0, [pc, #244]	; (80043c0 <main+0x2bc>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80042ca:	60ac      	str	r4, [r5, #8]
  huart3.Init.BaudRate = 115200;
 80042cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80042d0:	e885 0009 	stmia.w	r5, {r0, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042d4:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042d6:	4628      	mov	r0, r5
  huart3.Init.Mode = UART_MODE_TX_RX;
 80042d8:	616b      	str	r3, [r5, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80042da:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80042dc:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042de:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e0:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80042e2:	f7fe fb7b 	bl	80029dc <HAL_UART_Init>
  MX_USB_HOST_Init();
 80042e6:	f000 f9f7 	bl	80046d8 <MX_USB_HOST_Init>
  uint8_t value_l = 76;
 80042ea:	234c      	movs	r3, #76	; 0x4c
 80042ec:	f88d 3000 	strb.w	r3, [sp]
  uint8_t value_r = 82;
 80042f0:	2352      	movs	r3, #82	; 0x52
 80042f2:	f88d 3001 	strb.w	r3, [sp, #1]
  uint8_t value_b = 66;
 80042f6:	ae0c      	add	r6, sp, #48	; 0x30
  uint8_t value_t = 84;
 80042f8:	2354      	movs	r3, #84	; 0x54
 80042fa:	f88d 3002 	strb.w	r3, [sp, #2]
  uint8_t value_b = 66;
 80042fe:	2342      	movs	r3, #66	; 0x42
 8004300:	f806 3d2d 	strb.w	r3, [r6, #-45]!
    MX_USB_HOST_Process();
 8004304:	f000 fa08 	bl	8004718 <MX_USB_HOST_Process>
    if(BSP_ACCELERO_Init() != HAL_OK)
 8004308:	f7fc fbfe 	bl	8000b08 <BSP_ACCELERO_Init>
    	    BSP_ACCELERO_GetXYZ(buffer);
 800430c:	a807      	add	r0, sp, #28
    	    int16_t buffer[3] = {0};
 800430e:	9407      	str	r4, [sp, #28]
 8004310:	f8ad 4020 	strh.w	r4, [sp, #32]
    	    BSP_ACCELERO_GetXYZ(buffer);
 8004314:	f7fc fc1c 	bl	8000b50 <BSP_ACCELERO_GetXYZ>
    	    xval = buffer[0];
 8004318:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
    	    yval = buffer[1];
 800431c:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
    	    if((ABS(xval))>(ABS(yval)))
 8004320:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8004324:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8004328:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 800432c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8004330:	4288      	cmp	r0, r1
 8004332:	dd14      	ble.n	800435e <main+0x25a>
    	      if(xval > ThresholdHigh)
 8004334:	2ac8      	cmp	r2, #200	; 0xc8
 8004336:	dd0a      	ble.n	800434e <main+0x24a>
    	        HAL_UART_Transmit( &huart3, &value_l, 1, 1000 );
 8004338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800433c:	2201      	movs	r2, #1
 800433e:	4669      	mov	r1, sp
    	        HAL_UART_Transmit( &huart3, &value_b, 1, 1000 );
 8004340:	4628      	mov	r0, r5
 8004342:	f7fe fb79 	bl	8002a38 <HAL_UART_Transmit>
    	        HAL_Delay(10);
 8004346:	200a      	movs	r0, #10
 8004348:	f7fc fc68 	bl	8000c1c <HAL_Delay>
      {
 800434c:	e7de      	b.n	800430c <main+0x208>
    	      else if(xval < ThresholdLow)
 800434e:	32c8      	adds	r2, #200	; 0xc8
 8004350:	daf9      	bge.n	8004346 <main+0x242>
    	        HAL_UART_Transmit( &huart3, &value_r, 1, 1000 );
 8004352:	2201      	movs	r2, #1
 8004354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004358:	eb0d 0102 	add.w	r1, sp, r2
 800435c:	e7f0      	b.n	8004340 <main+0x23c>
    	      if(yval < ThresholdLow)
 800435e:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 8004362:	da05      	bge.n	8004370 <main+0x26c>
    	        HAL_UART_Transmit( &huart3, &value_t, 1, 1000 );
 8004364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004368:	2201      	movs	r2, #1
 800436a:	f10d 0102 	add.w	r1, sp, #2
 800436e:	e7e7      	b.n	8004340 <main+0x23c>
    	      else if(yval > ThresholdHigh)
 8004370:	2bc8      	cmp	r3, #200	; 0xc8
 8004372:	dde8      	ble.n	8004346 <main+0x242>
    	        HAL_UART_Transmit( &huart3, &value_b, 1, 1000 );
 8004374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004378:	2201      	movs	r2, #1
 800437a:	4631      	mov	r1, r6
 800437c:	e7e0      	b.n	8004340 <main+0x23c>
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
 8004384:	40021000 	.word	0x40021000
 8004388:	10120000 	.word	0x10120000
 800438c:	40020800 	.word	0x40020800
 8004390:	40020c00 	.word	0x40020c00
 8004394:	40020000 	.word	0x40020000
 8004398:	40020400 	.word	0x40020400
 800439c:	200001bc 	.word	0x200001bc
 80043a0:	40005400 	.word	0x40005400
 80043a4:	000186a0 	.word	0x000186a0
 80043a8:	20000268 	.word	0x20000268
 80043ac:	40003c00 	.word	0x40003c00
 80043b0:	00017700 	.word	0x00017700
 80043b4:	20000210 	.word	0x20000210
 80043b8:	40013000 	.word	0x40013000
 80043bc:	2000017c 	.word	0x2000017c
 80043c0:	40004800 	.word	0x40004800

080043c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <HAL_MspInit+0x34>)
 80043cc:	2100      	movs	r1, #0
 80043ce:	9100      	str	r1, [sp, #0]
 80043d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d6:	645a      	str	r2, [r3, #68]	; 0x44
 80043d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80043de:	9200      	str	r2, [sp, #0]
 80043e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	9101      	str	r1, [sp, #4]
 80043e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f6:	b002      	add	sp, #8
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800

08004400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004400:	b530      	push	{r4, r5, lr}
 8004402:	4604      	mov	r4, r0
 8004404:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004406:	2214      	movs	r2, #20
 8004408:	2100      	movs	r1, #0
 800440a:	a803      	add	r0, sp, #12
 800440c:	f000 fb1a 	bl	8004a44 <memset>
  if(hi2c->Instance==I2C1)
 8004410:	6822      	ldr	r2, [r4, #0]
 8004412:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_I2C_MspInit+0x64>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d122      	bne.n	800445e <HAL_I2C_MspInit+0x5e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004418:	4c13      	ldr	r4, [pc, #76]	; (8004468 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800441a:	4814      	ldr	r0, [pc, #80]	; (800446c <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800441c:	2500      	movs	r5, #0
 800441e:	9501      	str	r5, [sp, #4]
 8004420:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	6323      	str	r3, [r4, #48]	; 0x30
 8004428:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	9301      	str	r3, [sp, #4]
 8004430:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8004432:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004436:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004438:	2312      	movs	r3, #18
 800443a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800443c:	2301      	movs	r3, #1
 800443e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004440:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004442:	2304      	movs	r3, #4
 8004444:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004446:	f7fc fc79 	bl	8000d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800444a:	9502      	str	r5, [sp, #8]
 800444c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800444e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004452:	6423      	str	r3, [r4, #64]	; 0x40
 8004454:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800445e:	b009      	add	sp, #36	; 0x24
 8004460:	bd30      	pop	{r4, r5, pc}
 8004462:	bf00      	nop
 8004464:	40005400 	.word	0x40005400
 8004468:	40023800 	.word	0x40023800
 800446c:	40020400 	.word	0x40020400

08004470 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	4604      	mov	r4, r0
 8004474:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004476:	2214      	movs	r2, #20
 8004478:	2100      	movs	r1, #0
 800447a:	a803      	add	r0, sp, #12
 800447c:	f000 fae2 	bl	8004a44 <memset>
  if(hi2s->Instance==SPI3)
 8004480:	6822      	ldr	r2, [r4, #0]
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_I2S_MspInit+0x88>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d135      	bne.n	80044f4 <HAL_I2S_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004488:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800448c:	2400      	movs	r4, #0
 800448e:	9400      	str	r4, [sp, #0]
 8004490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004492:	481a      	ldr	r0, [pc, #104]	; (80044fc <HAL_I2S_MspInit+0x8c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004494:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
 800449a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800449c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80044a0:	9200      	str	r2, [sp, #0]
 80044a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a4:	9401      	str	r4, [sp, #4]
 80044a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a8:	f042 0201 	orr.w	r2, r2, #1
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
 80044ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b0:	f002 0201 	and.w	r2, r2, #1
 80044b4:	9201      	str	r2, [sp, #4]
 80044b6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b8:	9402      	str	r4, [sp, #8]
 80044ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044bc:	f042 0204 	orr.w	r2, r2, #4
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	9302      	str	r3, [sp, #8]
 80044ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80044ce:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80044d0:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80044d2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80044d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80044d8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80044da:	f7fc fc2f 	bl	8000d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80044de:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044e2:	a903      	add	r1, sp, #12
 80044e4:	4806      	ldr	r0, [pc, #24]	; (8004500 <HAL_I2S_MspInit+0x90>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80044e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ea:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ec:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80044ee:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f0:	f7fc fc24 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80044f4:	b008      	add	sp, #32
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	40003c00 	.word	0x40003c00
 80044fc:	40020000 	.word	0x40020000
 8004500:	40020800 	.word	0x40020800

08004504 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004504:	b510      	push	{r4, lr}
 8004506:	4604      	mov	r4, r0
 8004508:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450a:	2214      	movs	r2, #20
 800450c:	2100      	movs	r1, #0
 800450e:	a803      	add	r0, sp, #12
 8004510:	f000 fa98 	bl	8004a44 <memset>
  if(hspi->Instance==SPI1)
 8004514:	6822      	ldr	r2, [r4, #0]
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_SPI_MspInit+0x60>)
 8004518:	429a      	cmp	r2, r3
 800451a:	d120      	bne.n	800455e <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800451c:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8004520:	2100      	movs	r1, #0
 8004522:	9101      	str	r1, [sp, #4]
 8004524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004526:	4810      	ldr	r0, [pc, #64]	; (8004568 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800452c:	645a      	str	r2, [r3, #68]	; 0x44
 800452e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004530:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004534:	9201      	str	r2, [sp, #4]
 8004536:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004538:	9102      	str	r1, [sp, #8]
 800453a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	9302      	str	r3, [sp, #8]
 800454a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800454c:	23e0      	movs	r3, #224	; 0xe0
 800454e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004550:	2302      	movs	r3, #2
 8004552:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004554:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004556:	2305      	movs	r3, #5
 8004558:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800455a:	f7fc fbef 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800455e:	b008      	add	sp, #32
 8004560:	bd10      	pop	{r4, pc}
 8004562:	bf00      	nop
 8004564:	40013000 	.word	0x40013000
 8004568:	40020000 	.word	0x40020000

0800456c <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 800456c:	6802      	ldr	r2, [r0, #0]
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_SPI_MspDeInit+0x1c>)
 8004570:	429a      	cmp	r2, r3
 8004572:	d108      	bne.n	8004586 <HAL_SPI_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8004574:	4a05      	ldr	r2, [pc, #20]	; (800458c <HAL_SPI_MspDeInit+0x20>)
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8004576:	4806      	ldr	r0, [pc, #24]	; (8004590 <HAL_SPI_MspDeInit+0x24>)
    __HAL_RCC_SPI1_CLK_DISABLE();
 8004578:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800457a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800457e:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8004580:	21e0      	movs	r1, #224	; 0xe0
 8004582:	f7fc bcbb 	b.w	8000efc <HAL_GPIO_DeInit>
 8004586:	4770      	bx	lr
 8004588:	40013000 	.word	0x40013000
 800458c:	40023800 	.word	0x40023800
 8004590:	40020000 	.word	0x40020000

08004594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	4604      	mov	r4, r0
 8004598:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800459a:	2214      	movs	r2, #20
 800459c:	2100      	movs	r1, #0
 800459e:	a803      	add	r0, sp, #12
 80045a0:	f000 fa50 	bl	8004a44 <memset>
  if(huart->Instance==USART3)
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_UART_MspInit+0x94>)
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d13a      	bne.n	8004622 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045ac:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80045b0:	2200      	movs	r2, #0
 80045b2:	9200      	str	r2, [sp, #0]
 80045b4:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b6:	481d      	ldr	r0, [pc, #116]	; (800462c <HAL_UART_MspInit+0x98>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80045b8:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80045bc:	6419      	str	r1, [r3, #64]	; 0x40
 80045be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80045c0:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
 80045c4:	9100      	str	r1, [sp, #0]
 80045c6:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045c8:	9201      	str	r2, [sp, #4]
 80045ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045cc:	f041 0102 	orr.w	r1, r1, #2
 80045d0:	6319      	str	r1, [r3, #48]	; 0x30
 80045d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045d4:	f001 0102 	and.w	r1, r1, #2
 80045d8:	9101      	str	r1, [sp, #4]
 80045da:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045dc:	9202      	str	r2, [sp, #8]
 80045de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e0:	f042 0208 	orr.w	r2, r2, #8
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	9302      	str	r3, [sp, #8]
 80045ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f6:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f8:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80045fa:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004600:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004602:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004604:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004606:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004608:	f7fc fb98 	bl	8000d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800460c:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004610:	a903      	add	r1, sp, #12
 8004612:	4807      	ldr	r0, [pc, #28]	; (8004630 <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004614:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004616:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004618:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800461c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800461e:	f7fc fb8d 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004622:	b009      	add	sp, #36	; 0x24
 8004624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004626:	bf00      	nop
 8004628:	40004800 	.word	0x40004800
 800462c:	40020400 	.word	0x40020400
 8004630:	40020c00 	.word	0x40020c00

08004634 <NMI_Handler>:
 8004634:	4770      	bx	lr

08004636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004636:	e7fe      	b.n	8004636 <HardFault_Handler>

08004638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004638:	e7fe      	b.n	8004638 <MemManage_Handler>

0800463a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800463a:	e7fe      	b.n	800463a <BusFault_Handler>

0800463c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800463c:	e7fe      	b.n	800463c <UsageFault_Handler>

0800463e <SVC_Handler>:
 800463e:	4770      	bx	lr

08004640 <DebugMon_Handler>:
 8004640:	4770      	bx	lr

08004642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004642:	4770      	bx	lr

08004644 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004644:	f7fc bad8 	b.w	8000bf8 <HAL_IncTick>

08004648 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800464a:	4804      	ldr	r0, [pc, #16]	; (800465c <OTG_FS_IRQHandler+0x14>)
 800464c:	f7fc fde0 	bl	8001210 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */
  HAL_UART_IRQHandler(&huart3);
 8004650:	4803      	ldr	r0, [pc, #12]	; (8004660 <OTG_FS_IRQHandler+0x18>)

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_IRQHandler(&huart3);
 8004656:	f7fe ba8f 	b.w	8002b78 <HAL_UART_IRQHandler>
 800465a:	bf00      	nop
 800465c:	2000067c 	.word	0x2000067c
 8004660:	2000017c 	.word	0x2000017c

08004664 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004664:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <_sbrk+0x2c>)
 8004668:	6819      	ldr	r1, [r3, #0]
{
 800466a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800466c:	b909      	cbnz	r1, 8004672 <_sbrk+0xe>
		heap_end = &end;
 800466e:	4909      	ldr	r1, [pc, #36]	; (8004694 <_sbrk+0x30>)
 8004670:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8004672:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004674:	4669      	mov	r1, sp
 8004676:	4402      	add	r2, r0
 8004678:	428a      	cmp	r2, r1
 800467a:	d906      	bls.n	800468a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800467c:	f000 f9a8 	bl	80049d0 <__errno>
 8004680:	230c      	movs	r3, #12
 8004682:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004688:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800468a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800468c:	bd08      	pop	{r3, pc}
 800468e:	bf00      	nop
 8004690:	20000168 	.word	0x20000168
 8004694:	20000944 	.word	0x20000944

08004698 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <SystemInit+0x18>)
 800469a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800469e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80046a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80046b4:	2904      	cmp	r1, #4
 80046b6:	d00a      	beq.n	80046ce <USBH_UserProcess+0x1a>
 80046b8:	2905      	cmp	r1, #5
 80046ba:	d004      	beq.n	80046c6 <USBH_UserProcess+0x12>
 80046bc:	2902      	cmp	r1, #2
 80046be:	d105      	bne.n	80046cc <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80046c0:	4b04      	ldr	r3, [pc, #16]	; (80046d4 <USBH_UserProcess+0x20>)
 80046c2:	7019      	strb	r1, [r3, #0]
  break;
 80046c4:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80046c6:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80046c8:	4b02      	ldr	r3, [pc, #8]	; (80046d4 <USBH_UserProcess+0x20>)
 80046ca:	701a      	strb	r2, [r3, #0]
 80046cc:	4770      	bx	lr
 80046ce:	2201      	movs	r2, #1
 80046d0:	e7fa      	b.n	80046c8 <USBH_UserProcess+0x14>
 80046d2:	bf00      	nop
 80046d4:	2000016c 	.word	0x2000016c

080046d8 <MX_USB_HOST_Init>:
{
 80046d8:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80046da:	2201      	movs	r2, #1
 80046dc:	490b      	ldr	r1, [pc, #44]	; (800470c <MX_USB_HOST_Init+0x34>)
 80046de:	480c      	ldr	r0, [pc, #48]	; (8004710 <MX_USB_HOST_Init+0x38>)
 80046e0:	f7ff f82c 	bl	800373c <USBH_Init>
 80046e4:	b108      	cbz	r0, 80046ea <MX_USB_HOST_Init+0x12>
    Error_Handler();
 80046e6:	f7ff fe6d 	bl	80043c4 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80046ea:	490a      	ldr	r1, [pc, #40]	; (8004714 <MX_USB_HOST_Init+0x3c>)
 80046ec:	4808      	ldr	r0, [pc, #32]	; (8004710 <MX_USB_HOST_Init+0x38>)
 80046ee:	f7ff f83c 	bl	800376a <USBH_RegisterClass>
 80046f2:	b108      	cbz	r0, 80046f8 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 80046f4:	f7ff fe66 	bl	80043c4 <Error_Handler>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80046f8:	4805      	ldr	r0, [pc, #20]	; (8004710 <MX_USB_HOST_Init+0x38>)
 80046fa:	f7ff f869 	bl	80037d0 <USBH_Start>
 80046fe:	b118      	cbz	r0, 8004708 <MX_USB_HOST_Init+0x30>
}
 8004700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004704:	f7ff be5e 	b.w	80043c4 <Error_Handler>
 8004708:	bd08      	pop	{r3, pc}
 800470a:	bf00      	nop
 800470c:	080046b5 	.word	0x080046b5
 8004710:	200002b0 	.word	0x200002b0
 8004714:	20000064 	.word	0x20000064

08004718 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8004718:	4801      	ldr	r0, [pc, #4]	; (8004720 <MX_USB_HOST_Process+0x8>)
 800471a:	f7ff b863 	b.w	80037e4 <USBH_Process>
 800471e:	bf00      	nop
 8004720:	200002b0 	.word	0x200002b0

08004724 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004724:	b530      	push	{r4, r5, lr}
 8004726:	4604      	mov	r4, r0
 8004728:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472a:	2214      	movs	r2, #20
 800472c:	2100      	movs	r1, #0
 800472e:	a803      	add	r0, sp, #12
 8004730:	f000 f988 	bl	8004a44 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800473a:	d135      	bne.n	80047a8 <HAL_HCD_MspInit+0x84>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800473c:	4c1b      	ldr	r4, [pc, #108]	; (80047ac <HAL_HCD_MspInit+0x88>)
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800473e:	481c      	ldr	r0, [pc, #112]	; (80047b0 <HAL_HCD_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004740:	2500      	movs	r5, #0
 8004742:	9501      	str	r5, [sp, #4]
 8004744:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6323      	str	r3, [r4, #48]	; 0x30
 800474c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004756:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800475c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800475e:	f7fc faed 	bl	8000d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004762:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004766:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800476c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800476e:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004770:	480f      	ldr	r0, [pc, #60]	; (80047b0 <HAL_HCD_MspInit+0x8c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004772:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004776:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004778:	f7fc fae0 	bl	8000d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800477c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	6363      	str	r3, [r4, #52]	; 0x34
 8004784:	9502      	str	r5, [sp, #8]
 8004786:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800478c:	6463      	str	r3, [r4, #68]	; 0x44
 800478e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004794:	9302      	str	r3, [sp, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004796:	2043      	movs	r0, #67	; 0x43
 8004798:	462a      	mov	r2, r5
 800479a:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800479c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800479e:	f7fc fa63 	bl	8000c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80047a2:	2043      	movs	r0, #67	; 0x43
 80047a4:	f7fc fa94 	bl	8000cd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80047a8:	b009      	add	sp, #36	; 0x24
 80047aa:	bd30      	pop	{r4, r5, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40020000 	.word	0x40020000

080047b4 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 80047b4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80047b8:	f7ff b95c 	b.w	8003a74 <USBH_LL_IncTimer>

080047bc <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80047bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80047c0:	f7ff b96e 	b.w	8003aa0 <USBH_LL_Connect>

080047c4 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80047c4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80047c8:	f7ff b97e 	b.w	8003ac8 <USBH_LL_Disconnect>

080047cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80047cc:	4770      	bx	lr

080047ce <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80047ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80047d2:	f7ff b95d 	b.w	8003a90 <USBH_LL_PortEnabled>

080047d6 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80047d6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80047da:	f7ff b95d 	b.w	8003a98 <USBH_LL_PortDisabled>
	...

080047e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80047e0:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80047e2:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 80047e6:	2b01      	cmp	r3, #1
{
 80047e8:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 80047ea:	d11b      	bne.n	8004824 <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80047ec:	480e      	ldr	r0, [pc, #56]	; (8004828 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_FS;
 80047ee:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80047f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80047f6:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80047f8:	2208      	movs	r2, #8
 80047fa:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80047fc:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80047fe:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004800:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8004802:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004806:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004808:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800480a:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800480c:	f7fc fc53 	bl	80010b6 <HAL_HCD_Init>
 8004810:	b108      	cbz	r0, 8004816 <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 8004812:	f7ff fdd7 	bl	80043c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004816:	4804      	ldr	r0, [pc, #16]	; (8004828 <USBH_LL_Init+0x48>)
 8004818:	f7fd f84c 	bl	80018b4 <HAL_HCD_GetCurrentFrame>
 800481c:	4601      	mov	r1, r0
 800481e:	4620      	mov	r0, r4
 8004820:	f7ff f925 	bl	8003a6e <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8004824:	2000      	movs	r0, #0
 8004826:	bd10      	pop	{r4, pc}
 8004828:	2000067c 	.word	0x2000067c

0800482c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800482c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800482e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004832:	f7fd f809 	bl	8001848 <HAL_HCD_Start>
 8004836:	2803      	cmp	r0, #3
 8004838:	bf9a      	itte	ls
 800483a:	4b02      	ldrls	r3, [pc, #8]	; (8004844 <USBH_LL_Start+0x18>)
 800483c:	5c18      	ldrbls	r0, [r3, r0]
 800483e:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004840:	bd08      	pop	{r3, pc}
 8004842:	bf00      	nop
 8004844:	08004c6b 	.word	0x08004c6b

08004848 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004848:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800484a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800484e:	f7fd f811 	bl	8001874 <HAL_HCD_Stop>
 8004852:	2803      	cmp	r0, #3
 8004854:	bf9a      	itte	ls
 8004856:	4b02      	ldrls	r3, [pc, #8]	; (8004860 <USBH_LL_Stop+0x18>)
 8004858:	5c18      	ldrbls	r0, [r3, r0]
 800485a:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800485c:	bd08      	pop	{r3, pc}
 800485e:	bf00      	nop
 8004860:	08004c6b 	.word	0x08004c6b

08004864 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004864:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004866:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800486a:	f7fd f826 	bl	80018ba <HAL_HCD_GetCurrentSpeed>
 800486e:	2802      	cmp	r0, #2
 8004870:	bf9a      	itte	ls
 8004872:	4b02      	ldrls	r3, [pc, #8]	; (800487c <USBH_LL_GetSpeed+0x18>)
 8004874:	5c18      	ldrbls	r0, [r3, r0]
 8004876:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8004878:	bd08      	pop	{r3, pc}
 800487a:	bf00      	nop
 800487c:	08004c68 	.word	0x08004c68

08004880 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004880:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004882:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004886:	f7fd f807 	bl	8001898 <HAL_HCD_ResetPort>
 800488a:	2803      	cmp	r0, #3
 800488c:	bf9a      	itte	ls
 800488e:	4b02      	ldrls	r3, [pc, #8]	; (8004898 <USBH_LL_ResetPort+0x18>)
 8004890:	5c18      	ldrbls	r0, [r3, r0]
 8004892:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004894:	bd08      	pop	{r3, pc}
 8004896:	bf00      	nop
 8004898:	08004c6b 	.word	0x08004c6b

0800489c <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800489c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80048a0:	f7fd b803 	b.w	80018aa <HAL_HCD_HC_GetXferCount>

080048a4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80048a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80048a6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80048aa:	9402      	str	r4, [sp, #8]
 80048ac:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80048b0:	9401      	str	r4, [sp, #4]
 80048b2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80048b6:	9400      	str	r4, [sp, #0]
 80048b8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80048bc:	f7fc fbb1 	bl	8001022 <HAL_HCD_HC_Init>
 80048c0:	2803      	cmp	r0, #3
 80048c2:	bf9a      	itte	ls
 80048c4:	4b02      	ldrls	r3, [pc, #8]	; (80048d0 <USBH_LL_OpenPipe+0x2c>)
 80048c6:	5c18      	ldrbls	r0, [r3, r0]
 80048c8:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80048ca:	b004      	add	sp, #16
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	bf00      	nop
 80048d0:	08004c6b 	.word	0x08004c6b

080048d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80048d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80048d6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80048da:	f7fc fbda 	bl	8001092 <HAL_HCD_HC_Halt>
 80048de:	2803      	cmp	r0, #3
 80048e0:	bf9a      	itte	ls
 80048e2:	4b02      	ldrls	r3, [pc, #8]	; (80048ec <USBH_LL_ClosePipe+0x18>)
 80048e4:	5c18      	ldrbls	r0, [r3, r0]
 80048e6:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80048e8:	bd08      	pop	{r3, pc}
 80048ea:	bf00      	nop
 80048ec:	08004c6b 	.word	0x08004c6b

080048f0 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80048f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80048f2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80048f6:	9403      	str	r4, [sp, #12]
 80048f8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80048fc:	9402      	str	r4, [sp, #8]
 80048fe:	9c07      	ldr	r4, [sp, #28]
 8004900:	9401      	str	r4, [sp, #4]
 8004902:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004906:	9400      	str	r4, [sp, #0]
 8004908:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800490c:	f7fc fc1e 	bl	800114c <HAL_HCD_HC_SubmitRequest>
 8004910:	2803      	cmp	r0, #3
 8004912:	bf9a      	itte	ls
 8004914:	4b02      	ldrls	r3, [pc, #8]	; (8004920 <USBH_LL_SubmitURB+0x30>)
 8004916:	5c18      	ldrbls	r0, [r3, r0]
 8004918:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800491a:	b004      	add	sp, #16
 800491c:	bd10      	pop	{r4, pc}
 800491e:	bf00      	nop
 8004920:	08004c6b 	.word	0x08004c6b

08004924 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004924:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004928:	f7fc bfb9 	b.w	800189e <HAL_HCD_HC_GetURBState>

0800492c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800492c:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800492e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8004936:	4608      	mov	r0, r1
 8004938:	f000 f816 	bl	8004968 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800493c:	20c8      	movs	r0, #200	; 0xc8
 800493e:	f7fc f96d 	bl	8000c1c <HAL_Delay>
  return USBH_OK;
}
 8004942:	2000      	movs	r0, #0
 8004944:	bd08      	pop	{r3, pc}

08004946 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004946:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 800494a:	2328      	movs	r3, #40	; 0x28
 800494c:	fb03 0101 	mla	r1, r3, r1, r0
 8004950:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8004954:	b11b      	cbz	r3, 800495e <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004956:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800495a:	2000      	movs	r0, #0
 800495c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800495e:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8004962:	e7fa      	b.n	800495a <USBH_LL_SetToggle+0x14>

08004964 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004964:	f7fc b95a 	b.w	8000c1c <HAL_Delay>

08004968 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8004968:	fab0 f280 	clz	r2, r0
 800496c:	0952      	lsrs	r2, r2, #5
 800496e:	2101      	movs	r1, #1
 8004970:	4801      	ldr	r0, [pc, #4]	; (8004978 <MX_DriverVbusFS+0x10>)
 8004972:	f7fc bb51 	b.w	8001018 <HAL_GPIO_WritePin>
 8004976:	bf00      	nop
 8004978:	40020800 	.word	0x40020800

0800497c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800497c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004980:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004982:	e003      	b.n	800498c <LoopCopyDataInit>

08004984 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004986:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004988:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800498a:	3104      	adds	r1, #4

0800498c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800498c:	480b      	ldr	r0, [pc, #44]	; (80049bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004990:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004992:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004994:	d3f6      	bcc.n	8004984 <CopyDataInit>
  ldr  r2, =_sbss
 8004996:	4a0b      	ldr	r2, [pc, #44]	; (80049c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004998:	e002      	b.n	80049a0 <LoopFillZerobss>

0800499a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800499a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800499c:	f842 3b04 	str.w	r3, [r2], #4

080049a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80049a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80049a4:	d3f9      	bcc.n	800499a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80049a6:	f7ff fe77 	bl	8004698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049aa:	f000 f817 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049ae:	f7ff fba9 	bl	8004104 <main>
  bx  lr    
 80049b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80049b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80049b8:	08004c80 	.word	0x08004c80
  ldr  r0, =_sdata
 80049bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80049c0:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 80049c4:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 80049c8:	20000944 	.word	0x20000944

080049cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049cc:	e7fe      	b.n	80049cc <ADC_IRQHandler>
	...

080049d0 <__errno>:
 80049d0:	4b01      	ldr	r3, [pc, #4]	; (80049d8 <__errno+0x8>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000088 	.word	0x20000088

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4e0d      	ldr	r6, [pc, #52]	; (8004a14 <__libc_init_array+0x38>)
 80049e0:	4c0d      	ldr	r4, [pc, #52]	; (8004a18 <__libc_init_array+0x3c>)
 80049e2:	1ba4      	subs	r4, r4, r6
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	2500      	movs	r5, #0
 80049e8:	42a5      	cmp	r5, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	4e0b      	ldr	r6, [pc, #44]	; (8004a1c <__libc_init_array+0x40>)
 80049ee:	4c0c      	ldr	r4, [pc, #48]	; (8004a20 <__libc_init_array+0x44>)
 80049f0:	f000 f8ee 	bl	8004bd0 <_init>
 80049f4:	1ba4      	subs	r4, r4, r6
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	2500      	movs	r5, #0
 80049fa:	42a5      	cmp	r5, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a04:	4798      	blx	r3
 8004a06:	3501      	adds	r5, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a0e:	4798      	blx	r3
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08004c78 	.word	0x08004c78
 8004a18:	08004c78 	.word	0x08004c78
 8004a1c:	08004c78 	.word	0x08004c78
 8004a20:	08004c7c 	.word	0x08004c7c

08004a24 <malloc>:
 8004a24:	4b02      	ldr	r3, [pc, #8]	; (8004a30 <malloc+0xc>)
 8004a26:	4601      	mov	r1, r0
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	f000 b861 	b.w	8004af0 <_malloc_r>
 8004a2e:	bf00      	nop
 8004a30:	20000088 	.word	0x20000088

08004a34 <free>:
 8004a34:	4b02      	ldr	r3, [pc, #8]	; (8004a40 <free+0xc>)
 8004a36:	4601      	mov	r1, r0
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	f000 b80b 	b.w	8004a54 <_free_r>
 8004a3e:	bf00      	nop
 8004a40:	20000088 	.word	0x20000088

08004a44 <memset>:
 8004a44:	4402      	add	r2, r0
 8004a46:	4603      	mov	r3, r0
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d100      	bne.n	8004a4e <memset+0xa>
 8004a4c:	4770      	bx	lr
 8004a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a52:	e7f9      	b.n	8004a48 <memset+0x4>

08004a54 <_free_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4605      	mov	r5, r0
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	d045      	beq.n	8004ae8 <_free_r+0x94>
 8004a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a60:	1f0c      	subs	r4, r1, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfb8      	it	lt
 8004a66:	18e4      	addlt	r4, r4, r3
 8004a68:	f000 f8b0 	bl	8004bcc <__malloc_lock>
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <_free_r+0x98>)
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	4610      	mov	r0, r2
 8004a72:	b933      	cbnz	r3, 8004a82 <_free_r+0x2e>
 8004a74:	6063      	str	r3, [r4, #4]
 8004a76:	6014      	str	r4, [r2, #0]
 8004a78:	4628      	mov	r0, r5
 8004a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a7e:	f000 b8a6 	b.w	8004bce <__malloc_unlock>
 8004a82:	42a3      	cmp	r3, r4
 8004a84:	d90c      	bls.n	8004aa0 <_free_r+0x4c>
 8004a86:	6821      	ldr	r1, [r4, #0]
 8004a88:	1862      	adds	r2, r4, r1
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	bf04      	itt	eq
 8004a8e:	681a      	ldreq	r2, [r3, #0]
 8004a90:	685b      	ldreq	r3, [r3, #4]
 8004a92:	6063      	str	r3, [r4, #4]
 8004a94:	bf04      	itt	eq
 8004a96:	1852      	addeq	r2, r2, r1
 8004a98:	6022      	streq	r2, [r4, #0]
 8004a9a:	6004      	str	r4, [r0, #0]
 8004a9c:	e7ec      	b.n	8004a78 <_free_r+0x24>
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	b10a      	cbz	r2, 8004aa8 <_free_r+0x54>
 8004aa4:	42a2      	cmp	r2, r4
 8004aa6:	d9fa      	bls.n	8004a9e <_free_r+0x4a>
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	1858      	adds	r0, r3, r1
 8004aac:	42a0      	cmp	r0, r4
 8004aae:	d10b      	bne.n	8004ac8 <_free_r+0x74>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	4401      	add	r1, r0
 8004ab4:	1858      	adds	r0, r3, r1
 8004ab6:	4282      	cmp	r2, r0
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	d1dd      	bne.n	8004a78 <_free_r+0x24>
 8004abc:	6810      	ldr	r0, [r2, #0]
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	4401      	add	r1, r0
 8004ac4:	6019      	str	r1, [r3, #0]
 8004ac6:	e7d7      	b.n	8004a78 <_free_r+0x24>
 8004ac8:	d902      	bls.n	8004ad0 <_free_r+0x7c>
 8004aca:	230c      	movs	r3, #12
 8004acc:	602b      	str	r3, [r5, #0]
 8004ace:	e7d3      	b.n	8004a78 <_free_r+0x24>
 8004ad0:	6820      	ldr	r0, [r4, #0]
 8004ad2:	1821      	adds	r1, r4, r0
 8004ad4:	428a      	cmp	r2, r1
 8004ad6:	bf04      	itt	eq
 8004ad8:	6811      	ldreq	r1, [r2, #0]
 8004ada:	6852      	ldreq	r2, [r2, #4]
 8004adc:	6062      	str	r2, [r4, #4]
 8004ade:	bf04      	itt	eq
 8004ae0:	1809      	addeq	r1, r1, r0
 8004ae2:	6021      	streq	r1, [r4, #0]
 8004ae4:	605c      	str	r4, [r3, #4]
 8004ae6:	e7c7      	b.n	8004a78 <_free_r+0x24>
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
 8004aea:	bf00      	nop
 8004aec:	20000170 	.word	0x20000170

08004af0 <_malloc_r>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	1ccd      	adds	r5, r1, #3
 8004af4:	f025 0503 	bic.w	r5, r5, #3
 8004af8:	3508      	adds	r5, #8
 8004afa:	2d0c      	cmp	r5, #12
 8004afc:	bf38      	it	cc
 8004afe:	250c      	movcc	r5, #12
 8004b00:	2d00      	cmp	r5, #0
 8004b02:	4606      	mov	r6, r0
 8004b04:	db01      	blt.n	8004b0a <_malloc_r+0x1a>
 8004b06:	42a9      	cmp	r1, r5
 8004b08:	d903      	bls.n	8004b12 <_malloc_r+0x22>
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	6033      	str	r3, [r6, #0]
 8004b0e:	2000      	movs	r0, #0
 8004b10:	bd70      	pop	{r4, r5, r6, pc}
 8004b12:	f000 f85b 	bl	8004bcc <__malloc_lock>
 8004b16:	4a23      	ldr	r2, [pc, #140]	; (8004ba4 <_malloc_r+0xb4>)
 8004b18:	6814      	ldr	r4, [r2, #0]
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	b991      	cbnz	r1, 8004b44 <_malloc_r+0x54>
 8004b1e:	4c22      	ldr	r4, [pc, #136]	; (8004ba8 <_malloc_r+0xb8>)
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	b91b      	cbnz	r3, 8004b2c <_malloc_r+0x3c>
 8004b24:	4630      	mov	r0, r6
 8004b26:	f000 f841 	bl	8004bac <_sbrk_r>
 8004b2a:	6020      	str	r0, [r4, #0]
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f000 f83c 	bl	8004bac <_sbrk_r>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d126      	bne.n	8004b86 <_malloc_r+0x96>
 8004b38:	230c      	movs	r3, #12
 8004b3a:	6033      	str	r3, [r6, #0]
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f000 f846 	bl	8004bce <__malloc_unlock>
 8004b42:	e7e4      	b.n	8004b0e <_malloc_r+0x1e>
 8004b44:	680b      	ldr	r3, [r1, #0]
 8004b46:	1b5b      	subs	r3, r3, r5
 8004b48:	d41a      	bmi.n	8004b80 <_malloc_r+0x90>
 8004b4a:	2b0b      	cmp	r3, #11
 8004b4c:	d90f      	bls.n	8004b6e <_malloc_r+0x7e>
 8004b4e:	600b      	str	r3, [r1, #0]
 8004b50:	50cd      	str	r5, [r1, r3]
 8004b52:	18cc      	adds	r4, r1, r3
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 f83a 	bl	8004bce <__malloc_unlock>
 8004b5a:	f104 000b 	add.w	r0, r4, #11
 8004b5e:	1d23      	adds	r3, r4, #4
 8004b60:	f020 0007 	bic.w	r0, r0, #7
 8004b64:	1ac3      	subs	r3, r0, r3
 8004b66:	d01b      	beq.n	8004ba0 <_malloc_r+0xb0>
 8004b68:	425a      	negs	r2, r3
 8004b6a:	50e2      	str	r2, [r4, r3]
 8004b6c:	bd70      	pop	{r4, r5, r6, pc}
 8004b6e:	428c      	cmp	r4, r1
 8004b70:	bf0d      	iteet	eq
 8004b72:	6863      	ldreq	r3, [r4, #4]
 8004b74:	684b      	ldrne	r3, [r1, #4]
 8004b76:	6063      	strne	r3, [r4, #4]
 8004b78:	6013      	streq	r3, [r2, #0]
 8004b7a:	bf18      	it	ne
 8004b7c:	460c      	movne	r4, r1
 8004b7e:	e7e9      	b.n	8004b54 <_malloc_r+0x64>
 8004b80:	460c      	mov	r4, r1
 8004b82:	6849      	ldr	r1, [r1, #4]
 8004b84:	e7ca      	b.n	8004b1c <_malloc_r+0x2c>
 8004b86:	1cc4      	adds	r4, r0, #3
 8004b88:	f024 0403 	bic.w	r4, r4, #3
 8004b8c:	42a0      	cmp	r0, r4
 8004b8e:	d005      	beq.n	8004b9c <_malloc_r+0xac>
 8004b90:	1a21      	subs	r1, r4, r0
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 f80a 	bl	8004bac <_sbrk_r>
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d0cd      	beq.n	8004b38 <_malloc_r+0x48>
 8004b9c:	6025      	str	r5, [r4, #0]
 8004b9e:	e7d9      	b.n	8004b54 <_malloc_r+0x64>
 8004ba0:	bd70      	pop	{r4, r5, r6, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000170 	.word	0x20000170
 8004ba8:	20000174 	.word	0x20000174

08004bac <_sbrk_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4c06      	ldr	r4, [pc, #24]	; (8004bc8 <_sbrk_r+0x1c>)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	f7ff fd54 	bl	8004664 <_sbrk>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_sbrk_r+0x1a>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_sbrk_r+0x1a>
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	20000940 	.word	0x20000940

08004bcc <__malloc_lock>:
 8004bcc:	4770      	bx	lr

08004bce <__malloc_unlock>:
 8004bce:	4770      	bx	lr

08004bd0 <_init>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr

08004bdc <_fini>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr
